
VL53L0X_Ranging_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001328  0800b870  0800b870  0001b870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800cb98  0800cb98  0001cb98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800cb9c  0800cb9c  0001cb9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000834  20000000  0800cba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002e4  20000834  0800d3d4  00020834  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000b18  0800d3d4  00020b18  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020834  2**0
                  CONTENTS, READONLY
  9 .debug_line   00019063  00000000  00000000  00020864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   00023be6  00000000  00000000  000398c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003b32  00000000  00000000  0005d4ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001388  00000000  00000000  00060fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    0006556d  00000000  00000000  00062368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001230  00000000  00000000  000c78d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00013636  00000000  00000000  000c8b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  000dc13e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005868  00000000  00000000  000dc194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000834 	.word	0x20000834
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b858 	.word	0x0800b858

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000838 	.word	0x20000838
 80001dc:	0800b858 	.word	0x0800b858

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000280:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000284:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000286:	e003      	b.n	8000290 <LoopCopyDataInit>

08000288 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000288:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800028a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800028c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800028e:	3104      	adds	r1, #4

08000290 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000290:	480b      	ldr	r0, [pc, #44]	; (80002c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000292:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000294:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000296:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000298:	d3f6      	bcc.n	8000288 <CopyDataInit>
  ldr  r2, =_sbss
 800029a:	4a0b      	ldr	r2, [pc, #44]	; (80002c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800029c:	e002      	b.n	80002a4 <LoopFillZerobss>

0800029e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800029e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002a0:	f842 3b04 	str.w	r3, [r2], #4

080002a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002a4:	4b09      	ldr	r3, [pc, #36]	; (80002cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002a8:	d3f9      	bcc.n	800029e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80002aa:	f007 fb37 	bl	800791c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002ae:	f00a fe29 	bl	800af04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002b2:	f000 fd0b 	bl	8000ccc <main>
  bx  lr    
 80002b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80002b8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80002bc:	0800cba0 	.word	0x0800cba0
  ldr  r0, =_sdata
 80002c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80002c4:	20000834 	.word	0x20000834
  ldr  r2, =_sbss
 80002c8:	20000834 	.word	0x20000834
  ldr  r3, = _ebss
 80002cc:	20000b18 	.word	0x20000b18

080002d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002d0:	e7fe      	b.n	80002d0 <ADC_IRQHandler>
	...

080002d4 <MX_TIM5_Init>:
 */
TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b08a      	sub	sp, #40	; 0x28
 80002d8:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim5.Instance = TIM5;
 80002da:	4b17      	ldr	r3, [pc, #92]	; (8000338 <MX_TIM5_Init+0x64>)
 80002dc:	4a17      	ldr	r2, [pc, #92]	; (800033c <MX_TIM5_Init+0x68>)
 80002de:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 80002e0:	4b15      	ldr	r3, [pc, #84]	; (8000338 <MX_TIM5_Init+0x64>)
 80002e2:	2253      	movs	r2, #83	; 0x53
 80002e4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e6:	4b14      	ldr	r3, [pc, #80]	; (8000338 <MX_TIM5_Init+0x64>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFFFFFF;
 80002ec:	4b12      	ldr	r3, [pc, #72]	; (8000338 <MX_TIM5_Init+0x64>)
 80002ee:	f04f 32ff 	mov.w	r2, #4294967295
 80002f2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002f4:	4b10      	ldr	r3, [pc, #64]	; (8000338 <MX_TIM5_Init+0x64>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	611a      	str	r2, [r3, #16]
  HAL_TIM_OC_Init(&htim5);
 80002fa:	480f      	ldr	r0, [pc, #60]	; (8000338 <MX_TIM5_Init+0x64>)
 80002fc:	f009 fd79 	bl	8009df2 <HAL_TIM_OC_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000300:	2300      	movs	r3, #0
 8000302:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000304:	2300      	movs	r3, #0
 8000306:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig);
 8000308:	f107 0320 	add.w	r3, r7, #32
 800030c:	4619      	mov	r1, r3
 800030e:	480a      	ldr	r0, [pc, #40]	; (8000338 <MX_TIM5_Init+0x64>)
 8000310:	f00a f816 	bl	800a340 <HAL_TIMEx_MasterConfigSynchronization>

  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000314:	2300      	movs	r3, #0
 8000316:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000318:	2300      	movs	r3, #0
 800031a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800031c:	2300      	movs	r3, #0
 800031e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000320:	2300      	movs	r3, #0
 8000322:	617b      	str	r3, [r7, #20]
  HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1);
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2200      	movs	r2, #0
 8000328:	4619      	mov	r1, r3
 800032a:	4803      	ldr	r0, [pc, #12]	; (8000338 <MX_TIM5_Init+0x64>)
 800032c:	f009 fd8c 	bl	8009e48 <HAL_TIM_OC_ConfigChannel>

}
 8000330:	bf00      	nop
 8000332:	3728      	adds	r7, #40	; 0x28
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	20000978 	.word	0x20000978
 800033c:	40000c00 	.word	0x40000c00

08000340 <TimeStamp_Init>:

void TimeStamp_Init(){
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
    MX_TIM5_Init();
 8000344:	f7ff ffc6 	bl	80002d4 <MX_TIM5_Init>
}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}

0800034c <TimeStamp_Reset>:

void TimeStamp_Reset(){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim5);
 8000350:	4804      	ldr	r0, [pc, #16]	; (8000364 <TimeStamp_Reset+0x18>)
 8000352:	f009 fd33 	bl	8009dbc <HAL_TIM_Base_Start>
    htim5.Instance->CNT=0;
 8000356:	4b03      	ldr	r3, [pc, #12]	; (8000364 <TimeStamp_Reset+0x18>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	2200      	movs	r2, #0
 800035c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000978 	.word	0x20000978

08000368 <TimeStamp_Get>:

uint32_t TimeStamp_Get(){
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
    return htim5.Instance->CNT;
 800036c:	4b03      	ldr	r3, [pc, #12]	; (800037c <TimeStamp_Get+0x14>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000372:	4618      	mov	r0, r3
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr
 800037c:	20000978 	.word	0x20000978

08000380 <BSP_GetPushButton>:
#endif

#define BSP_BP_PORT GPIOC
#define BSP_BP_PIN  GPIO_PIN_13

int BSP_GetPushButton(void){
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
    GPIO_PinState state ;
    state = HAL_GPIO_ReadPin(BSP_BP_PORT, BSP_BP_PIN);
 8000386:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800038a:	4805      	ldr	r0, [pc, #20]	; (80003a0 <BSP_GetPushButton+0x20>)
 800038c:	f008 f9b4 	bl	80086f8 <HAL_GPIO_ReadPin>
 8000390:	4603      	mov	r3, r0
 8000392:	71fb      	strb	r3, [r7, #7]
    return state;
 8000394:	79fb      	ldrb	r3, [r7, #7]
}
 8000396:	4618      	mov	r0, r3
 8000398:	3708      	adds	r7, #8
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	40020800 	.word	0x40020800

080003a4 <PusbButton_WaitUnPress>:
 * As soon as time is elapsed -rb- is displayed to let user know the mode
 * switch is taken into account
 *
 * @return True if button remains pressed more than specified time
 */
int PusbButton_WaitUnPress(void){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
    uint32_t TimeStarted;
    TimeStarted = HAL_GetTick();
 80003aa:	f007 fb39 	bl	8007a20 <HAL_GetTick>
 80003ae:	6078      	str	r0, [r7, #4]
    while( !BSP_GetPushButton() ){ ; /* debounce */
 80003b0:	e00a      	b.n	80003c8 <PusbButton_WaitUnPress+0x24>
        if(HAL_GetTick()- TimeStarted> PressBPSwicthTime){
 80003b2:	f007 fb35 	bl	8007a20 <HAL_GetTick>
 80003b6:	4602      	mov	r2, r0
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	1ad3      	subs	r3, r2, r3
 80003bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80003c0:	d902      	bls.n	80003c8 <PusbButton_WaitUnPress+0x24>
            XNUCLEO53L0A1_SetDisplayString (" rb ");
 80003c2:	480b      	ldr	r0, [pc, #44]	; (80003f0 <PusbButton_WaitUnPress+0x4c>)
 80003c4:	f001 f894 	bl	80014f0 <XNUCLEO53L0A1_SetDisplayString>
    while( !BSP_GetPushButton() ){ ; /* debounce */
 80003c8:	f7ff ffda 	bl	8000380 <BSP_GetPushButton>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d0ef      	beq.n	80003b2 <PusbButton_WaitUnPress+0xe>
        }
    }
    return  HAL_GetTick() - TimeStarted>PressBPSwicthTime;
 80003d2:	f007 fb25 	bl	8007a20 <HAL_GetTick>
 80003d6:	4602      	mov	r2, r0
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	1ad3      	subs	r3, r2, r3
 80003dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80003e0:	bf8c      	ite	hi
 80003e2:	2301      	movhi	r3, #1
 80003e4:	2300      	movls	r3, #0
 80003e6:	b2db      	uxtb	r3, r3

}
 80003e8:	4618      	mov	r0, r3
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	0800b88c 	.word	0x0800b88c

080003f4 <HandleError>:
 * Handle Error
 *
 * Set err on display and loop forever
 * @param err Error case code
 */
void HandleError(int err){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b086      	sub	sp, #24
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
    char msg[16];
    sprintf(msg,"Er%d", err);
 80003fc:	f107 0308 	add.w	r3, r7, #8
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	4905      	ldr	r1, [pc, #20]	; (8000418 <HandleError+0x24>)
 8000404:	4618      	mov	r0, r3
 8000406:	f00a fdb7 	bl	800af78 <siprintf>
    XNUCLEO53L0A1_SetDisplayString(msg);
 800040a:	f107 0308 	add.w	r3, r7, #8
 800040e:	4618      	mov	r0, r3
 8000410:	f001 f86e 	bl	80014f0 <XNUCLEO53L0A1_SetDisplayString>
    while(1){};
 8000414:	e7fe      	b.n	8000414 <HandleError+0x20>
 8000416:	bf00      	nop
 8000418:	0800b894 	.word	0x0800b894

0800041c <DetectSensors>:
 * Reset all sensor then do presence detection
 *
 * All present devices are data initiated and assigned to their final I2C address
 * @return
 */
int DetectSensors(int SetDisplay) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b088      	sub	sp, #32
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
    int i;
    uint16_t Id;
    int status;
    int FinalAddress;

    char PresentMsg[5]="    ";
 8000424:	4a7e      	ldr	r2, [pc, #504]	; (8000620 <DetectSensors+0x204>)
 8000426:	f107 0308 	add.w	r3, r7, #8
 800042a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800042e:	6018      	str	r0, [r3, #0]
 8000430:	3304      	adds	r3, #4
 8000432:	7019      	strb	r1, [r3, #0]
    /* Reset all */
    nDevPresent = 0;
 8000434:	4b7b      	ldr	r3, [pc, #492]	; (8000624 <DetectSensors+0x208>)
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 3; i++)
 800043a:	2300      	movs	r3, #0
 800043c:	61fb      	str	r3, [r7, #28]
 800043e:	e007      	b.n	8000450 <DetectSensors+0x34>
        status = XNUCLEO53L0A1_ResetId(i, 0);
 8000440:	2100      	movs	r1, #0
 8000442:	69f8      	ldr	r0, [r7, #28]
 8000444:	f000 ff42 	bl	80012cc <XNUCLEO53L0A1_ResetId>
 8000448:	61b8      	str	r0, [r7, #24]
    for (i = 0; i < 3; i++)
 800044a:	69fb      	ldr	r3, [r7, #28]
 800044c:	3301      	adds	r3, #1
 800044e:	61fb      	str	r3, [r7, #28]
 8000450:	69fb      	ldr	r3, [r7, #28]
 8000452:	2b02      	cmp	r3, #2
 8000454:	ddf4      	ble.n	8000440 <DetectSensors+0x24>

    /* detect all sensors (even on-board)*/
    for (i = 0; i < 3; i++) {
 8000456:	2300      	movs	r3, #0
 8000458:	61fb      	str	r3, [r7, #28]
 800045a:	e0a3      	b.n	80005a4 <DetectSensors+0x188>
        VL53L0X_Dev_t *pDev;
        pDev = &VL53L0XDevs[i];
 800045c:	69fb      	ldr	r3, [r7, #28]
 800045e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000462:	fb02 f303 	mul.w	r3, r2, r3
 8000466:	4a70      	ldr	r2, [pc, #448]	; (8000628 <DetectSensors+0x20c>)
 8000468:	4413      	add	r3, r2
 800046a:	617b      	str	r3, [r7, #20]
        pDev->I2cDevAddr = 0x52;
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	2252      	movs	r2, #82	; 0x52
 8000470:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
        pDev->Present = 0;
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	2200      	movs	r2, #0
 8000478:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
        status = XNUCLEO53L0A1_ResetId( pDev->Id, 1);
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8000482:	2101      	movs	r1, #1
 8000484:	4618      	mov	r0, r3
 8000486:	f000 ff21 	bl	80012cc <XNUCLEO53L0A1_ResetId>
 800048a:	61b8      	str	r0, [r7, #24]
        HAL_Delay(2);
 800048c:	2002      	movs	r0, #2
 800048e:	f007 fad3 	bl	8007a38 <HAL_Delay>
        FinalAddress=0x52+(i+1)*2;
 8000492:	69fb      	ldr	r3, [r7, #28]
 8000494:	332a      	adds	r3, #42	; 0x2a
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	613b      	str	r3, [r7, #16]

        do {
        	/* Set I2C standard mode (400 KHz) before doing the first register access */
        	if (status == VL53L0X_ERROR_NONE)
 800049a:	69bb      	ldr	r3, [r7, #24]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d106      	bne.n	80004ae <DetectSensors+0x92>
        		status = VL53L0X_WrByte(pDev, 0x88, 0x00);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2188      	movs	r1, #136	; 0x88
 80004a4:	6978      	ldr	r0, [r7, #20]
 80004a6:	f001 fa9d 	bl	80019e4 <VL53L0X_WrByte>
 80004aa:	4603      	mov	r3, r0
 80004ac:	61bb      	str	r3, [r7, #24]

        	/* Try to read one register using default 0x52 address */
            status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 80004ae:	f107 030e 	add.w	r3, r7, #14
 80004b2:	461a      	mov	r2, r3
 80004b4:	21c0      	movs	r1, #192	; 0xc0
 80004b6:	6978      	ldr	r0, [r7, #20]
 80004b8:	f001 fb40 	bl	8001b3c <VL53L0X_RdWord>
 80004bc:	4603      	mov	r3, r0
 80004be:	61bb      	str	r3, [r7, #24]
            if (status) {
 80004c0:	69bb      	ldr	r3, [r7, #24]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d004      	beq.n	80004d0 <DetectSensors+0xb4>
                debug_printf("#%d Read id fail\n", i);
 80004c6:	69f9      	ldr	r1, [r7, #28]
 80004c8:	4858      	ldr	r0, [pc, #352]	; (800062c <DetectSensors+0x210>)
 80004ca:	f001 f8c5 	bl	8001658 <uart_printf>
                break;
 80004ce:	e05f      	b.n	8000590 <DetectSensors+0x174>
            }
            if (Id == 0xEEAA) {
 80004d0:	89fb      	ldrh	r3, [r7, #14]
 80004d2:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d152      	bne.n	8000580 <DetectSensors+0x164>
				/* Sensor is found => Change its I2C address to final one */
                status = VL53L0X_SetDeviceAddress(pDev,FinalAddress);
 80004da:	693b      	ldr	r3, [r7, #16]
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	4619      	mov	r1, r3
 80004e0:	6978      	ldr	r0, [r7, #20]
 80004e2:	f001 fbed 	bl	8001cc0 <VL53L0X_SetDeviceAddress>
 80004e6:	4603      	mov	r3, r0
 80004e8:	61bb      	str	r3, [r7, #24]
                if (status != 0) {
 80004ea:	69bb      	ldr	r3, [r7, #24]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d004      	beq.n	80004fa <DetectSensors+0xde>
                    debug_printf("#i VL53L0X_SetDeviceAddress fail\n", i);
 80004f0:	69f9      	ldr	r1, [r7, #28]
 80004f2:	484f      	ldr	r0, [pc, #316]	; (8000630 <DetectSensors+0x214>)
 80004f4:	f001 f8b0 	bl	8001658 <uart_printf>
                    break;
 80004f8:	e04a      	b.n	8000590 <DetectSensors+0x174>
                }
                pDev->I2cDevAddr = FinalAddress;
 80004fa:	693b      	ldr	r3, [r7, #16]
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
                /* Check all is OK with the new I2C address and initialize the sensor */
                status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 8000504:	f107 030e 	add.w	r3, r7, #14
 8000508:	461a      	mov	r2, r3
 800050a:	21c0      	movs	r1, #192	; 0xc0
 800050c:	6978      	ldr	r0, [r7, #20]
 800050e:	f001 fb15 	bl	8001b3c <VL53L0X_RdWord>
 8000512:	4603      	mov	r3, r0
 8000514:	61bb      	str	r3, [r7, #24]
                if (status != 0) {
 8000516:	69bb      	ldr	r3, [r7, #24]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d004      	beq.n	8000526 <DetectSensors+0x10a>
					debug_printf("#i VL53L0X_RdWord fail\n", i);
 800051c:	69f9      	ldr	r1, [r7, #28]
 800051e:	4845      	ldr	r0, [pc, #276]	; (8000634 <DetectSensors+0x218>)
 8000520:	f001 f89a 	bl	8001658 <uart_printf>
					break;
 8000524:	e034      	b.n	8000590 <DetectSensors+0x174>
				}

                status = VL53L0X_DataInit(pDev);
 8000526:	6978      	ldr	r0, [r7, #20]
 8000528:	f001 fc0e 	bl	8001d48 <VL53L0X_DataInit>
 800052c:	4603      	mov	r3, r0
 800052e:	61bb      	str	r3, [r7, #24]
                if( status == 0 ){
 8000530:	69bb      	ldr	r3, [r7, #24]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d11f      	bne.n	8000576 <DetectSensors+0x15a>
                    pDev->Present = 1;
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	2201      	movs	r2, #1
 800053a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
                }
                else{
                    debug_printf("VL53L0X_DataInit %d fail\n", i);
                    break;
                }
                trace_printf("VL53L0X %d Present and initiated to final 0x%x\n", pDev->Id, pDev->I2cDevAddr);
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800054a:	461a      	mov	r2, r3
 800054c:	483a      	ldr	r0, [pc, #232]	; (8000638 <DetectSensors+0x21c>)
 800054e:	f001 f883 	bl	8001658 <uart_printf>
                nDevPresent++;
 8000552:	4b34      	ldr	r3, [pc, #208]	; (8000624 <DetectSensors+0x208>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	3301      	adds	r3, #1
 8000558:	4a32      	ldr	r2, [pc, #200]	; (8000624 <DetectSensors+0x208>)
 800055a:	6013      	str	r3, [r2, #0]
                nDevMask |= 1 << i;
 800055c:	2201      	movs	r2, #1
 800055e:	69fb      	ldr	r3, [r7, #28]
 8000560:	409a      	lsls	r2, r3
 8000562:	4b36      	ldr	r3, [pc, #216]	; (800063c <DetectSensors+0x220>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4313      	orrs	r3, r2
 8000568:	4a34      	ldr	r2, [pc, #208]	; (800063c <DetectSensors+0x220>)
 800056a:	6013      	str	r3, [r2, #0]
                pDev->Present = 1;
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	2201      	movs	r2, #1
 8000570:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8000574:	e00c      	b.n	8000590 <DetectSensors+0x174>
                    debug_printf("VL53L0X_DataInit %d fail\n", i);
 8000576:	69f9      	ldr	r1, [r7, #28]
 8000578:	4831      	ldr	r0, [pc, #196]	; (8000640 <DetectSensors+0x224>)
 800057a:	f001 f86d 	bl	8001658 <uart_printf>
                    break;
 800057e:	e007      	b.n	8000590 <DetectSensors+0x174>
            }
            else {
                debug_printf("#%d unknown ID %x\n", i, Id);
 8000580:	89fb      	ldrh	r3, [r7, #14]
 8000582:	461a      	mov	r2, r3
 8000584:	69f9      	ldr	r1, [r7, #28]
 8000586:	482f      	ldr	r0, [pc, #188]	; (8000644 <DetectSensors+0x228>)
 8000588:	f001 f866 	bl	8001658 <uart_printf>
                status = 1;
 800058c:	2301      	movs	r3, #1
 800058e:	61bb      	str	r3, [r7, #24]
            }
        } while (0);
        /* if fail r can't use for any reason then put the  device back to reset */
        if (status) {
 8000590:	69bb      	ldr	r3, [r7, #24]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d003      	beq.n	800059e <DetectSensors+0x182>
            XNUCLEO53L0A1_ResetId(i, 0);
 8000596:	2100      	movs	r1, #0
 8000598:	69f8      	ldr	r0, [r7, #28]
 800059a:	f000 fe97 	bl	80012cc <XNUCLEO53L0A1_ResetId>
    for (i = 0; i < 3; i++) {
 800059e:	69fb      	ldr	r3, [r7, #28]
 80005a0:	3301      	adds	r3, #1
 80005a2:	61fb      	str	r3, [r7, #28]
 80005a4:	69fb      	ldr	r3, [r7, #28]
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	f77f af58 	ble.w	800045c <DetectSensors+0x40>
        }
    }
    /* Display detected sensor(s) */
    if( SetDisplay ){
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d030      	beq.n	8000614 <DetectSensors+0x1f8>
        for(i=0; i<3; i++){
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]
 80005b6:	e01f      	b.n	80005f8 <DetectSensors+0x1dc>
            if( VL53L0XDevs[i].Present ){
 80005b8:	4a1b      	ldr	r2, [pc, #108]	; (8000628 <DetectSensors+0x20c>)
 80005ba:	69fb      	ldr	r3, [r7, #28]
 80005bc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80005c0:	fb01 f303 	mul.w	r3, r1, r3
 80005c4:	4413      	add	r3, r2
 80005c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d010      	beq.n	80005f2 <DetectSensors+0x1d6>
                PresentMsg[i+1]=VL53L0XDevs[i].DevLetter;
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	3301      	adds	r3, #1
 80005d4:	4914      	ldr	r1, [pc, #80]	; (8000628 <DetectSensors+0x20c>)
 80005d6:	69fa      	ldr	r2, [r7, #28]
 80005d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80005dc:	fb00 f202 	mul.w	r2, r0, r2
 80005e0:	440a      	add	r2, r1
 80005e2:	f202 1261 	addw	r2, r2, #353	; 0x161
 80005e6:	7812      	ldrb	r2, [r2, #0]
 80005e8:	f107 0120 	add.w	r1, r7, #32
 80005ec:	440b      	add	r3, r1
 80005ee:	f803 2c18 	strb.w	r2, [r3, #-24]
        for(i=0; i<3; i++){
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	3301      	adds	r3, #1
 80005f6:	61fb      	str	r3, [r7, #28]
 80005f8:	69fb      	ldr	r3, [r7, #28]
 80005fa:	2b02      	cmp	r3, #2
 80005fc:	dddc      	ble.n	80005b8 <DetectSensors+0x19c>
            }
        }
        PresentMsg[0]=' ';
 80005fe:	2320      	movs	r3, #32
 8000600:	723b      	strb	r3, [r7, #8]
        XNUCLEO53L0A1_SetDisplayString(PresentMsg);
 8000602:	f107 0308 	add.w	r3, r7, #8
 8000606:	4618      	mov	r0, r3
 8000608:	f000 ff72 	bl	80014f0 <XNUCLEO53L0A1_SetDisplayString>
        HAL_Delay(1000);
 800060c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000610:	f007 fa12 	bl	8007a38 <HAL_Delay>
    }

    return nDevPresent;
 8000614:	4b03      	ldr	r3, [pc, #12]	; (8000624 <DetectSensors+0x208>)
 8000616:	681b      	ldr	r3, [r3, #0]
}
 8000618:	4618      	mov	r0, r3
 800061a:	3720      	adds	r7, #32
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	0800b94c 	.word	0x0800b94c
 8000624:	20000850 	.word	0x20000850
 8000628:	20000018 	.word	0x20000018
 800062c:	0800b89c 	.word	0x0800b89c
 8000630:	0800b8b0 	.word	0x0800b8b0
 8000634:	0800b8d4 	.word	0x0800b8d4
 8000638:	0800b908 	.word	0x0800b908
 800063c:	20000974 	.word	0x20000974
 8000640:	0800b8ec 	.word	0x0800b8ec
 8000644:	0800b938 	.word	0x0800b938

08000648 <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(RangingConfig_e rangingConfig){
 8000648:	b580      	push	{r7, lr}
 800064a:	b08c      	sub	sp, #48	; 0x30
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
    int status;
    uint8_t VhvSettings;
    uint8_t PhaseCal;
    uint32_t refSpadCount;
	uint8_t isApertureSpads;
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 8000652:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000656:	62bb      	str	r3, [r7, #40]	; 0x28
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 8000658:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t timingBudget = 33000;
 800065e:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8000662:	623b      	str	r3, [r7, #32]
	uint8_t preRangeVcselPeriod = 14;
 8000664:	230e      	movs	r3, #14
 8000666:	77fb      	strb	r3, [r7, #31]
	uint8_t finalRangeVcselPeriod = 10;
 8000668:	230a      	movs	r3, #10
 800066a:	77bb      	strb	r3, [r7, #30]

    for( i=0; i<3; i++){
 800066c:	2300      	movs	r3, #0
 800066e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000670:	e143      	b.n	80008fa <SetupSingleShot+0x2b2>
        if( VL53L0XDevs[i].Present){
 8000672:	4aa6      	ldr	r2, [pc, #664]	; (800090c <SetupSingleShot+0x2c4>)
 8000674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000676:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800067a:	fb01 f303 	mul.w	r3, r1, r3
 800067e:	4413      	add	r3, r2
 8000680:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	f000 8134 	beq.w	80008f4 <SetupSingleShot+0x2ac>
            status=VL53L0X_StaticInit(&VL53L0XDevs[i]);
 800068c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800068e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000692:	fb02 f303 	mul.w	r3, r2, r3
 8000696:	4a9d      	ldr	r2, [pc, #628]	; (800090c <SetupSingleShot+0x2c4>)
 8000698:	4413      	add	r3, r2
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fce2 	bl	8002064 <VL53L0X_StaticInit>
 80006a0:	4603      	mov	r3, r0
 80006a2:	61bb      	str	r3, [r7, #24]
            if( status ){
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d003      	beq.n	80006b2 <SetupSingleShot+0x6a>
                debug_printf("VL53L0X_StaticInit %d failed\n",i);
 80006aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80006ac:	4898      	ldr	r0, [pc, #608]	; (8000910 <SetupSingleShot+0x2c8>)
 80006ae:	f000 ffd3 	bl	8001658 <uart_printf>
            }

            status = VL53L0X_PerformRefCalibration(&VL53L0XDevs[i], &VhvSettings, &PhaseCal);
 80006b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006b4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80006b8:	fb02 f303 	mul.w	r3, r2, r3
 80006bc:	4a93      	ldr	r2, [pc, #588]	; (800090c <SetupSingleShot+0x2c4>)
 80006be:	4413      	add	r3, r2
 80006c0:	f107 0216 	add.w	r2, r7, #22
 80006c4:	f107 0117 	add.w	r1, r7, #23
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 fee1 	bl	8003490 <VL53L0X_PerformRefCalibration>
 80006ce:	4603      	mov	r3, r0
 80006d0:	61bb      	str	r3, [r7, #24]
			if( status ){
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d002      	beq.n	80006de <SetupSingleShot+0x96>
			   debug_printf("VL53L0X_PerformRefCalibration failed\n");
 80006d8:	488e      	ldr	r0, [pc, #568]	; (8000914 <SetupSingleShot+0x2cc>)
 80006da:	f000 ffbd 	bl	8001658 <uart_printf>
			}

			status = VL53L0X_PerformRefSpadManagement(&VL53L0XDevs[i], &refSpadCount, &isApertureSpads);
 80006de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80006e4:	fb02 f303 	mul.w	r3, r2, r3
 80006e8:	4a88      	ldr	r2, [pc, #544]	; (800090c <SetupSingleShot+0x2c4>)
 80006ea:	4413      	add	r3, r2
 80006ec:	f107 020f 	add.w	r2, r7, #15
 80006f0:	f107 0110 	add.w	r1, r7, #16
 80006f4:	4618      	mov	r0, r3
 80006f6:	f003 fce7 	bl	80040c8 <VL53L0X_PerformRefSpadManagement>
 80006fa:	4603      	mov	r3, r0
 80006fc:	61bb      	str	r3, [r7, #24]
			if( status ){
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d002      	beq.n	800070a <SetupSingleShot+0xc2>
			   debug_printf("VL53L0X_PerformRefSpadManagement failed\n");
 8000704:	4884      	ldr	r0, [pc, #528]	; (8000918 <SetupSingleShot+0x2d0>)
 8000706:	f000 ffa7 	bl	8001658 <uart_printf>
			}

            status = VL53L0X_SetDeviceMode(&VL53L0XDevs[i], VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 800070a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800070c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000710:	fb02 f303 	mul.w	r3, r2, r3
 8000714:	4a7d      	ldr	r2, [pc, #500]	; (800090c <SetupSingleShot+0x2c4>)
 8000716:	4413      	add	r3, r2
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f001 ff0a 	bl	8002534 <VL53L0X_SetDeviceMode>
 8000720:	4603      	mov	r3, r0
 8000722:	61bb      	str	r3, [r7, #24]
            if( status ){
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d002      	beq.n	8000730 <SetupSingleShot+0xe8>
               debug_printf("VL53L0X_SetDeviceMode failed\n");
 800072a:	487c      	ldr	r0, [pc, #496]	; (800091c <SetupSingleShot+0x2d4>)
 800072c:	f000 ff94 	bl	8001658 <uart_printf>
            }

            status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs[i], VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
 8000730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000732:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000736:	fb02 f303 	mul.w	r3, r2, r3
 800073a:	4a74      	ldr	r2, [pc, #464]	; (800090c <SetupSingleShot+0x2c4>)
 800073c:	4413      	add	r3, r2
 800073e:	2201      	movs	r2, #1
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f002 fb9e 	bl	8002e84 <VL53L0X_SetLimitCheckEnable>
 8000748:	4603      	mov	r3, r0
 800074a:	61bb      	str	r3, [r7, #24]
			if( status ){
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d002      	beq.n	8000758 <SetupSingleShot+0x110>
			   debug_printf("VL53L0X_SetLimitCheckEnable failed\n");
 8000752:	4873      	ldr	r0, [pc, #460]	; (8000920 <SetupSingleShot+0x2d8>)
 8000754:	f000 ff80 	bl	8001658 <uart_printf>
			}

			status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs[i], VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
 8000758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800075a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800075e:	fb02 f303 	mul.w	r3, r2, r3
 8000762:	4a6a      	ldr	r2, [pc, #424]	; (800090c <SetupSingleShot+0x2c4>)
 8000764:	4413      	add	r3, r2
 8000766:	2201      	movs	r2, #1
 8000768:	2101      	movs	r1, #1
 800076a:	4618      	mov	r0, r3
 800076c:	f002 fb8a 	bl	8002e84 <VL53L0X_SetLimitCheckEnable>
 8000770:	4603      	mov	r3, r0
 8000772:	61bb      	str	r3, [r7, #24]
			if( status ){
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d002      	beq.n	8000780 <SetupSingleShot+0x138>
			   debug_printf("VL53L0X_SetLimitCheckEnable failed\n");
 800077a:	4869      	ldr	r0, [pc, #420]	; (8000920 <SetupSingleShot+0x2d8>)
 800077c:	f000 ff6c 	bl	8001658 <uart_printf>
			}
			/* Ranging configuration */
            switch(rangingConfig) {
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2b02      	cmp	r3, #2
 8000784:	d014      	beq.n	80007b0 <SetupSingleShot+0x168>
 8000786:	2b02      	cmp	r3, #2
 8000788:	dc2d      	bgt.n	80007e6 <SetupSingleShot+0x19e>
 800078a:	2b00      	cmp	r3, #0
 800078c:	d002      	beq.n	8000794 <SetupSingleShot+0x14c>
 800078e:	2b01      	cmp	r3, #1
 8000790:	d01b      	beq.n	80007ca <SetupSingleShot+0x182>
 8000792:	e028      	b.n	80007e6 <SetupSingleShot+0x19e>
            case LONG_RANGE:
            	signalLimit = (FixPoint1616_t)(0.1*65536);
 8000794:	f641 1399 	movw	r3, #6553	; 0x1999
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
            	sigmaLimit = (FixPoint1616_t)(60*65536);
 800079a:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
            	timingBudget = 33000;
 80007a0:	f248 03e8 	movw	r3, #33000	; 0x80e8
 80007a4:	623b      	str	r3, [r7, #32]
            	preRangeVcselPeriod = 18;
 80007a6:	2312      	movs	r3, #18
 80007a8:	77fb      	strb	r3, [r7, #31]
            	finalRangeVcselPeriod = 14;
 80007aa:	230e      	movs	r3, #14
 80007ac:	77bb      	strb	r3, [r7, #30]
            	break;
 80007ae:	e01d      	b.n	80007ec <SetupSingleShot+0x1a4>
            case HIGH_ACCURACY:
				signalLimit = (FixPoint1616_t)(0.25*65536);
 80007b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007b4:	62bb      	str	r3, [r7, #40]	; 0x28
				sigmaLimit = (FixPoint1616_t)(18*65536);
 80007b6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
				timingBudget = 200000;
 80007bc:	4b59      	ldr	r3, [pc, #356]	; (8000924 <SetupSingleShot+0x2dc>)
 80007be:	623b      	str	r3, [r7, #32]
				preRangeVcselPeriod = 14;
 80007c0:	230e      	movs	r3, #14
 80007c2:	77fb      	strb	r3, [r7, #31]
				finalRangeVcselPeriod = 10;
 80007c4:	230a      	movs	r3, #10
 80007c6:	77bb      	strb	r3, [r7, #30]
				break;
 80007c8:	e010      	b.n	80007ec <SetupSingleShot+0x1a4>
            case HIGH_SPEED:
				signalLimit = (FixPoint1616_t)(0.25*65536);
 80007ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
				sigmaLimit = (FixPoint1616_t)(32*65536);
 80007d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
				timingBudget = 20000;
 80007d6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80007da:	623b      	str	r3, [r7, #32]
				preRangeVcselPeriod = 14;
 80007dc:	230e      	movs	r3, #14
 80007de:	77fb      	strb	r3, [r7, #31]
				finalRangeVcselPeriod = 10;
 80007e0:	230a      	movs	r3, #10
 80007e2:	77bb      	strb	r3, [r7, #30]
				break;
 80007e4:	e002      	b.n	80007ec <SetupSingleShot+0x1a4>
            default:
            	debug_printf("Not Supported");
 80007e6:	4850      	ldr	r0, [pc, #320]	; (8000928 <SetupSingleShot+0x2e0>)
 80007e8:	f000 ff36 	bl	8001658 <uart_printf>
            }

            status = VL53L0X_SetLimitCheckValue(&VL53L0XDevs[i],  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 80007ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80007f2:	fb02 f303 	mul.w	r3, r2, r3
 80007f6:	4a45      	ldr	r2, [pc, #276]	; (800090c <SetupSingleShot+0x2c4>)
 80007f8:	4413      	add	r3, r2
 80007fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007fc:	2101      	movs	r1, #1
 80007fe:	4618      	mov	r0, r3
 8000800:	f002 fc44 	bl	800308c <VL53L0X_SetLimitCheckValue>
 8000804:	4603      	mov	r3, r0
 8000806:	61bb      	str	r3, [r7, #24]
			if( status ){
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d002      	beq.n	8000814 <SetupSingleShot+0x1cc>
			   debug_printf("VL53L0X_SetLimitCheckValue failed\n");
 800080e:	4847      	ldr	r0, [pc, #284]	; (800092c <SetupSingleShot+0x2e4>)
 8000810:	f000 ff22 	bl	8001658 <uart_printf>
			}

			status = VL53L0X_SetLimitCheckValue(&VL53L0XDevs[i],  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 8000814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000816:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800081a:	fb02 f303 	mul.w	r3, r2, r3
 800081e:	4a3b      	ldr	r2, [pc, #236]	; (800090c <SetupSingleShot+0x2c4>)
 8000820:	4413      	add	r3, r2
 8000822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f002 fc30 	bl	800308c <VL53L0X_SetLimitCheckValue>
 800082c:	4603      	mov	r3, r0
 800082e:	61bb      	str	r3, [r7, #24]
			if( status ){
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d002      	beq.n	800083c <SetupSingleShot+0x1f4>
			   debug_printf("VL53L0X_SetLimitCheckValue failed\n");
 8000836:	483d      	ldr	r0, [pc, #244]	; (800092c <SetupSingleShot+0x2e4>)
 8000838:	f000 ff0e 	bl	8001658 <uart_printf>
			}

            status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&VL53L0XDevs[i],  timingBudget);
 800083c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800083e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000842:	fb02 f303 	mul.w	r3, r2, r3
 8000846:	4a31      	ldr	r2, [pc, #196]	; (800090c <SetupSingleShot+0x2c4>)
 8000848:	4413      	add	r3, r2
 800084a:	6a39      	ldr	r1, [r7, #32]
 800084c:	4618      	mov	r0, r3
 800084e:	f001 ff4d 	bl	80026ec <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8000852:	4603      	mov	r3, r0
 8000854:	61bb      	str	r3, [r7, #24]
            if( status ){
 8000856:	69bb      	ldr	r3, [r7, #24]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d002      	beq.n	8000862 <SetupSingleShot+0x21a>
               debug_printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 800085c:	4834      	ldr	r0, [pc, #208]	; (8000930 <SetupSingleShot+0x2e8>)
 800085e:	f000 fefb 	bl	8001658 <uart_printf>
            }

            status = VL53L0X_SetVcselPulsePeriod(&VL53L0XDevs[i],  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 8000862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000864:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000868:	fb02 f303 	mul.w	r3, r2, r3
 800086c:	4a27      	ldr	r2, [pc, #156]	; (800090c <SetupSingleShot+0x2c4>)
 800086e:	4413      	add	r3, r2
 8000870:	7ffa      	ldrb	r2, [r7, #31]
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f001 ffb5 	bl	80027e4 <VL53L0X_SetVcselPulsePeriod>
 800087a:	4603      	mov	r3, r0
 800087c:	61bb      	str	r3, [r7, #24]
			if( status ){
 800087e:	69bb      	ldr	r3, [r7, #24]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d002      	beq.n	800088a <SetupSingleShot+0x242>
			   debug_printf("VL53L0X_SetVcselPulsePeriod failed\n");
 8000884:	482b      	ldr	r0, [pc, #172]	; (8000934 <SetupSingleShot+0x2ec>)
 8000886:	f000 fee7 	bl	8001658 <uart_printf>
			}

            status = VL53L0X_SetVcselPulsePeriod(&VL53L0XDevs[i],  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 800088a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000890:	fb02 f303 	mul.w	r3, r2, r3
 8000894:	4a1d      	ldr	r2, [pc, #116]	; (800090c <SetupSingleShot+0x2c4>)
 8000896:	4413      	add	r3, r2
 8000898:	7fba      	ldrb	r2, [r7, #30]
 800089a:	2101      	movs	r1, #1
 800089c:	4618      	mov	r0, r3
 800089e:	f001 ffa1 	bl	80027e4 <VL53L0X_SetVcselPulsePeriod>
 80008a2:	4603      	mov	r3, r0
 80008a4:	61bb      	str	r3, [r7, #24]
			if( status ){
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d002      	beq.n	80008b2 <SetupSingleShot+0x26a>
			   debug_printf("VL53L0X_SetVcselPulsePeriod failed\n");
 80008ac:	4821      	ldr	r0, [pc, #132]	; (8000934 <SetupSingleShot+0x2ec>)
 80008ae:	f000 fed3 	bl	8001658 <uart_printf>
			}

			status = VL53L0X_PerformRefCalibration(&VL53L0XDevs[i], &VhvSettings, &PhaseCal);
 80008b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80008b8:	fb02 f303 	mul.w	r3, r2, r3
 80008bc:	4a13      	ldr	r2, [pc, #76]	; (800090c <SetupSingleShot+0x2c4>)
 80008be:	4413      	add	r3, r2
 80008c0:	f107 0216 	add.w	r2, r7, #22
 80008c4:	f107 0117 	add.w	r1, r7, #23
 80008c8:	4618      	mov	r0, r3
 80008ca:	f002 fde1 	bl	8003490 <VL53L0X_PerformRefCalibration>
 80008ce:	4603      	mov	r3, r0
 80008d0:	61bb      	str	r3, [r7, #24]
			if( status ){
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d002      	beq.n	80008de <SetupSingleShot+0x296>
			   debug_printf("VL53L0X_PerformRefCalibration failed\n");
 80008d8:	480e      	ldr	r0, [pc, #56]	; (8000914 <SetupSingleShot+0x2cc>)
 80008da:	f000 febd 	bl	8001658 <uart_printf>
			}

            VL53L0XDevs[i].LeakyFirst=1;
 80008de:	4a0b      	ldr	r2, [pc, #44]	; (800090c <SetupSingleShot+0x2c4>)
 80008e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80008e6:	fb01 f303 	mul.w	r3, r1, r3
 80008ea:	4413      	add	r3, r2
 80008ec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80008f0:	2201      	movs	r2, #1
 80008f2:	601a      	str	r2, [r3, #0]
    for( i=0; i<3; i++){
 80008f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f6:	3301      	adds	r3, #1
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	f77f aeb8 	ble.w	8000672 <SetupSingleShot+0x2a>
        }
    }
}
 8000902:	bf00      	nop
 8000904:	bf00      	nop
 8000906:	3730      	adds	r7, #48	; 0x30
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000018 	.word	0x20000018
 8000910:	0800b954 	.word	0x0800b954
 8000914:	0800b974 	.word	0x0800b974
 8000918:	0800b99c 	.word	0x0800b99c
 800091c:	0800b9c8 	.word	0x0800b9c8
 8000920:	0800b9e8 	.word	0x0800b9e8
 8000924:	00030d40 	.word	0x00030d40
 8000928:	0800ba0c 	.word	0x0800ba0c
 800092c:	0800ba1c 	.word	0x0800ba1c
 8000930:	0800ba40 	.word	0x0800ba40
 8000934:	0800ba78 	.word	0x0800ba78

08000938 <RangeToLetter>:

char RangeToLetter(VL53L0X_Dev_t *pDev, VL53L0X_RangingMeasurementData_t *pRange){
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
    char c;
    if( pRange->RangeStatus == 0 ){
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	7e1b      	ldrb	r3, [r3, #24]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d116      	bne.n	8000978 <RangeToLetter+0x40>
        if( pDev->LeakyRange < RangeLow ){
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 8000950:	4b0e      	ldr	r3, [pc, #56]	; (800098c <RangeToLetter+0x54>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	429a      	cmp	r2, r3
 8000956:	da02      	bge.n	800095e <RangeToLetter+0x26>
            c='_';
 8000958:	235f      	movs	r3, #95	; 0x5f
 800095a:	73fb      	strb	r3, [r7, #15]
 800095c:	e00e      	b.n	800097c <RangeToLetter+0x44>
        }
        else if( pDev->LeakyRange < RangeMedium ){
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <RangeToLetter+0x58>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	429a      	cmp	r2, r3
 800096a:	da02      	bge.n	8000972 <RangeToLetter+0x3a>
                c='=';
 800096c:	233d      	movs	r3, #61	; 0x3d
 800096e:	73fb      	strb	r3, [r7, #15]
 8000970:	e004      	b.n	800097c <RangeToLetter+0x44>
        }
        else {
            c = '~';
 8000972:	237e      	movs	r3, #126	; 0x7e
 8000974:	73fb      	strb	r3, [r7, #15]
 8000976:	e001      	b.n	800097c <RangeToLetter+0x44>
        }

    }
    else{
        c='-';
 8000978:	232d      	movs	r3, #45	; 0x2d
 800097a:	73fb      	strb	r3, [r7, #15]
    }
    return c;
 800097c:	7bfb      	ldrb	r3, [r7, #15]
}
 800097e:	4618      	mov	r0, r3
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	200004c8 	.word	0x200004c8
 8000990:	200004cc 	.word	0x200004cc

08000994 <Sensor_SetNewRange>:

/* Store new ranging data into the device structure, apply leaky integrator if needed */
void Sensor_SetNewRange(VL53L0X_Dev_t *pDev, VL53L0X_RangingMeasurementData_t *pRange){
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
    if( pRange->RangeStatus == 0 ){
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	7e1b      	ldrb	r3, [r3, #24]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d124      	bne.n	80009f0 <Sensor_SetNewRange+0x5c>
        if( pDev->LeakyFirst ){
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d00a      	beq.n	80009c6 <Sensor_SetNewRange+0x32>
            pDev->LeakyFirst = 0;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2200      	movs	r2, #0
 80009b4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
            pDev->LeakyRange = pRange->RangeMilliMeter;
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	891b      	ldrh	r3, [r3, #8]
 80009bc:	461a      	mov	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        }
    }
    else{
        pDev->LeakyFirst = 1;
    }
}
 80009c4:	e018      	b.n	80009f8 <Sensor_SetNewRange+0x64>
            pDev->LeakyRange = (pDev->LeakyRange*LeakyFactorFix8 + (256-LeakyFactorFix8)*pRange->RangeMilliMeter)>>8;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80009cc:	4a0d      	ldr	r2, [pc, #52]	; (8000a04 <Sensor_SetNewRange+0x70>)
 80009ce:	6812      	ldr	r2, [r2, #0]
 80009d0:	fb02 f203 	mul.w	r2, r2, r3
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <Sensor_SetNewRange+0x70>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80009dc:	6839      	ldr	r1, [r7, #0]
 80009de:	8909      	ldrh	r1, [r1, #8]
 80009e0:	fb01 f303 	mul.w	r3, r1, r3
 80009e4:	4413      	add	r3, r2
 80009e6:	121a      	asrs	r2, r3, #8
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
}
 80009ee:	e003      	b.n	80009f8 <Sensor_SetNewRange+0x64>
        pDev->LeakyFirst = 1;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2201      	movs	r2, #1
 80009f4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	20000014 	.word	0x20000014

08000a08 <RangeDemo>:
 * Implement the ranging demo with all modes managed through the blue button (short and long press)
 * This function implements a while loop until the blue button is pressed
 * @param UseSensorsMask Mask of any sensors to use if not only one present
 * @param rangingConfig Ranging configuration to be used (same for all sensors)
 */
int RangeDemo(int UseSensorsMask, RangingConfig_e rangingConfig){
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b08d      	sub	sp, #52	; 0x34
 8000a0c:	af02      	add	r7, sp, #8
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	70fb      	strb	r3, [r7, #3]
    int over=0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61bb      	str	r3, [r7, #24]
    int status;
    char StrDisplay[5];
    char c;
    int i;
    int nSensorToUse;
    int SingleSensorNo=0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]

    /* Setup all sensors in Single Shot mode */
    SetupSingleShot(rangingConfig);
 8000a1c:	78fb      	ldrb	r3, [r7, #3]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fe12 	bl	8000648 <SetupSingleShot>

    /* Which sensor to use ? */
    for(i=0, nSensorToUse=0; i<3; i++){
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
 8000a2c:	e01e      	b.n	8000a6c <RangeDemo+0x64>
        if(( UseSensorsMask& (1<<i) ) && VL53L0XDevs[i].Present ){
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a32:	fa42 f303 	asr.w	r3, r2, r3
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d013      	beq.n	8000a66 <RangeDemo+0x5e>
 8000a3e:	4a8d      	ldr	r2, [pc, #564]	; (8000c74 <RangeDemo+0x26c>)
 8000a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a42:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000a46:	fb01 f303 	mul.w	r3, r1, r3
 8000a4a:	4413      	add	r3, r2
 8000a4c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d007      	beq.n	8000a66 <RangeDemo+0x5e>
            nSensorToUse++;
 8000a56:	6a3b      	ldr	r3, [r7, #32]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	623b      	str	r3, [r7, #32]
            if( nSensorToUse==1 )
 8000a5c:	6a3b      	ldr	r3, [r7, #32]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d101      	bne.n	8000a66 <RangeDemo+0x5e>
                SingleSensorNo=i;
 8000a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a64:	61fb      	str	r3, [r7, #28]
    for(i=0, nSensorToUse=0; i<3; i++){
 8000a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a68:	3301      	adds	r3, #1
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	dddd      	ble.n	8000a2e <RangeDemo+0x26>
        }
    }
    if( nSensorToUse == 0 ){
 8000a72:	6a3b      	ldr	r3, [r7, #32]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <RangeDemo+0x76>
        return -1;
 8000a78:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7c:	e0f5      	b.n	8000c6a <RangeDemo+0x262>
    }

    /* Start ranging until blue button is pressed */
    do{
        if( nSensorToUse >1 ){
 8000a7e:	6a3b      	ldr	r3, [r7, #32]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	dd76      	ble.n	8000b72 <RangeDemo+0x16a>
        	/* Multiple devices */
            strcpy(StrDisplay, "    ");
 8000a84:	4a7c      	ldr	r2, [pc, #496]	; (8000c78 <RangeDemo+0x270>)
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a8e:	6018      	str	r0, [r3, #0]
 8000a90:	3304      	adds	r3, #4
 8000a92:	7019      	strb	r1, [r3, #0]
            for( i=0; i<3; i++){
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
 8000a98:	e067      	b.n	8000b6a <RangeDemo+0x162>
                if( ! VL53L0XDevs[i].Present  || (UseSensorsMask & (1<<i))==0 )
 8000a9a:	4a76      	ldr	r2, [pc, #472]	; (8000c74 <RangeDemo+0x26c>)
 8000a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000aa2:	fb01 f303 	mul.w	r3, r1, r3
 8000aa6:	4413      	add	r3, r2
 8000aa8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d057      	beq.n	8000b62 <RangeDemo+0x15a>
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab6:	fa42 f303 	asr.w	r3, r2, r3
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d04f      	beq.n	8000b62 <RangeDemo+0x15a>
                    continue;
                /* Call All-In-One blocking API function */
                status = VL53L0X_PerformSingleRangingMeasurement(&VL53L0XDevs[i],&RangingMeasurementData);
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000ac8:	fb02 f303 	mul.w	r3, r2, r3
 8000acc:	4a69      	ldr	r2, [pc, #420]	; (8000c74 <RangeDemo+0x26c>)
 8000ace:	4413      	add	r3, r2
 8000ad0:	496a      	ldr	r1, [pc, #424]	; (8000c7c <RangeDemo+0x274>)
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f003 f82e 	bl	8003b34 <VL53L0X_PerformSingleRangingMeasurement>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	617b      	str	r3, [r7, #20]
                if( status ){
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d002      	beq.n	8000ae8 <RangeDemo+0xe0>
                    HandleError(ERR_DEMO_RANGE_MULTI);
 8000ae2:	2002      	movs	r0, #2
 8000ae4:	f7ff fc86 	bl	80003f4 <HandleError>
                }
                /* Push data logging to UART */
                trace_printf("%d,%u,%d,%d,%d\n", VL53L0XDevs[i].Id, TimeStamp_Get(), RangingMeasurementData.RangeStatus, RangingMeasurementData.RangeMilliMeter, RangingMeasurementData.SignalRateRtnMegaCps);
 8000ae8:	4a62      	ldr	r2, [pc, #392]	; (8000c74 <RangeDemo+0x26c>)
 8000aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aec:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000af0:	fb01 f303 	mul.w	r3, r1, r3
 8000af4:	4413      	add	r3, r2
 8000af6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8000afa:	681c      	ldr	r4, [r3, #0]
 8000afc:	f7ff fc34 	bl	8000368 <TimeStamp_Get>
 8000b00:	4602      	mov	r2, r0
 8000b02:	4b5e      	ldr	r3, [pc, #376]	; (8000c7c <RangeDemo+0x274>)
 8000b04:	7e1b      	ldrb	r3, [r3, #24]
 8000b06:	4618      	mov	r0, r3
 8000b08:	4b5c      	ldr	r3, [pc, #368]	; (8000c7c <RangeDemo+0x274>)
 8000b0a:	891b      	ldrh	r3, [r3, #8]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4b5b      	ldr	r3, [pc, #364]	; (8000c7c <RangeDemo+0x274>)
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	9301      	str	r3, [sp, #4]
 8000b14:	9100      	str	r1, [sp, #0]
 8000b16:	4603      	mov	r3, r0
 8000b18:	4621      	mov	r1, r4
 8000b1a:	4859      	ldr	r0, [pc, #356]	; (8000c80 <RangeDemo+0x278>)
 8000b1c:	f000 fd9c 	bl	8001658 <uart_printf>
                /* Store new ranging distance */
                Sensor_SetNewRange(&VL53L0XDevs[i],&RangingMeasurementData);
 8000b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b22:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000b26:	fb02 f303 	mul.w	r3, r2, r3
 8000b2a:	4a52      	ldr	r2, [pc, #328]	; (8000c74 <RangeDemo+0x26c>)
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4953      	ldr	r1, [pc, #332]	; (8000c7c <RangeDemo+0x274>)
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff2f 	bl	8000994 <Sensor_SetNewRange>
                /* Translate distance in bar graph (multiple device) */
                c = RangeToLetter(&VL53L0XDevs[i],&RangingMeasurementData);
 8000b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b38:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000b3c:	fb02 f303 	mul.w	r3, r2, r3
 8000b40:	4a4c      	ldr	r2, [pc, #304]	; (8000c74 <RangeDemo+0x26c>)
 8000b42:	4413      	add	r3, r2
 8000b44:	494d      	ldr	r1, [pc, #308]	; (8000c7c <RangeDemo+0x274>)
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fef6 	bl	8000938 <RangeToLetter>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	74fb      	strb	r3, [r7, #19]
                StrDisplay[i+1]=c;
 8000b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b52:	3301      	adds	r3, #1
 8000b54:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000b58:	4413      	add	r3, r2
 8000b5a:	7cfa      	ldrb	r2, [r7, #19]
 8000b5c:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8000b60:	e000      	b.n	8000b64 <RangeDemo+0x15c>
                    continue;
 8000b62:	bf00      	nop
            for( i=0; i<3; i++){
 8000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b66:	3301      	adds	r3, #1
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	dd94      	ble.n	8000a9a <RangeDemo+0x92>
 8000b70:	e066      	b.n	8000c40 <RangeDemo+0x238>
            }
        }
        else{
            /* only one sensor */
        	/* Call All-In-One blocking API function */
            status = VL53L0X_PerformSingleRangingMeasurement(&VL53L0XDevs[SingleSensorNo],&RangingMeasurementData);
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000b78:	fb02 f303 	mul.w	r3, r2, r3
 8000b7c:	4a3d      	ldr	r2, [pc, #244]	; (8000c74 <RangeDemo+0x26c>)
 8000b7e:	4413      	add	r3, r2
 8000b80:	493e      	ldr	r1, [pc, #248]	; (8000c7c <RangeDemo+0x274>)
 8000b82:	4618      	mov	r0, r3
 8000b84:	f002 ffd6 	bl	8003b34 <VL53L0X_PerformSingleRangingMeasurement>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	617b      	str	r3, [r7, #20]
            if( status ==0 ){
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d153      	bne.n	8000c3a <RangeDemo+0x232>
            	/* Push data logging to UART */
            	trace_printf("%d,%u,%d,%d,%d\n", VL53L0XDevs[SingleSensorNo].Id, TimeStamp_Get(), RangingMeasurementData.RangeStatus, RangingMeasurementData.RangeMilliMeter, RangingMeasurementData.SignalRateRtnMegaCps);
 8000b92:	4a38      	ldr	r2, [pc, #224]	; (8000c74 <RangeDemo+0x26c>)
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000b9a:	fb01 f303 	mul.w	r3, r1, r3
 8000b9e:	4413      	add	r3, r2
 8000ba0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8000ba4:	681c      	ldr	r4, [r3, #0]
 8000ba6:	f7ff fbdf 	bl	8000368 <TimeStamp_Get>
 8000baa:	4602      	mov	r2, r0
 8000bac:	4b33      	ldr	r3, [pc, #204]	; (8000c7c <RangeDemo+0x274>)
 8000bae:	7e1b      	ldrb	r3, [r3, #24]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	4b32      	ldr	r3, [pc, #200]	; (8000c7c <RangeDemo+0x274>)
 8000bb4:	891b      	ldrh	r3, [r3, #8]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4b30      	ldr	r3, [pc, #192]	; (8000c7c <RangeDemo+0x274>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	9301      	str	r3, [sp, #4]
 8000bbe:	9100      	str	r1, [sp, #0]
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4621      	mov	r1, r4
 8000bc4:	482e      	ldr	r0, [pc, #184]	; (8000c80 <RangeDemo+0x278>)
 8000bc6:	f000 fd47 	bl	8001658 <uart_printf>
            	Sensor_SetNewRange(&VL53L0XDevs[SingleSensorNo],&RangingMeasurementData);
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000bd0:	fb02 f303 	mul.w	r3, r2, r3
 8000bd4:	4a27      	ldr	r2, [pc, #156]	; (8000c74 <RangeDemo+0x26c>)
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4928      	ldr	r1, [pc, #160]	; (8000c7c <RangeDemo+0x274>)
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff feda 	bl	8000994 <Sensor_SetNewRange>
                /* Display distance in cm */
            	if( RangingMeasurementData.RangeStatus == 0 ){
 8000be0:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <RangeDemo+0x274>)
 8000be2:	7e1b      	ldrb	r3, [r3, #24]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d116      	bne.n	8000c16 <RangeDemo+0x20e>
                    sprintf(StrDisplay, "%3dc",(int)VL53L0XDevs[SingleSensorNo].LeakyRange/10);
 8000be8:	4a22      	ldr	r2, [pc, #136]	; (8000c74 <RangeDemo+0x26c>)
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000bf0:	fb01 f303 	mul.w	r3, r1, r3
 8000bf4:	4413      	add	r3, r2
 8000bf6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a21      	ldr	r2, [pc, #132]	; (8000c84 <RangeDemo+0x27c>)
 8000bfe:	fb82 1203 	smull	r1, r2, r2, r3
 8000c02:	1092      	asrs	r2, r2, #2
 8000c04:	17db      	asrs	r3, r3, #31
 8000c06:	1ad2      	subs	r2, r2, r3
 8000c08:	f107 030c 	add.w	r3, r7, #12
 8000c0c:	491e      	ldr	r1, [pc, #120]	; (8000c88 <RangeDemo+0x280>)
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f00a f9b2 	bl	800af78 <siprintf>
 8000c14:	e014      	b.n	8000c40 <RangeDemo+0x238>
                }
                else{
                    sprintf(StrDisplay, "----");
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	491c      	ldr	r1, [pc, #112]	; (8000c8c <RangeDemo+0x284>)
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f00a f9ab 	bl	800af78 <siprintf>
                    StrDisplay[0]=VL53L0XDevs[SingleSensorNo].DevLetter;
 8000c22:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <RangeDemo+0x26c>)
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000c2a:	fb01 f303 	mul.w	r3, r1, r3
 8000c2e:	4413      	add	r3, r2
 8000c30:	f203 1361 	addw	r3, r3, #353	; 0x161
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	733b      	strb	r3, [r7, #12]
 8000c38:	e002      	b.n	8000c40 <RangeDemo+0x238>
                }
            }
            else{
                HandleError(ERR_DEMO_RANGE_ONE);
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f7ff fbda 	bl	80003f4 <HandleError>
            }
        }
        XNUCLEO53L0A1_SetDisplayString(StrDisplay);
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	4618      	mov	r0, r3
 8000c46:	f000 fc53 	bl	80014f0 <XNUCLEO53L0A1_SetDisplayString>
        /* Check blue button */
        if( !BSP_GetPushButton() ){
 8000c4a:	f7ff fb99 	bl	8000380 <BSP_GetPushButton>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d102      	bne.n	8000c5a <RangeDemo+0x252>
            over=1;
 8000c54:	2301      	movs	r3, #1
 8000c56:	61bb      	str	r3, [r7, #24]
            break;
 8000c58:	e003      	b.n	8000c62 <RangeDemo+0x25a>
        }
    }while( !over);
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	f43f af0e 	beq.w	8000a7e <RangeDemo+0x76>
    /* Wait button to be un-pressed to decide if it is a short or long press */
    status=PusbButton_WaitUnPress();
 8000c62:	f7ff fb9f 	bl	80003a4 <PusbButton_WaitUnPress>
 8000c66:	6178      	str	r0, [r7, #20]
    return status;
 8000c68:	697b      	ldr	r3, [r7, #20]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	372c      	adds	r7, #44	; 0x2c
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd90      	pop	{r4, r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000018 	.word	0x20000018
 8000c78:	0800b94c 	.word	0x0800b94c
 8000c7c:	200009b4 	.word	0x200009b4
 8000c80:	0800ba9c 	.word	0x0800ba9c
 8000c84:	66666667 	.word	0x66666667
 8000c88:	0800baac 	.word	0x0800baac
 8000c8c:	0800bab4 	.word	0x0800bab4

08000c90 <ResetAndDetectSensor>:
    XNUCLEO53L0A1_SetIntrStateId(0, XNUCLEO53L0A1_DEV_CENTER);
    VL53L0A1_EXTI_IOUnconfigure(XNUCLEO53L0A1_DEV_CENTER);
}
#endif

void ResetAndDetectSensor(int SetDisplay){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
    int nSensor;
    nSensor = DetectSensors(SetDisplay);
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff fbbf 	bl	800041c <DetectSensors>
 8000c9e:	60f8      	str	r0, [r7, #12]
    /* at least one sensor and if one it must be the built-in one  */
    if( (nSensor <=0) ||  (nSensor ==1 && VL53L0XDevs[1].Present==0) ){
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	dd07      	ble.n	8000cb6 <ResetAndDetectSensor+0x26>
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d108      	bne.n	8000cbe <ResetAndDetectSensor+0x2e>
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <ResetAndDetectSensor+0x38>)
 8000cae:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d103      	bne.n	8000cbe <ResetAndDetectSensor+0x2e>
        HandleError(ERR_DETECT);
 8000cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000cba:	f7ff fb9b 	bl	80003f4 <HandleError>
    }
}
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000018 	.word	0x20000018

08000ccc <main>:

/* USER CODE END 0 */

int main(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  int ExitWithLongPress;
  RangingConfig_e RangingConfig = LONG_RANGE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	73fb      	strb	r3, [r7, #15]
  DemoMode_e DemoMode = RANGE_VALUE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	73bb      	strb	r3, [r7, #14]
  int UseSensorsMask = 1<<XNUCLEO53L0A1_DEV_CENTER;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cde:	f006 fe53 	bl	8007988 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000ce2:	f000 f867 	bl	8000db4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce6:	f000 f8b7 	bl	8000e58 <MX_GPIO_Init>

  /* Initialize timestamping for UART logging */
  TimeStamp_Init();
 8000cea:	f7ff fb29 	bl	8000340 <TimeStamp_Init>

  /* USER CODE BEGIN 2 */
  XNUCLEO53L0A1_Init();
 8000cee:	f000 fa65 	bl	80011bc <XNUCLEO53L0A1_Init>
  uart_printf(WelcomeMsg);
 8000cf2:	482b      	ldr	r0, [pc, #172]	; (8000da0 <main+0xd4>)
 8000cf4:	f000 fcb0 	bl	8001658 <uart_printf>
  XNUCLEO53L0A1_SetDisplayString("53L0");
 8000cf8:	482a      	ldr	r0, [pc, #168]	; (8000da4 <main+0xd8>)
 8000cfa:	f000 fbf9 	bl	80014f0 <XNUCLEO53L0A1_SetDisplayString>
  HAL_Delay(WelcomeTime);
 8000cfe:	f44f 7025 	mov.w	r0, #660	; 0x294
 8000d02:	f006 fe99 	bl	8007a38 <HAL_Delay>
  ResetAndDetectSensor(1);
 8000d06:	2001      	movs	r0, #1
 8000d08:	f7ff ffc2 	bl	8000c90 <ResetAndDetectSensor>

  /* Set VL53L0X API trace level */
  VL53L0X_trace_config(NULL, TRACE_MODULE_NONE, TRACE_LEVEL_NONE, TRACE_FUNCTION_NONE); // No Trace
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	2000      	movs	r0, #0
 8000d14:	f006 fdb6 	bl	8007884 <VL53L0X_trace_config>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */
      /* Display demo mode */
      XNUCLEO53L0A1_SetDisplayString(DemoModeTxt[DemoMode]);
 8000d18:	7bbb      	ldrb	r3, [r7, #14]
 8000d1a:	4a23      	ldr	r2, [pc, #140]	; (8000da8 <main+0xdc>)
 8000d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 fbe5 	bl	80014f0 <XNUCLEO53L0A1_SetDisplayString>
      HAL_Delay(ModeChangeDispTime);
 8000d26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d2a:	f006 fe85 	bl	8007a38 <HAL_Delay>

      /* Display Ranging config */
	  XNUCLEO53L0A1_SetDisplayString(RangingConfigTxt[RangingConfig]);
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	4a1e      	ldr	r2, [pc, #120]	; (8000dac <main+0xe0>)
 8000d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 fbda 	bl	80014f0 <XNUCLEO53L0A1_SetDisplayString>
	  HAL_Delay(ModeChangeDispTime);
 8000d3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d40:	f006 fe7a 	bl	8007a38 <HAL_Delay>

	  /* Reset and Detect all sensors */
      ResetAndDetectSensor(0);
 8000d44:	2000      	movs	r0, #0
 8000d46:	f7ff ffa3 	bl	8000c90 <ResetAndDetectSensor>

      /* Reset Timestamping */
      TimeStamp_Reset();
 8000d4a:	f7ff faff 	bl	800034c <TimeStamp_Reset>
      ResetAndDetectSensor(0);
      AlarmDemo();
#else

      /* Start Ranging demo */
      ExitWithLongPress = RangeDemo(UseSensorsMask, RangingConfig);
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	4619      	mov	r1, r3
 8000d52:	68b8      	ldr	r0, [r7, #8]
 8000d54:	f7ff fe58 	bl	8000a08 <RangeDemo>
 8000d58:	6078      	str	r0, [r7, #4]

      /* Blue button has been pressed (long or short press) */
      if(ExitWithLongPress){
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d012      	beq.n	8000d86 <main+0xba>
    	  /* Long press : change demo mode if multiple sensors present*/
    	  if( nDevPresent >1 ){
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <main+0xe4>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	ddd7      	ble.n	8000d18 <main+0x4c>
    		  /* If more than one sensor is present then toggle demo mode */
    		  DemoMode = (DemoMode == RANGE_VALUE) ? BAR_GRAPH : RANGE_VALUE;
 8000d68:	7bbb      	ldrb	r3, [r7, #14]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	bf0c      	ite	eq
 8000d6e:	2301      	moveq	r3, #1
 8000d70:	2300      	movne	r3, #0
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	73bb      	strb	r3, [r7, #14]
    		  UseSensorsMask = (DemoMode == BAR_GRAPH) ? 0x7 : 1<<XNUCLEO53L0A1_DEV_CENTER;
 8000d76:	7bbb      	ldrb	r3, [r7, #14]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d101      	bne.n	8000d80 <main+0xb4>
 8000d7c:	2307      	movs	r3, #7
 8000d7e:	e000      	b.n	8000d82 <main+0xb6>
 8000d80:	2302      	movs	r3, #2
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	e7c8      	b.n	8000d18 <main+0x4c>
    	  }
      } else {
    	  /* Short press : change ranging config */
    	  RangingConfig = (RangingConfig == LONG_RANGE) ? HIGH_SPEED : ((RangingConfig == HIGH_SPEED) ? HIGH_ACCURACY : LONG_RANGE);
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d006      	beq.n	8000d9a <main+0xce>
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d101      	bne.n	8000d96 <main+0xca>
 8000d92:	2302      	movs	r3, #2
 8000d94:	e002      	b.n	8000d9c <main+0xd0>
 8000d96:	2300      	movs	r3, #0
 8000d98:	e000      	b.n	8000d9c <main+0xd0>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	73fb      	strb	r3, [r7, #15]
      XNUCLEO53L0A1_SetDisplayString(DemoModeTxt[DemoMode]);
 8000d9e:	e7bb      	b.n	8000d18 <main+0x4c>
 8000da0:	200004d0 	.word	0x200004d0
 8000da4:	0800babc 	.word	0x0800babc
 8000da8:	2000000c 	.word	0x2000000c
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000850 	.word	0x20000850

08000db4 <SystemClock_Config>:
}

/** System Clock Configuration
*/
#ifdef STM32F401xE
void SystemClock_Config(void) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b094      	sub	sp, #80	; 0x50
 8000db8:	af00      	add	r7, sp, #0

    RCC_ClkInitTypeDef RCC_ClkInitStruct;
    RCC_OscInitTypeDef RCC_OscInitStruct;

    __PWR_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	4b24      	ldr	r3, [pc, #144]	; (8000e50 <SystemClock_Config+0x9c>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a23      	ldr	r2, [pc, #140]	; (8000e50 <SystemClock_Config+0x9c>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dca:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <SystemClock_Config+0x9c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]

    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <SystemClock_Config+0xa0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000de2:	4a1c      	ldr	r2, [pc, #112]	; (8000e54 <SystemClock_Config+0xa0>)
 8000de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <SystemClock_Config+0xa0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000df6:	2302      	movs	r3, #2
 8000df8:	60fb      	str	r3, [r7, #12]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSICalibrationValue = 6;
 8000dfe:	2306      	movs	r3, #6
 8000e00:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e02:	2302      	movs	r3, #2
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e06:	2300      	movs	r3, #0
 8000e08:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLM = 16;
 8000e0a:	2310      	movs	r3, #16
 8000e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLN = 336;
 8000e0e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e12:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e14:	2304      	movs	r3, #4
 8000e16:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e18:	2307      	movs	r3, #7
 8000e1a:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	4618      	mov	r0, r3
 8000e22:	f008 fbd3 	bl	80095cc <HAL_RCC_OscConfig>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000e26:	2305      	movs	r3, #5
 8000e28:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e36:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8000e3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e40:	2102      	movs	r1, #2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f008 fdd6 	bl	80099f4 <HAL_RCC_ClockConfig>

}
 8000e48:	bf00      	nop
 8000e4a:	3750      	adds	r7, #80	; 0x50
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40007000 	.word	0x40007000

08000e58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a29      	ldr	r2, [pc, #164]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]
  __GPIOH_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a22      	ldr	r2, [pc, #136]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
  __GPIOA_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a1b      	ldr	r2, [pc, #108]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
  __GPIOB_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ece:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_GPIO_Init+0xb8>)
 8000ed6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480c      	ldr	r0, [pc, #48]	; (8000f14 <MX_GPIO_Init+0xbc>)
 8000ee4:	f007 fa84 	bl	80083f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ee8:	2320      	movs	r3, #32
 8000eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	4806      	ldr	r0, [pc, #24]	; (8000f18 <MX_GPIO_Init+0xc0>)
 8000f00:	f007 fa76 	bl	80083f0 <HAL_GPIO_Init>

}
 8000f04:	bf00      	nop
 8000f06:	3728      	adds	r7, #40	; 0x28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	10120000 	.word	0x10120000
 8000f14:	40020800 	.word	0x40020800
 8000f18:	40020000 	.word	0x40020000

08000f1c <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f20:	2007      	movs	r0, #7
 8000f22:	f006 fe6d 	bl	8007c00 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2e:	f006 fe72 	bl	8007c16 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  if(htim_oc->Instance==TIM2)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f48:	d10e      	bne.n	8000f68 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __TIM2_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <HAL_TIM_OC_MspInit+0x64>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <HAL_TIM_OC_MspInit+0x64>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <HAL_TIM_OC_MspInit+0x64>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000f66:	e012      	b.n	8000f8e <HAL_TIM_OC_MspInit+0x56>
  else if(htim_oc->Instance==TIM5)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0c      	ldr	r2, [pc, #48]	; (8000fa0 <HAL_TIM_OC_MspInit+0x68>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d10d      	bne.n	8000f8e <HAL_TIM_OC_MspInit+0x56>
    __TIM5_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_TIM_OC_MspInit+0x64>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	4a08      	ldr	r2, [pc, #32]	; (8000f9c <HAL_TIM_OC_MspInit+0x64>)
 8000f7c:	f043 0308 	orr.w	r3, r3, #8
 8000f80:	6413      	str	r3, [r2, #64]	; 0x40
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_TIM_OC_MspInit+0x64>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
}
 8000f8e:	bf00      	nop
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40000c00 	.word	0x40000c00

08000fa4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa8:	f006 fd2c 	bl	8007a04 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000fac:	f006 fe69 	bl	8007c82 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <_I2cFailRecover>:
 *
 * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
 * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
 * this routine does use gpio to manipulate and recover i2c bus line in all cases.
 */
static void _I2cFailRecover(){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    int i, nRetry=0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
    // We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
    // by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
    // all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state

    // Enable I/O
    __GPIOB_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	4b4a      	ldr	r3, [pc, #296]	; (80010ec <_I2cFailRecover+0x138>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a49      	ldr	r2, [pc, #292]	; (80010ec <_I2cFailRecover+0x138>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b47      	ldr	r3, [pc, #284]	; (80010ec <_I2cFailRecover+0x138>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe0:	4843      	ldr	r0, [pc, #268]	; (80010f0 <_I2cFailRecover+0x13c>)
 8000fe2:	f007 fba1 	bl	8008728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fec:	4840      	ldr	r0, [pc, #256]	; (80010f0 <_I2cFailRecover+0x13c>)
 8000fee:	f007 fb9b 	bl	8008728 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9 ;
 8000ff2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ff6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ff8:	2311      	movs	r3, #17
 8000ffa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	4619      	mov	r1, r3
 8001006:	483a      	ldr	r0, [pc, #232]	; (80010f0 <_I2cFailRecover+0x13c>)
 8001008:	f007 f9f2 	bl	80083f0 <HAL_GPIO_Init>
    //TODO we could do this faster by not using HAL delay 1ms for clk timing
    do{
        for( i=0; i<10; i++){
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
 8001010:	e014      	b.n	800103c <_I2cFailRecover+0x88>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001018:	4835      	ldr	r0, [pc, #212]	; (80010f0 <_I2cFailRecover+0x13c>)
 800101a:	f007 fb85 	bl	8008728 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 800101e:	2001      	movs	r0, #1
 8001020:	f006 fd0a 	bl	8007a38 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102a:	4831      	ldr	r0, [pc, #196]	; (80010f0 <_I2cFailRecover+0x13c>)
 800102c:	f007 fb7c 	bl	8008728 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001030:	2001      	movs	r0, #1
 8001032:	f006 fd01 	bl	8007a38 <HAL_Delay>
        for( i=0; i<10; i++){
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	3301      	adds	r3, #1
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	2b09      	cmp	r3, #9
 8001040:	dde7      	ble.n	8001012 <_I2cFailRecover+0x5e>
        }
//        if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 ){
//            static int RetryRecover;
//            RetryRecover++;
//        }
    }while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 && nRetry++<7);
 8001042:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001046:	482a      	ldr	r0, [pc, #168]	; (80010f0 <_I2cFailRecover+0x13c>)
 8001048:	f007 fb56 	bl	80086f8 <HAL_GPIO_ReadPin>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d104      	bne.n	800105c <_I2cFailRecover+0xa8>
 8001052:	6a3b      	ldr	r3, [r7, #32]
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	623a      	str	r2, [r7, #32]
 8001058:	2b06      	cmp	r3, #6
 800105a:	ddd7      	ble.n	800100c <_I2cFailRecover+0x58>

    if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 ){
 800105c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001060:	4823      	ldr	r0, [pc, #140]	; (80010f0 <_I2cFailRecover+0x13c>)
 8001062:	f007 fb49 	bl	80086f8 <HAL_GPIO_ReadPin>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d13b      	bne.n	80010e4 <_I2cFailRecover+0x130>
        __GPIOA_CLK_ENABLE();
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <_I2cFailRecover+0x138>)
 8001072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001074:	4a1d      	ldr	r2, [pc, #116]	; (80010ec <_I2cFailRecover+0x138>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6313      	str	r3, [r2, #48]	; 0x30
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <_I2cFailRecover+0x138>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	687b      	ldr	r3, [r7, #4]
        //We are still in bad i2c state warm user by blinking led but stay here
        GPIO_InitStruct.Pin = GPIO_PIN_5 ;
 8001088:	2320      	movs	r3, #32
 800108a:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108c:	2301      	movs	r3, #1
 800108e:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	4619      	mov	r1, r3
 800109a:	4816      	ldr	r0, [pc, #88]	; (80010f4 <_I2cFailRecover+0x140>)
 800109c:	f007 f9a8 	bl	80083f0 <HAL_GPIO_Init>
        do{
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	2120      	movs	r1, #32
 80010a4:	4813      	ldr	r0, [pc, #76]	; (80010f4 <_I2cFailRecover+0x140>)
 80010a6:	f007 fb3f 	bl	8008728 <HAL_GPIO_WritePin>
            HAL_Delay(33);
 80010aa:	2021      	movs	r0, #33	; 0x21
 80010ac:	f006 fcc4 	bl	8007a38 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2120      	movs	r1, #32
 80010b4:	480f      	ldr	r0, [pc, #60]	; (80010f4 <_I2cFailRecover+0x140>)
 80010b6:	f007 fb37 	bl	8008728 <HAL_GPIO_WritePin>
            HAL_Delay(33);
 80010ba:	2021      	movs	r0, #33	; 0x21
 80010bc:	f006 fcbc 	bl	8007a38 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80010c0:	2201      	movs	r2, #1
 80010c2:	2120      	movs	r1, #32
 80010c4:	480b      	ldr	r0, [pc, #44]	; (80010f4 <_I2cFailRecover+0x140>)
 80010c6:	f007 fb2f 	bl	8008728 <HAL_GPIO_WritePin>
            HAL_Delay(33);
 80010ca:	2021      	movs	r0, #33	; 0x21
 80010cc:	f006 fcb4 	bl	8007a38 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2120      	movs	r1, #32
 80010d4:	4807      	ldr	r0, [pc, #28]	; (80010f4 <_I2cFailRecover+0x140>)
 80010d6:	f007 fb27 	bl	8008728 <HAL_GPIO_WritePin>
            HAL_Delay(33*20);
 80010da:	f44f 7025 	mov.w	r0, #660	; 0x294
 80010de:	f006 fcab 	bl	8007a38 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80010e2:	e7dd      	b.n	80010a0 <_I2cFailRecover+0xec>
        }while(1);
    }
}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	; 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020400 	.word	0x40020400
 80010f4:	40020000 	.word	0x40020000

080010f8 <XNUCLEO53L0A1_I2C1Configure>:



int XNUCLEO53L0A1_I2C1Configure() {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
    int status;
    GPIO_InitTypeDef GPIO_InitStruct;

    _I2cFailRecover();
 80010fe:	f7ff ff59 	bl	8000fb4 <_I2cFailRecover>

    /* Peripheral clock enable */
    __GPIOB_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	4b28      	ldr	r3, [pc, #160]	; (80011a8 <XNUCLEO53L0A1_I2C1Configure+0xb0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a27      	ldr	r2, [pc, #156]	; (80011a8 <XNUCLEO53L0A1_I2C1Configure+0xb0>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <XNUCLEO53L0A1_I2C1Configure+0xb0>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
    __I2C1_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <XNUCLEO53L0A1_I2C1Configure+0xb0>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	4a20      	ldr	r2, [pc, #128]	; (80011a8 <XNUCLEO53L0A1_I2C1Configure+0xb0>)
 8001128:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800112c:	6413      	str	r3, [r2, #64]	; 0x40
 800112e:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <XNUCLEO53L0A1_I2C1Configure+0xb0>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	683b      	ldr	r3, [r7, #0]

    /**I2C1 GPIO Configuration\n
     PB8     ------> I2C1_SCL\n
     PB9     ------> I2C1_SDA
     */
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800113a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800113e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001140:	2312      	movs	r3, #18
 8001142:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800114c:	2304      	movs	r3, #4
 800114e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	f107 0308 	add.w	r3, r7, #8
 8001154:	4619      	mov	r1, r3
 8001156:	4815      	ldr	r0, [pc, #84]	; (80011ac <XNUCLEO53L0A1_I2C1Configure+0xb4>)
 8001158:	f007 f94a 	bl	80083f0 <HAL_GPIO_Init>

    XNUCLEO53L0A1_hi2c.Instance = I2C1;
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 800115e:	4a15      	ldr	r2, [pc, #84]	; (80011b4 <XNUCLEO53L0A1_I2C1Configure+0xbc>)
 8001160:	601a      	str	r2, [r3, #0]
#ifdef __STM32F4xx_HAL_H
    XNUCLEO53L0A1_hi2c.Init.ClockSpeed = 400000;
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 8001164:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <XNUCLEO53L0A1_I2C1Configure+0xc0>)
 8001166:	605a      	str	r2, [r3, #4]
    XNUCLEO53L0A1_hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
#else
    /* STM32L4xx and L053 */
    XNUCLEO53L0A1_hi2c.Init.Timing = 0x00300F38; /* set 400KHz fast mode i2c*/
#endif
    XNUCLEO53L0A1_hi2c.Init.OwnAddress1 = 0;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
    XNUCLEO53L0A1_hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 8001176:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800117a:	611a      	str	r2, [r3, #16]
    XNUCLEO53L0A1_hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 800117e:	2200      	movs	r2, #0
 8001180:	615a      	str	r2, [r3, #20]
    XNUCLEO53L0A1_hi2c.Init.OwnAddress2 = 0;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
    XNUCLEO53L0A1_hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
    XNUCLEO53L0A1_hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
    status = HAL_I2C_Init(&XNUCLEO53L0A1_hi2c);
 8001194:	4806      	ldr	r0, [pc, #24]	; (80011b0 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 8001196:	f007 faf9 	bl	800878c <HAL_I2C_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	61fb      	str	r3, [r7, #28]
    return status;
 800119e:	69fb      	ldr	r3, [r7, #28]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3720      	adds	r7, #32
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020400 	.word	0x40020400
 80011b0:	200009d0 	.word	0x200009d0
 80011b4:	40005400 	.word	0x40005400
 80011b8:	00061a80 	.word	0x00061a80

080011bc <XNUCLEO53L0A1_Init>:
done:
    return status;
}


int XNUCLEO53L0A1_Init(void) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
    int status;
    uint8_t ExpanderData[2];
    XNUCLEO53L0A1_USART2_UART_Init();
 80011c2:	f000 fa9d 	bl	8001700 <XNUCLEO53L0A1_USART2_UART_Init>
    XNUCLEO53L0A1_I2C1Configure();
 80011c6:	f7ff ff97 	bl	80010f8 <XNUCLEO53L0A1_I2C1Configure>

    status = _ExpanderRd( I2cExpAddr0, 0, ExpanderData, 2);
 80011ca:	463a      	mov	r2, r7
 80011cc:	2302      	movs	r3, #2
 80011ce:	2100      	movs	r1, #0
 80011d0:	2086      	movs	r0, #134	; 0x86
 80011d2:	f000 f933 	bl	800143c <_ExpanderRd>
 80011d6:	6078      	str	r0, [r7, #4]
    if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d105      	bne.n	80011ea <XNUCLEO53L0A1_Init+0x2e>
 80011de:	783b      	ldrb	r3, [r7, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d102      	bne.n	80011ea <XNUCLEO53L0A1_Init+0x2e>
 80011e4:	787b      	ldrb	r3, [r7, #1]
 80011e6:	2b16      	cmp	r3, #22
 80011e8:	d007      	beq.n	80011fa <XNUCLEO53L0A1_Init+0x3e>
        XNUCLEO53L0A1_ErrLog("I2C Expander @0x%02X not detected",(int)I2cExpAddr0 );
 80011ea:	2386      	movs	r3, #134	; 0x86
 80011ec:	f44f 72c4 	mov.w	r2, #392	; 0x188
 80011f0:	4931      	ldr	r1, [pc, #196]	; (80012b8 <XNUCLEO53L0A1_Init+0xfc>)
 80011f2:	4832      	ldr	r0, [pc, #200]	; (80012bc <XNUCLEO53L0A1_Init+0x100>)
 80011f4:	f000 fa30 	bl	8001658 <uart_printf>
        goto done_err;
 80011f8:	e058      	b.n	80012ac <XNUCLEO53L0A1_Init+0xf0>

    }
    status = _ExpanderRd( I2cExpAddr1, 0, ExpanderData, 2);
 80011fa:	463a      	mov	r2, r7
 80011fc:	2302      	movs	r3, #2
 80011fe:	2100      	movs	r1, #0
 8001200:	2084      	movs	r0, #132	; 0x84
 8001202:	f000 f91b 	bl	800143c <_ExpanderRd>
 8001206:	6078      	str	r0, [r7, #4]
    if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d105      	bne.n	800121a <XNUCLEO53L0A1_Init+0x5e>
 800120e:	783b      	ldrb	r3, [r7, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d102      	bne.n	800121a <XNUCLEO53L0A1_Init+0x5e>
 8001214:	787b      	ldrb	r3, [r7, #1]
 8001216:	2b16      	cmp	r3, #22
 8001218:	d007      	beq.n	800122a <XNUCLEO53L0A1_Init+0x6e>
        XNUCLEO53L0A1_ErrLog("I2C Expander @0x%02X not detected",(int)I2cExpAddr1);
 800121a:	2384      	movs	r3, #132	; 0x84
 800121c:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8001220:	4925      	ldr	r1, [pc, #148]	; (80012b8 <XNUCLEO53L0A1_Init+0xfc>)
 8001222:	4826      	ldr	r0, [pc, #152]	; (80012bc <XNUCLEO53L0A1_Init+0x100>)
 8001224:	f000 fa18 	bl	8001658 <uart_printf>
        goto done_err;
 8001228:	e040      	b.n	80012ac <XNUCLEO53L0A1_Init+0xf0>
    }

    CurIOVal.u32=0x0;
 800122a:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <XNUCLEO53L0A1_Init+0x104>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
    /* setup expender   i/o direction  all output but exp1 bit 14*/
    ExpanderData[0] = 0xFF;
 8001230:	23ff      	movs	r3, #255	; 0xff
 8001232:	703b      	strb	r3, [r7, #0]
    ExpanderData[1] = 0xFF;
 8001234:	23ff      	movs	r3, #255	; 0xff
 8001236:	707b      	strb	r3, [r7, #1]
    status = _ExpanderWR(I2cExpAddr0, GPDR, ExpanderData, 2);
 8001238:	463a      	mov	r2, r7
 800123a:	2302      	movs	r3, #2
 800123c:	2114      	movs	r1, #20
 800123e:	2086      	movs	r0, #134	; 0x86
 8001240:	f000 f92e 	bl	80014a0 <_ExpanderWR>
 8001244:	6078      	str	r0, [r7, #4]
    if (status) {
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d007      	beq.n	800125c <XNUCLEO53L0A1_Init+0xa0>
        XNUCLEO53L0A1_ErrLog("Set Expander @0x%02X DR", I2cExpAddr0);
 800124c:	2386      	movs	r3, #134	; 0x86
 800124e:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8001252:	4919      	ldr	r1, [pc, #100]	; (80012b8 <XNUCLEO53L0A1_Init+0xfc>)
 8001254:	481b      	ldr	r0, [pc, #108]	; (80012c4 <XNUCLEO53L0A1_Init+0x108>)
 8001256:	f000 f9ff 	bl	8001658 <uart_printf>
        goto done_err;
 800125a:	e027      	b.n	80012ac <XNUCLEO53L0A1_Init+0xf0>
    }
    ExpanderData[0] = 0xFF;
 800125c:	23ff      	movs	r3, #255	; 0xff
 800125e:	703b      	strb	r3, [r7, #0]
    ExpanderData[1] = 0xBF; // all but bit 14-15 that is pb1 and xhurt
 8001260:	23bf      	movs	r3, #191	; 0xbf
 8001262:	707b      	strb	r3, [r7, #1]
    status = _ExpanderWR(I2cExpAddr1, GPDR, ExpanderData, 2);
 8001264:	463a      	mov	r2, r7
 8001266:	2302      	movs	r3, #2
 8001268:	2114      	movs	r1, #20
 800126a:	2084      	movs	r0, #132	; 0x84
 800126c:	f000 f918 	bl	80014a0 <_ExpanderWR>
 8001270:	6078      	str	r0, [r7, #4]
    if (status) {
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d007      	beq.n	8001288 <XNUCLEO53L0A1_Init+0xcc>
        XNUCLEO53L0A1_ErrLog("Set Expander @0x%02X DR", I2cExpAddr1);
 8001278:	2384      	movs	r3, #132	; 0x84
 800127a:	f240 129f 	movw	r2, #415	; 0x19f
 800127e:	490e      	ldr	r1, [pc, #56]	; (80012b8 <XNUCLEO53L0A1_Init+0xfc>)
 8001280:	4810      	ldr	r0, [pc, #64]	; (80012c4 <XNUCLEO53L0A1_Init+0x108>)
 8001282:	f000 f9e9 	bl	8001658 <uart_printf>
        goto done_err;
 8001286:	e011      	b.n	80012ac <XNUCLEO53L0A1_Init+0xf0>
    }
    /* shut down all segment and all device */
    CurIOVal.u32=0x7F + (0x7F<<7) + (0x7F<<16)+(0x7F<<(16+7));
 8001288:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <XNUCLEO53L0A1_Init+0x104>)
 800128a:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 800128e:	601a      	str	r2, [r3, #0]
    status= _ExpandersSetAllIO();
 8001290:	f000 f8b4 	bl	80013fc <_ExpandersSetAllIO>
 8001294:	6078      	str	r0, [r7, #4]
    if( status ){
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <XNUCLEO53L0A1_Init+0xee>
        XNUCLEO53L0A1_ErrLog("Set initial i/o ");
 800129c:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 80012a0:	4905      	ldr	r1, [pc, #20]	; (80012b8 <XNUCLEO53L0A1_Init+0xfc>)
 80012a2:	4809      	ldr	r0, [pc, #36]	; (80012c8 <XNUCLEO53L0A1_Init+0x10c>)
 80012a4:	f000 f9d8 	bl	8001658 <uart_printf>
 80012a8:	e000      	b.n	80012ac <XNUCLEO53L0A1_Init+0xf0>
    }

done_err:
 80012aa:	bf00      	nop
    return status;
 80012ac:	687b      	ldr	r3, [r7, #4]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	0800bcf8 	.word	0x0800bcf8
 80012bc:	0800bae8 	.word	0x0800bae8
 80012c0:	20000854 	.word	0x20000854
 80012c4:	0800bb1c 	.word	0x0800bb1c
 80012c8:	0800bb44 	.word	0x0800bb44

080012cc <XNUCLEO53L0A1_ResetId>:
    }
    *state = PortValue;
    return status;
}

int XNUCLEO53L0A1_ResetId(int DevNo, int state) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af02      	add	r7, sp, #8
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
    int status;
    switch( DevNo ){
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b72      	cmp	r3, #114	; 0x72
 80012da:	d04c      	beq.n	8001376 <XNUCLEO53L0A1_ResetId+0xaa>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b72      	cmp	r3, #114	; 0x72
 80012e0:	dc62      	bgt.n	80013a8 <XNUCLEO53L0A1_ResetId+0xdc>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b6c      	cmp	r3, #108	; 0x6c
 80012e6:	d02d      	beq.n	8001344 <XNUCLEO53L0A1_ResetId+0x78>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b6c      	cmp	r3, #108	; 0x6c
 80012ec:	dc5c      	bgt.n	80013a8 <XNUCLEO53L0A1_ResetId+0xdc>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b63      	cmp	r3, #99	; 0x63
 80012f2:	d00e      	beq.n	8001312 <XNUCLEO53L0A1_ResetId+0x46>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b63      	cmp	r3, #99	; 0x63
 80012f8:	dc56      	bgt.n	80013a8 <XNUCLEO53L0A1_ResetId+0xdc>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d03a      	beq.n	8001376 <XNUCLEO53L0A1_ResetId+0xaa>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b02      	cmp	r3, #2
 8001304:	dc50      	bgt.n	80013a8 <XNUCLEO53L0A1_ResetId+0xdc>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d01b      	beq.n	8001344 <XNUCLEO53L0A1_ResetId+0x78>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d14a      	bne.n	80013a8 <XNUCLEO53L0A1_ResetId+0xdc>
    case XNUCLEO53L0A1_DEV_CENTER :
    case 'c' :
        CurIOVal.bytes[3]&=~0x80; /* bit 15 expender 1  => byte #3 */
 8001312:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <XNUCLEO53L0A1_ResetId+0x118>)
 8001314:	78db      	ldrb	r3, [r3, #3]
 8001316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800131a:	b2da      	uxtb	r2, r3
 800131c:	4b31      	ldr	r3, [pc, #196]	; (80013e4 <XNUCLEO53L0A1_ResetId+0x118>)
 800131e:	70da      	strb	r2, [r3, #3]
        if( state )
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d006      	beq.n	8001334 <XNUCLEO53L0A1_ResetId+0x68>
            CurIOVal.bytes[3]|=0x80; /* bit 15 expender 1  => byte #3 */
 8001326:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <XNUCLEO53L0A1_ResetId+0x118>)
 8001328:	78db      	ldrb	r3, [r3, #3]
 800132a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4b2c      	ldr	r3, [pc, #176]	; (80013e4 <XNUCLEO53L0A1_ResetId+0x118>)
 8001332:	70da      	strb	r2, [r3, #3]
        status= _ExpanderWR(I2cExpAddr1, GPSR+1, &CurIOVal.bytes[3], 1);
 8001334:	2301      	movs	r3, #1
 8001336:	4a2c      	ldr	r2, [pc, #176]	; (80013e8 <XNUCLEO53L0A1_ResetId+0x11c>)
 8001338:	2113      	movs	r1, #19
 800133a:	2084      	movs	r0, #132	; 0x84
 800133c:	f000 f8b0 	bl	80014a0 <_ExpanderWR>
 8001340:	60f8      	str	r0, [r7, #12]
        break;
 8001342:	e03c      	b.n	80013be <XNUCLEO53L0A1_ResetId+0xf2>
    case XNUCLEO53L0A1_DEV_LEFT :
    case 'l' :
        CurIOVal.bytes[1]&=~0x40; /* bit 14 expender 0 => byte #1*/
 8001344:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <XNUCLEO53L0A1_ResetId+0x118>)
 8001346:	785b      	ldrb	r3, [r3, #1]
 8001348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <XNUCLEO53L0A1_ResetId+0x118>)
 8001350:	705a      	strb	r2, [r3, #1]
        if( state )
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d006      	beq.n	8001366 <XNUCLEO53L0A1_ResetId+0x9a>
            CurIOVal.bytes[1]|=0x40; /* bit 14 expender 0 => byte #1*/
 8001358:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <XNUCLEO53L0A1_ResetId+0x118>)
 800135a:	785b      	ldrb	r3, [r3, #1]
 800135c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <XNUCLEO53L0A1_ResetId+0x118>)
 8001364:	705a      	strb	r2, [r3, #1]
        status= _ExpanderWR(I2cExpAddr0, GPSR+1, &CurIOVal.bytes[1], 1);
 8001366:	2301      	movs	r3, #1
 8001368:	4a20      	ldr	r2, [pc, #128]	; (80013ec <XNUCLEO53L0A1_ResetId+0x120>)
 800136a:	2113      	movs	r1, #19
 800136c:	2086      	movs	r0, #134	; 0x86
 800136e:	f000 f897 	bl	80014a0 <_ExpanderWR>
 8001372:	60f8      	str	r0, [r7, #12]
        break;
 8001374:	e023      	b.n	80013be <XNUCLEO53L0A1_ResetId+0xf2>
    case 'r' :
    case XNUCLEO53L0A1_DEV_RIGHT :
        CurIOVal.bytes[1]&=~0x80; /* bit 15 expender 0  => byte #1 */
 8001376:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <XNUCLEO53L0A1_ResetId+0x118>)
 8001378:	785b      	ldrb	r3, [r3, #1]
 800137a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <XNUCLEO53L0A1_ResetId+0x118>)
 8001382:	705a      	strb	r2, [r3, #1]
        if( state )
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d006      	beq.n	8001398 <XNUCLEO53L0A1_ResetId+0xcc>
            CurIOVal.bytes[1]|=0x80; /* bit 15 expender 0 => byte #1*/
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <XNUCLEO53L0A1_ResetId+0x118>)
 800138c:	785b      	ldrb	r3, [r3, #1]
 800138e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001392:	b2da      	uxtb	r2, r3
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <XNUCLEO53L0A1_ResetId+0x118>)
 8001396:	705a      	strb	r2, [r3, #1]
        status= _ExpanderWR(I2cExpAddr0, GPSR+1, &CurIOVal.bytes[1], 1);
 8001398:	2301      	movs	r3, #1
 800139a:	4a14      	ldr	r2, [pc, #80]	; (80013ec <XNUCLEO53L0A1_ResetId+0x120>)
 800139c:	2113      	movs	r1, #19
 800139e:	2086      	movs	r0, #134	; 0x86
 80013a0:	f000 f87e 	bl	80014a0 <_ExpanderWR>
 80013a4:	60f8      	str	r0, [r7, #12]
        break;
 80013a6:	e00a      	b.n	80013be <XNUCLEO53L0A1_ResetId+0xf2>
    default:
        XNUCLEO53L0A1_ErrLog("Invalid DevNo %d",DevNo);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80013ae:	4910      	ldr	r1, [pc, #64]	; (80013f0 <XNUCLEO53L0A1_ResetId+0x124>)
 80013b0:	4810      	ldr	r0, [pc, #64]	; (80013f4 <XNUCLEO53L0A1_ResetId+0x128>)
 80013b2:	f000 f951 	bl	8001658 <uart_printf>
        status = -1;
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	60fb      	str	r3, [r7, #12]
        goto done;
 80013bc:	e00d      	b.n	80013da <XNUCLEO53L0A1_ResetId+0x10e>
    }
//error with valid id
    if( status ){
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d009      	beq.n	80013d8 <XNUCLEO53L0A1_ResetId+0x10c>
        XNUCLEO53L0A1_ErrLog("expander i/o error for DevNo %d state %d ",DevNo, state);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 80013ce:	4908      	ldr	r1, [pc, #32]	; (80013f0 <XNUCLEO53L0A1_ResetId+0x124>)
 80013d0:	4809      	ldr	r0, [pc, #36]	; (80013f8 <XNUCLEO53L0A1_ResetId+0x12c>)
 80013d2:	f000 f941 	bl	8001658 <uart_printf>
 80013d6:	e000      	b.n	80013da <XNUCLEO53L0A1_ResetId+0x10e>
    }
done:
 80013d8:	bf00      	nop
    return status;
 80013da:	68fb      	ldr	r3, [r7, #12]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000854 	.word	0x20000854
 80013e8:	20000857 	.word	0x20000857
 80013ec:	20000855 	.word	0x20000855
 80013f0:	0800bd24 	.word	0x0800bd24
 80013f4:	0800bac4 	.word	0x0800bac4
 80013f8:	0800bb84 	.word	0x0800bb84

080013fc <_ExpandersSetAllIO>:
}
/**
 * Set all i2c expended gpio in one go
 * @return i/o operation status
 */
static int _ExpandersSetAllIO(void){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
    int status;
    status = _ExpanderWR(I2cExpAddr0, GPSR, &CurIOVal.bytes[0], 2);
 8001402:	2302      	movs	r3, #2
 8001404:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <_ExpandersSetAllIO+0x38>)
 8001406:	2112      	movs	r1, #18
 8001408:	2086      	movs	r0, #134	; 0x86
 800140a:	f000 f849 	bl	80014a0 <_ExpanderWR>
 800140e:	6078      	str	r0, [r7, #4]
    if( status ){
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d107      	bne.n	8001426 <_ExpandersSetAllIO+0x2a>
        goto done_err;
    }
    status = _ExpanderWR(I2cExpAddr1, GPSR, &CurIOVal.bytes[2], 2);
 8001416:	2302      	movs	r3, #2
 8001418:	4a07      	ldr	r2, [pc, #28]	; (8001438 <_ExpandersSetAllIO+0x3c>)
 800141a:	2112      	movs	r1, #18
 800141c:	2084      	movs	r0, #132	; 0x84
 800141e:	f000 f83f 	bl	80014a0 <_ExpanderWR>
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	e000      	b.n	8001428 <_ExpandersSetAllIO+0x2c>
        goto done_err;
 8001426:	bf00      	nop
done_err:
    return status;
 8001428:	687b      	ldr	r3, [r7, #4]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000854 	.word	0x20000854
 8001438:	20000856 	.word	0x20000856

0800143c <_ExpanderRd>:
 * @param index      register index
 * @param data       read data buffer
 * @param n_data     number of byte to read
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderRd(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af02      	add	r7, sp, #8
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	603b      	str	r3, [r7, #0]

    int status;
    uint8_t RegAddr;
    RegAddr = index;
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	74fb      	strb	r3, [r7, #19]
    XNUCLEO53L0A1_GetI2cBus();
    do {
        status = HAL_I2C_Master_Transmit(&XNUCLEO53L0A1_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	b299      	uxth	r1, r3
 8001454:	f107 0213 	add.w	r2, r7, #19
 8001458:	2364      	movs	r3, #100	; 0x64
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2301      	movs	r3, #1
 800145e:	480f      	ldr	r0, [pc, #60]	; (800149c <_ExpanderRd+0x60>)
 8001460:	f007 fa80 	bl	8008964 <HAL_I2C_Master_Transmit>
 8001464:	4603      	mov	r3, r0
 8001466:	617b      	str	r3, [r7, #20]
        if (status)
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d110      	bne.n	8001490 <_ExpanderRd+0x54>
            break;
        status = HAL_I2C_Master_Receive(&XNUCLEO53L0A1_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	b299      	uxth	r1, r3
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	b29a      	uxth	r2, r3
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	2064      	movs	r0, #100	; 0x64
 800147a:	fb00 f303 	mul.w	r3, r0, r3
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	4613      	mov	r3, r2
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	4805      	ldr	r0, [pc, #20]	; (800149c <_ExpanderRd+0x60>)
 8001486:	f007 fb79 	bl	8008b7c <HAL_I2C_Master_Receive>
 800148a:	4603      	mov	r3, r0
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	e000      	b.n	8001492 <_ExpanderRd+0x56>
            break;
 8001490:	bf00      	nop
    } while (0);
    XNUCLEO53L0A1_PutI2cBus();
    return status;
 8001492:	697b      	ldr	r3, [r7, #20]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200009d0 	.word	0x200009d0

080014a0 <_ExpanderWR>:
 * @param index      register index
 * @param data       data buffer
 * @param n_data     number of byte to write
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderWR(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	; 0x30
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	603b      	str	r3, [r7, #0]

    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0] = index;
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	753b      	strb	r3, [r7, #20]
    memcpy(RegAddr + 1, data, n_data);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	3301      	adds	r3, #1
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	4618      	mov	r0, r3
 80014c0:	f009 fd44 	bl	800af4c <memcpy>
    XNUCLEO53L0A1_GetI2cBus();
    status = HAL_I2C_Master_Transmit(&XNUCLEO53L0A1_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	b299      	uxth	r1, r3
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	3301      	adds	r3, #1
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	f107 0214 	add.w	r2, r7, #20
 80014d4:	2064      	movs	r0, #100	; 0x64
 80014d6:	9000      	str	r0, [sp, #0]
 80014d8:	4804      	ldr	r0, [pc, #16]	; (80014ec <_ExpanderWR+0x4c>)
 80014da:	f007 fa43 	bl	8008964 <HAL_I2C_Master_Transmit>
 80014de:	4603      	mov	r3, r0
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
    XNUCLEO53L0A1_PutI2cBus();
    return status;
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3728      	adds	r7, #40	; 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200009d0 	.word	0x200009d0

080014f0 <XNUCLEO53L0A1_SetDisplayString>:
#undef S6
#undef DP

/** @} */

int XNUCLEO53L0A1_SetDisplayString(const char *str) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
    int status;
    uint32_t Segments;
    int BitPos;
    int i;

    for( i=0; i<4 && str[i]!=0; i++){
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	e027      	b.n	800154e <XNUCLEO53L0A1_SetDisplayString+0x5e>
        Segments = (uint32_t)ascii_to_display_lut[(uint8_t)str[i]];
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	4413      	add	r3, r2
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	4b28      	ldr	r3, [pc, #160]	; (80015ac <XNUCLEO53L0A1_SetDisplayString+0xbc>)
 800150a:	5c9b      	ldrb	r3, [r3, r2]
 800150c:	613b      	str	r3, [r7, #16]
        Segments =(~Segments)&0x7F;
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	43db      	mvns	r3, r3
 8001512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001516:	613b      	str	r3, [r7, #16]
        BitPos=DisplayBitPos[i];
 8001518:	4a25      	ldr	r2, [pc, #148]	; (80015b0 <XNUCLEO53L0A1_SetDisplayString+0xc0>)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001520:	60fb      	str	r3, [r7, #12]
        CurIOVal.u32 &=~(0x7F<<BitPos);
 8001522:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	217f      	movs	r1, #127	; 0x7f
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	fa01 f202 	lsl.w	r2, r1, r2
 800152e:	43d2      	mvns	r2, r2
 8001530:	4013      	ands	r3, r2
 8001532:	4a20      	ldr	r2, [pc, #128]	; (80015b4 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 8001534:	6013      	str	r3, [r2, #0]
        CurIOVal.u32 |= Segments<<BitPos;
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	6939      	ldr	r1, [r7, #16]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	4313      	orrs	r3, r2
 8001544:	4a1b      	ldr	r2, [pc, #108]	; (80015b4 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 8001546:	6013      	str	r3, [r2, #0]
    for( i=0; i<4 && str[i]!=0; i++){
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	3301      	adds	r3, #1
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	2b03      	cmp	r3, #3
 8001552:	dc17      	bgt.n	8001584 <XNUCLEO53L0A1_SetDisplayString+0x94>
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1ce      	bne.n	80014fe <XNUCLEO53L0A1_SetDisplayString+0xe>
    }
    /* clear unused digit */
    for( ; i<4;i++){
 8001560:	e010      	b.n	8001584 <XNUCLEO53L0A1_SetDisplayString+0x94>
        BitPos=DisplayBitPos[i];
 8001562:	4a13      	ldr	r2, [pc, #76]	; (80015b0 <XNUCLEO53L0A1_SetDisplayString+0xc0>)
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156a:	60fb      	str	r3, [r7, #12]
        CurIOVal.u32 |=0x7F<<BitPos;
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	217f      	movs	r1, #127	; 0x7f
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	fa01 f202 	lsl.w	r2, r1, r2
 8001578:	4313      	orrs	r3, r2
 800157a:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 800157c:	6013      	str	r3, [r2, #0]
    for( ; i<4;i++){
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3301      	adds	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	2b03      	cmp	r3, #3
 8001588:	ddeb      	ble.n	8001562 <XNUCLEO53L0A1_SetDisplayString+0x72>
    }
    status = _ExpandersSetAllIO();
 800158a:	f7ff ff37 	bl	80013fc <_ExpandersSetAllIO>
 800158e:	60b8      	str	r0, [r7, #8]
    if( status ){
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d005      	beq.n	80015a2 <XNUCLEO53L0A1_SetDisplayString+0xb2>
        XNUCLEO53L0A1_ErrLog("Set i/o");
 8001596:	f240 320f 	movw	r2, #783	; 0x30f
 800159a:	4907      	ldr	r1, [pc, #28]	; (80015b8 <XNUCLEO53L0A1_SetDisplayString+0xc8>)
 800159c:	4807      	ldr	r0, [pc, #28]	; (80015bc <XNUCLEO53L0A1_SetDisplayString+0xcc>)
 800159e:	f000 f85b 	bl	8001658 <uart_printf>
    }
    return status;
 80015a2:	68bb      	ldr	r3, [r7, #8]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	0800bbc0 	.word	0x0800bbc0
 80015b0:	200004fc 	.word	0x200004fc
 80015b4:	20000854 	.word	0x20000854
 80015b8:	0800bd3c 	.word	0x0800bd3c
 80015bc:	0800bcc0 	.word	0x0800bcc0

080015c0 <HAL_UART_TxCpltCallback>:

static volatile int InUsed=0;
static char uart_buffer[256];
static uint32_t UartErrCnt=0;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
    // TODO check if any more to send and do it
    InUsed=0;
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <HAL_UART_TxCpltCallback+0x1c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	20000858 	.word	0x20000858

080015e0 <uart_vprintf>:

int uart_vprintf(const char *msg, va_list ap){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
    int n;
    int status;
    while( InUsed ){
 80015ea:	e001      	b.n	80015f0 <uart_vprintf+0x10>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 80015ec:	bf30      	wfi
}
 80015ee:	bf00      	nop
 80015f0:	4b15      	ldr	r3, [pc, #84]	; (8001648 <uart_vprintf+0x68>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1f9      	bne.n	80015ec <uart_vprintf+0xc>
           //
        __WFI();
    }
    InUsed|=1;
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <uart_vprintf+0x68>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	4a11      	ldr	r2, [pc, #68]	; (8001648 <uart_vprintf+0x68>)
 8001602:	6013      	str	r3, [r2, #0]
    n=vsnprintf(uart_buffer, sizeof(uart_buffer),  msg, ap);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	f44f 7180 	mov.w	r1, #256	; 0x100
 800160c:	480f      	ldr	r0, [pc, #60]	; (800164c <uart_vprintf+0x6c>)
 800160e:	f009 fd07 	bl	800b020 <vsniprintf>
 8001612:	60f8      	str	r0, [r7, #12]
    status = HAL_UART_Transmit_DMA(&huart2, (uint8_t*)uart_buffer, n );
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	b29b      	uxth	r3, r3
 8001618:	461a      	mov	r2, r3
 800161a:	490c      	ldr	r1, [pc, #48]	; (800164c <uart_vprintf+0x6c>)
 800161c:	480c      	ldr	r0, [pc, #48]	; (8001650 <uart_vprintf+0x70>)
 800161e:	f008 ff21 	bl	800a464 <HAL_UART_Transmit_DMA>
 8001622:	4603      	mov	r3, r0
 8001624:	60bb      	str	r3, [r7, #8]
    if( status ){
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d007      	beq.n	800163c <uart_vprintf+0x5c>
        UartErrCnt++;
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <uart_vprintf+0x74>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	3301      	adds	r3, #1
 8001632:	4a08      	ldr	r2, [pc, #32]	; (8001654 <uart_vprintf+0x74>)
 8001634:	6013      	str	r3, [r2, #0]
        InUsed=0;
 8001636:	4b04      	ldr	r3, [pc, #16]	; (8001648 <uart_vprintf+0x68>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
    }
    return n;
 800163c:	68fb      	ldr	r3, [r7, #12]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000858 	.word	0x20000858
 800164c:	2000085c 	.word	0x2000085c
 8001650:	20000a84 	.word	0x20000a84
 8001654:	2000095c 	.word	0x2000095c

08001658 <uart_printf>:

int uart_printf(const char *msg, ...){
 8001658:	b40f      	push	{r0, r1, r2, r3}
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
	va_list ap;
    int n;
    while( InUsed ){
 8001660:	e001      	b.n	8001666 <uart_printf+0xe>
  __ASM volatile ("wfi");
 8001662:	bf30      	wfi
}
 8001664:	bf00      	nop
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <uart_printf+0x38>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f9      	bne.n	8001662 <uart_printf+0xa>
        //
        __WFI();
    }
    va_start(ap, msg);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	603b      	str	r3, [r7, #0]
    n=uart_vprintf(msg, ap);
 8001674:	6839      	ldr	r1, [r7, #0]
 8001676:	6938      	ldr	r0, [r7, #16]
 8001678:	f7ff ffb2 	bl	80015e0 <uart_vprintf>
 800167c:	6078      	str	r0, [r7, #4]
    va_end(ap);
    return n;
 800167e:	687b      	ldr	r3, [r7, #4]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800168a:	b004      	add	sp, #16
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000858 	.word	0x20000858

08001694 <VL53L0A1_EXTI_Callback>:
 * @param DevNo     DeviceNumber  (for shared interrupt is  center always)
 * @param GPIO_Pin  EXTI Gpio Pin associated to the interrupt
 *
 * @ingroup   MSP_implement_common
 */
__weak void VL53L0A1_EXTI_Callback(int DevNo, int GPIO_Pin){
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
    /**
     * built-in Does nothing redefined your's
     */
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <DMA1_Stream6_IRQHandler>:
#if VL53L0A1_UART_DMA_TX
/**
* @brief This function handles DMA1 stream6 global interrupt.
*/
void DMA1_Stream6_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <DMA1_Stream6_IRQHandler+0x10>)
 80016b2:	f006 fc1f 	bl	8007ef4 <HAL_DMA_IRQHandler>
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000a24 	.word	0x20000a24

080016c0 <XNUCLEO53L0A1_DMA_Init>:
#endif  //VL53L0A1_UART_DMA_TX


static void XNUCLEO53L0A1_DMA_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __DMA1_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <XNUCLEO53L0A1_DMA_Init+0x3c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <XNUCLEO53L0A1_DMA_Init+0x3c>)
 80016d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <XNUCLEO53L0A1_DMA_Init+0x3c>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
#if  VL53L0A1_UART_DMA_RX
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, VL53L0A1_UART_DMA_TX_IRQ_PRI, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
#endif
#if  VL53L0A1_UART_DMA_TX
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, VL53L0A1_UART_DMA_TX_IRQ_PRI, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2100      	movs	r1, #0
 80016e6:	2011      	movs	r0, #17
 80016e8:	f006 fa95 	bl	8007c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80016ec:	2011      	movs	r0, #17
 80016ee:	f006 faae 	bl	8007c4e <HAL_NVIC_EnableIRQ>
#endif

}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40023800 	.word	0x40023800

08001700 <XNUCLEO53L0A1_USART2_UART_Init>:
/* USART2 init function */

void XNUCLEO53L0A1_USART2_UART_Init(void) {
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0

    XNUCLEO53L0A1_DMA_Init();
 8001704:	f7ff ffdc 	bl	80016c0 <XNUCLEO53L0A1_DMA_Init>

    huart2.Instance = USART2;
 8001708:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 800170a:	4a0f      	ldr	r2, [pc, #60]	; (8001748 <XNUCLEO53L0A1_USART2_UART_Init+0x48>)
 800170c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = USART2_BAUD_RATE;
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 8001710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001714:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 800172a:	220c      	movs	r2, #12
 800172c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172e:	4b05      	ldr	r3, [pc, #20]	; (8001744 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]
    HAL_UART_Init(&huart2);
 800173a:	4802      	ldr	r0, [pc, #8]	; (8001744 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 800173c:	f008 fe45 	bl	800a3ca <HAL_UART_Init>


}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000a84 	.word	0x20000a84
 8001748:	40004400 	.word	0x40004400

0800174c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a2a      	ldr	r2, [pc, #168]	; (8001804 <HAL_UART_MspInit+0xb8>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d14e      	bne.n	80017fc <HAL_UART_MspInit+0xb0>
  {
    /* Peripheral clock enable */
    __USART2_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	4b29      	ldr	r3, [pc, #164]	; (8001808 <HAL_UART_MspInit+0xbc>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	4a28      	ldr	r2, [pc, #160]	; (8001808 <HAL_UART_MspInit+0xbc>)
 8001768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800176c:	6413      	str	r3, [r2, #64]	; 0x40
 800176e:	4b26      	ldr	r3, [pc, #152]	; (8001808 <HAL_UART_MspInit+0xbc>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800177a:	230c      	movs	r3, #12
 800177c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177e:	2302      	movs	r3, #2
 8001780:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800178a:	2307      	movs	r3, #7
 800178c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178e:	f107 030c 	add.w	r3, r7, #12
 8001792:	4619      	mov	r1, r3
 8001794:	481d      	ldr	r0, [pc, #116]	; (800180c <HAL_UART_MspInit+0xc0>)
 8001796:	f006 fe2b 	bl	80083f0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
#if VL53L0A1_UART_DMA_TX
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800179a:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <HAL_UART_MspInit+0xc4>)
 800179c:	4a1d      	ldr	r2, [pc, #116]	; (8001814 <HAL_UART_MspInit+0xc8>)
 800179e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <HAL_UART_MspInit+0xc4>)
 80017a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017a6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017a8:	4b19      	ldr	r3, [pc, #100]	; (8001810 <HAL_UART_MspInit+0xc4>)
 80017aa:	2240      	movs	r2, #64	; 0x40
 80017ac:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <HAL_UART_MspInit+0xc4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017b4:	4b16      	ldr	r3, [pc, #88]	; (8001810 <HAL_UART_MspInit+0xc4>)
 80017b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ba:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <HAL_UART_MspInit+0xc4>)
 80017be:	2200      	movs	r2, #0
 80017c0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <HAL_UART_MspInit+0xc4>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HAL_UART_MspInit+0xc4>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <HAL_UART_MspInit+0xc4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017d4:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <HAL_UART_MspInit+0xc4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_DMA_Init(&hdma_usart2_tx);
 80017da:	480d      	ldr	r0, [pc, #52]	; (8001810 <HAL_UART_MspInit+0xc4>)
 80017dc:	f006 fa5e 	bl	8007c9c <HAL_DMA_Init>

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <HAL_UART_MspInit+0xc4>)
 80017e4:	631a      	str	r2, [r3, #48]	; 0x30
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <HAL_UART_MspInit+0xc4>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    HAL_DMA_Init(&hdma_usart2_rx);

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
#endif
    HAL_NVIC_SetPriority(USART2_IRQn, VL53L0A1_UART_IRQ_PRI, 0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2100      	movs	r1, #0
 80017f0:	2026      	movs	r0, #38	; 0x26
 80017f2:	f006 fa10 	bl	8007c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017f6:	2026      	movs	r0, #38	; 0x26
 80017f8:	f006 fa29 	bl	8007c4e <HAL_NVIC_EnableIRQ>
  }
}
 80017fc:	bf00      	nop
 80017fe:	3720      	adds	r7, #32
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40004400 	.word	0x40004400
 8001808:	40023800 	.word	0x40023800
 800180c:	40020000 	.word	0x40020000
 8001810:	20000a24 	.word	0x20000a24
 8001814:	400260a0 	.word	0x400260a0

08001818 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <USART2_IRQHandler+0x10>)
 800181e:	f008 fe8d 	bl	800a53c <HAL_UART_IRQHandler>
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000a84 	.word	0x20000a84

0800182c <HAL_GPIO_EXTI_Callback>:

/**
 * HAl Callback for EXTI
 * @param GPIO_Pin The GPIO pin EXTI was invoked
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	80fb      	strh	r3, [r7, #6]
#if VL53L0A1_GPIO1_SHARED
    if( GPIO_Pin == VL53L0A1_GPIO1_C_GPIO_PIN ){
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_CENTER, GPIO_Pin);
    }
#else
    switch(  GPIO_Pin  ){
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800183c:	d013      	beq.n	8001866 <HAL_GPIO_EXTI_Callback+0x3a>
 800183e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001842:	dc16      	bgt.n	8001872 <HAL_GPIO_EXTI_Callback+0x46>
 8001844:	2b10      	cmp	r3, #16
 8001846:	d002      	beq.n	800184e <HAL_GPIO_EXTI_Callback+0x22>
 8001848:	2b80      	cmp	r3, #128	; 0x80
 800184a:	d006      	beq.n	800185a <HAL_GPIO_EXTI_Callback+0x2e>
    case VL53L0A1_GPIO1_R_GPIO_PIN :
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_RIGHT, GPIO_Pin);
        break;

    default:
        break;
 800184c:	e011      	b.n	8001872 <HAL_GPIO_EXTI_Callback+0x46>
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_CENTER, GPIO_Pin);
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	4619      	mov	r1, r3
 8001852:	2001      	movs	r0, #1
 8001854:	f7ff ff1e 	bl	8001694 <VL53L0A1_EXTI_Callback>
        break;
 8001858:	e00c      	b.n	8001874 <HAL_GPIO_EXTI_Callback+0x48>
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_LEFT, GPIO_Pin);
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	4619      	mov	r1, r3
 800185e:	2000      	movs	r0, #0
 8001860:	f7ff ff18 	bl	8001694 <VL53L0A1_EXTI_Callback>
        break;
 8001864:	e006      	b.n	8001874 <HAL_GPIO_EXTI_Callback+0x48>
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_RIGHT, GPIO_Pin);
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	4619      	mov	r1, r3
 800186a:	2002      	movs	r0, #2
 800186c:	f7ff ff12 	bl	8001694 <VL53L0A1_EXTI_Callback>
        break;
 8001870:	e000      	b.n	8001874 <HAL_GPIO_EXTI_Callback+0x48>
        break;
 8001872:	bf00      	nop
    }
#endif
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <EXTI4_IRQHandler>:
 * interrupt Handler for EXTI lines 4
 *
 * @note is only implemented if needed by configuration
 */
void EXTI4_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
   HAL_GPIO_EXTI_IRQHandler(VL53L0A1_EXTI4_USE_PIN);
 8001880:	2010      	movs	r0, #16
 8001882:	f006 ff6b 	bl	800875c <HAL_GPIO_EXTI_IRQHandler>
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}

0800188a <EXTI9_5_IRQHandler>:
 * @warning this handler assume ther's no shared pin on the EXTI
 * For share interrupt  end user must fix this code to find the originating pins
 * and dispatch accordingly see __HAL_GPIO_EXTI_GET_FLAG  etc ..
 */
void EXTI9_5_IRQHandler(void)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	af00      	add	r7, sp, #0
   HAL_GPIO_EXTI_IRQHandler(VL53L0A1_EXTI9_5_USE_PIN);
 800188e:	2080      	movs	r0, #128	; 0x80
 8001890:	f006 ff64 	bl	800875c <HAL_GPIO_EXTI_IRQHandler>
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}

08001898 <EXTI15_10_IRQHandler>:
 * @note is only implemented if needed by configuration
 * @warning this handler assume ther's no shared pin on the EXTI
 * For share interrupt  end user must fix this code to find the originating pins
 * and dispatch accordingly see __HAL_GPIO_EXTI_GET_FLAG  etc ..
 */
void EXTI15_10_IRQHandler(void){
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(VL53L0A1_EXTI15_10_USE_PIN);
 800189c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80018a0:	f006 ff5c 	bl	800875c <HAL_GPIO_EXTI_IRQHandler>
}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	330a      	adds	r3, #10
 80018b8:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80018c6:	b299      	uxth	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	4613      	mov	r3, r2
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	f007 f846 	bl	8008964 <HAL_I2C_Master_Transmit>
 80018d8:	4603      	mov	r3, r0
 80018da:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80018dc:	693b      	ldr	r3, [r7, #16]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b088      	sub	sp, #32
 80018ea:	af02      	add	r7, sp, #8
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	330a      	adds	r3, #10
 80018f6:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	b2db      	uxtb	r3, r3
 800190a:	b299      	uxth	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	b29a      	uxth	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	4613      	mov	r3, r2
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	f007 f930 	bl	8008b7c <HAL_I2C_Master_Receive>
 800191c:	4603      	mov	r3, r0
 800191e:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8001920:	693b      	ldr	r3, [r7, #16]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	460b      	mov	r3, r1
 800193a:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800193c:	2300      	movs	r3, #0
 800193e:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	2b3f      	cmp	r3, #63	; 0x3f
 8001944:	d902      	bls.n	800194c <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8001946:	f06f 0303 	mvn.w	r3, #3
 800194a:	e016      	b.n	800197a <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800194c:	4a0d      	ldr	r2, [pc, #52]	; (8001984 <VL53L0X_WriteMulti+0x58>)
 800194e:	7afb      	ldrb	r3, [r7, #11]
 8001950:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	480c      	ldr	r0, [pc, #48]	; (8001988 <VL53L0X_WriteMulti+0x5c>)
 8001958:	f009 faf8 	bl	800af4c <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	3301      	adds	r3, #1
 8001960:	461a      	mov	r2, r3
 8001962:	4908      	ldr	r1, [pc, #32]	; (8001984 <VL53L0X_WriteMulti+0x58>)
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f7ff ff9f 	bl	80018a8 <_I2CWrite>
 800196a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001972:	23ec      	movs	r3, #236	; 0xec
 8001974:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8001976:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000ac4 	.word	0x20000ac4
 8001988:	20000ac5 	.word	0x20000ac5

0800198c <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	460b      	mov	r3, r1
 800199a:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800199c:	2300      	movs	r3, #0
 800199e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80019a0:	f107 030b 	add.w	r3, r7, #11
 80019a4:	2201      	movs	r2, #1
 80019a6:	4619      	mov	r1, r3
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f7ff ff7d 	bl	80018a8 <_I2CWrite>
 80019ae:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80019b6:	23ec      	movs	r3, #236	; 0xec
 80019b8:	75fb      	strb	r3, [r7, #23]
        goto done;
 80019ba:	e00c      	b.n	80019d6 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f7ff ff90 	bl	80018e6 <_I2CRead>
 80019c6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d002      	beq.n	80019d4 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80019ce:	23ec      	movs	r3, #236	; 0xec
 80019d0:	75fb      	strb	r3, [r7, #23]
 80019d2:	e000      	b.n	80019d6 <VL53L0X_ReadMulti+0x4a>
    }
done:
 80019d4:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80019d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	70fb      	strb	r3, [r7, #3]
 80019f0:	4613      	mov	r3, r2
 80019f2:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80019f8:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <VL53L0X_WrByte+0x44>)
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 80019fe:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <VL53L0X_WrByte+0x44>)
 8001a00:	78bb      	ldrb	r3, [r7, #2]
 8001a02:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8001a04:	2202      	movs	r2, #2
 8001a06:	4908      	ldr	r1, [pc, #32]	; (8001a28 <VL53L0X_WrByte+0x44>)
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ff4d 	bl	80018a8 <_I2CWrite>
 8001a0e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001a16:	23ec      	movs	r3, #236	; 0xec
 8001a18:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8001a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000ac4 	.word	0x20000ac4

08001a2c <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	70fb      	strb	r3, [r7, #3]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8001a40:	4a0e      	ldr	r2, [pc, #56]	; (8001a7c <VL53L0X_WrWord+0x50>)
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8001a46:	883b      	ldrh	r3, [r7, #0]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <VL53L0X_WrWord+0x50>)
 8001a50:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8001a52:	883b      	ldrh	r3, [r7, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <VL53L0X_WrWord+0x50>)
 8001a58:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	4907      	ldr	r1, [pc, #28]	; (8001a7c <VL53L0X_WrWord+0x50>)
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ff22 	bl	80018a8 <_I2CWrite>
 8001a64:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001a6c:	23ec      	movs	r3, #236	; 0xec
 8001a6e:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8001a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000ac4 	.word	0x20000ac4

08001a80 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	4608      	mov	r0, r1
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4603      	mov	r3, r0
 8001a90:	70fb      	strb	r3, [r7, #3]
 8001a92:	460b      	mov	r3, r1
 8001a94:	70bb      	strb	r3, [r7, #2]
 8001a96:	4613      	mov	r3, r2
 8001a98:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8001a9e:	f107 020e 	add.w	r2, r7, #14
 8001aa2:	78fb      	ldrb	r3, [r7, #3]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f81e 	bl	8001ae8 <VL53L0X_RdByte>
 8001aac:	4603      	mov	r3, r0
 8001aae:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8001ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d110      	bne.n	8001ada <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8001ab8:	7bba      	ldrb	r2, [r7, #14]
 8001aba:	78bb      	ldrb	r3, [r7, #2]
 8001abc:	4013      	ands	r3, r2
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	787b      	ldrb	r3, [r7, #1]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8001ac8:	7bba      	ldrb	r2, [r7, #14]
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	4619      	mov	r1, r3
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ff88 	bl	80019e4 <VL53L0X_WrByte>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	73fb      	strb	r3, [r7, #15]
 8001ad8:	e000      	b.n	8001adc <VL53L0X_UpdateByte+0x5c>
        goto done;
 8001ada:	bf00      	nop
done:
    return Status;
 8001adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	460b      	mov	r3, r1
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8001afa:	f107 030b 	add.w	r3, r7, #11
 8001afe:	2201      	movs	r2, #1
 8001b00:	4619      	mov	r1, r3
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f7ff fed0 	bl	80018a8 <_I2CWrite>
 8001b08:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d002      	beq.n	8001b16 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001b10:	23ec      	movs	r3, #236	; 0xec
 8001b12:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001b14:	e00c      	b.n	8001b30 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8001b16:	2201      	movs	r2, #1
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f7ff fee3 	bl	80018e6 <_I2CRead>
 8001b20:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d002      	beq.n	8001b2e <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001b28:	23ec      	movs	r3, #236	; 0xec
 8001b2a:	75fb      	strb	r3, [r7, #23]
 8001b2c:	e000      	b.n	8001b30 <VL53L0X_RdByte+0x48>
    }
done:
 8001b2e:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8001b30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	460b      	mov	r3, r1
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8001b4e:	f107 030b 	add.w	r3, r7, #11
 8001b52:	2201      	movs	r2, #1
 8001b54:	4619      	mov	r1, r3
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f7ff fea6 	bl	80018a8 <_I2CWrite>
 8001b5c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001b64:	23ec      	movs	r3, #236	; 0xec
 8001b66:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001b68:	e017      	b.n	8001b9a <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	490e      	ldr	r1, [pc, #56]	; (8001ba8 <VL53L0X_RdWord+0x6c>)
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f7ff feb9 	bl	80018e6 <_I2CRead>
 8001b74:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001b7c:	23ec      	movs	r3, #236	; 0xec
 8001b7e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001b80:	e00b      	b.n	8001b9a <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <VL53L0X_RdWord+0x6c>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <VL53L0X_RdWord+0x6c>)
 8001b8e:	785b      	ldrb	r3, [r3, #1]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	4413      	add	r3, r2
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8001b9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000ac4 	.word	0x20000ac4

08001bac <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8001bbe:	f107 030b 	add.w	r3, r7, #11
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f7ff fe6e 	bl	80018a8 <_I2CWrite>
 8001bcc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001bd4:	23ec      	movs	r3, #236	; 0xec
 8001bd6:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001bd8:	e01b      	b.n	8001c12 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8001bda:	2204      	movs	r2, #4
 8001bdc:	4910      	ldr	r1, [pc, #64]	; (8001c20 <VL53L0X_RdDWord+0x74>)
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f7ff fe81 	bl	80018e6 <_I2CRead>
 8001be4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001bec:	23ec      	movs	r3, #236	; 0xec
 8001bee:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001bf0:	e00f      	b.n	8001c12 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <VL53L0X_RdDWord+0x74>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	061a      	lsls	r2, r3, #24
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <VL53L0X_RdDWord+0x74>)
 8001bfa:	785b      	ldrb	r3, [r3, #1]
 8001bfc:	041b      	lsls	r3, r3, #16
 8001bfe:	441a      	add	r2, r3
 8001c00:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <VL53L0X_RdDWord+0x74>)
 8001c02:	789b      	ldrb	r3, [r3, #2]
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	4413      	add	r3, r2
 8001c08:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <VL53L0X_RdDWord+0x74>)
 8001c0a:	78d2      	ldrb	r2, [r2, #3]
 8001c0c:	441a      	add	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8001c12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000ac4 	.word	0x20000ac4

08001c24 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8001c30:	2002      	movs	r0, #2
 8001c32:	f005 ff01 	bl	8007a38 <HAL_Delay>
    return status;
 8001c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b089      	sub	sp, #36	; 0x24
 8001c48:	af04      	add	r7, sp, #16
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 8001c52:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x6c>)
 8001c54:	681c      	ldr	r4, [r3, #0]
 8001c56:	f005 fee3 	bl	8007a20 <HAL_GetTick>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x70>)
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	9200      	str	r2, [sp, #0]
 8001c64:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x74>)
 8001c66:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001c6a:	4621      	mov	r1, r4
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	f005 fe29 	bl	80078c4 <trace_print_module_function>

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8001c72:	6839      	ldr	r1, [r7, #0]
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f002 fa67 	bl	8004148 <VL53L0X_get_offset_calibration_data_micro_meter>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x6c>)
 8001c80:	681c      	ldr	r4, [r3, #0]
 8001c82:	f005 fecd 	bl	8007a20 <HAL_GetTick>
 8001c86:	4603      	mov	r3, r0
 8001c88:	461a      	mov	r2, r3
 8001c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c8e:	9302      	str	r3, [sp, #8]
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x70>)
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	9200      	str	r2, [sp, #0]
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x78>)
 8001c98:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001c9c:	4621      	mov	r1, r4
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f005 fe10 	bl	80078c4 <trace_print_module_function>
	return Status;
 8001ca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd90      	pop	{r4, r7, pc}
 8001cb0:	200007c8 	.word	0x200007c8
 8001cb4:	0800bf00 	.word	0x0800bf00
 8001cb8:	0800bd5c 	.word	0x0800bd5c
 8001cbc:	0800bd70 	.word	0x0800bd70

08001cc0 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8001cc0:	b590      	push	{r4, r7, lr}
 8001cc2:	b089      	sub	sp, #36	; 0x24
 8001cc4:	af04      	add	r7, sp, #16
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 8001cd0:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <VL53L0X_SetDeviceAddress+0x78>)
 8001cd2:	681c      	ldr	r4, [r3, #0]
 8001cd4:	f005 fea4 	bl	8007a20 <HAL_GetTick>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <VL53L0X_SetDeviceAddress+0x7c>)
 8001cde:	9301      	str	r3, [sp, #4]
 8001ce0:	9200      	str	r2, [sp, #0]
 8001ce2:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <VL53L0X_SetDeviceAddress+0x80>)
 8001ce4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001ce8:	4621      	mov	r1, r4
 8001cea:	2001      	movs	r0, #1
 8001cec:	f005 fdea 	bl	80078c4 <trace_print_module_function>

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	085b      	lsrs	r3, r3, #1
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	218a      	movs	r1, #138	; 0x8a
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff fe72 	bl	80019e4 <VL53L0X_WrByte>
 8001d00:	4603      	mov	r3, r0
 8001d02:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <VL53L0X_SetDeviceAddress+0x78>)
 8001d06:	681c      	ldr	r4, [r3, #0]
 8001d08:	f005 fe8a 	bl	8007a20 <HAL_GetTick>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	461a      	mov	r2, r3
 8001d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d14:	9302      	str	r3, [sp, #8]
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <VL53L0X_SetDeviceAddress+0x7c>)
 8001d18:	9301      	str	r3, [sp, #4]
 8001d1a:	9200      	str	r2, [sp, #0]
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <VL53L0X_SetDeviceAddress+0x84>)
 8001d1e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001d22:	4621      	mov	r1, r4
 8001d24:	2001      	movs	r0, #1
 8001d26:	f005 fdcd 	bl	80078c4 <trace_print_module_function>
	return Status;
 8001d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd90      	pop	{r4, r7, pc}
 8001d36:	bf00      	nop
 8001d38:	200007c8 	.word	0x200007c8
 8001d3c:	0800bfcc 	.word	0x0800bfcc
 8001d40:	0800bd5c 	.word	0x0800bd5c
 8001d44:	0800bd70 	.word	0x0800bd70

08001d48 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8001d48:	b5b0      	push	{r4, r5, r7, lr}
 8001d4a:	b09a      	sub	sp, #104	; 0x68
 8001d4c:	af04      	add	r7, sp, #16
 8001d4e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	VL53L0X_DeviceParameters_t CurrentParameters;
	int i;
	uint8_t StopVariable;

	LOG_FUNCTION_START("");
 8001d56:	4bbd      	ldr	r3, [pc, #756]	; (800204c <VL53L0X_DataInit+0x304>)
 8001d58:	681c      	ldr	r4, [r3, #0]
 8001d5a:	f005 fe61 	bl	8007a20 <HAL_GetTick>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
 8001d62:	4bbb      	ldr	r3, [pc, #748]	; (8002050 <VL53L0X_DataInit+0x308>)
 8001d64:	9301      	str	r3, [sp, #4]
 8001d66:	9200      	str	r2, [sp, #0]
 8001d68:	4bba      	ldr	r3, [pc, #744]	; (8002054 <VL53L0X_DataInit+0x30c>)
 8001d6a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001d6e:	4621      	mov	r1, r4
 8001d70:	2001      	movs	r0, #1
 8001d72:	f005 fda7 	bl	80078c4 <trace_print_module_function>
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8001d76:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d107      	bne.n	8001d8e <VL53L0X_DataInit+0x46>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2188      	movs	r1, #136	; 0x88
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff fe2e 	bl	80019e4 <VL53L0X_WrByte>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d9c:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001da6:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4aaa      	ldr	r2, [pc, #680]	; (8002058 <VL53L0X_DataInit+0x310>)
 8001dae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4aa9      	ldr	r2, [pc, #676]	; (800205c <VL53L0X_DataInit+0x314>)
 8001db6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8001dc0:	f107 0310 	add.w	r3, r7, #16
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 faf8 	bl	80023bc <VL53L0X_GetDeviceParameters>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8001dd2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d112      	bne.n	8001e00 <VL53L0X_DataInit+0xb8>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8001dde:	2300      	movs	r3, #0
 8001de0:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f103 0410 	add.w	r4, r3, #16
 8001de8:	f107 0510 	add.w	r5, r7, #16
 8001dec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001dfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2264      	movs	r2, #100	; 0x64
 8001e04:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001e0e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001e18:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8001e22:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8001e2e:	2201      	movs	r2, #1
 8001e30:	2180      	movs	r1, #128	; 0x80
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff fdd6 	bl	80019e4 <VL53L0X_WrByte>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e40:	4313      	orrs	r3, r2
 8001e42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001e46:	2201      	movs	r2, #1
 8001e48:	21ff      	movs	r1, #255	; 0xff
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff fdca 	bl	80019e4 <VL53L0X_WrByte>
 8001e50:	4603      	mov	r3, r0
 8001e52:	461a      	mov	r2, r3
 8001e54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff fdbe 	bl	80019e4 <VL53L0X_WrByte>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e70:	4313      	orrs	r3, r2
 8001e72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8001e76:	f107 030f 	add.w	r3, r7, #15
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2191      	movs	r1, #145	; 0x91
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff fe32 	bl	8001ae8 <VL53L0X_RdByte>
 8001e84:	4603      	mov	r3, r0
 8001e86:	461a      	mov	r2, r3
 8001e88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8001e92:	7bfa      	ldrb	r2, [r7, #15]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff fda0 	bl	80019e4 <VL53L0X_WrByte>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001eac:	4313      	orrs	r3, r2
 8001eae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	21ff      	movs	r1, #255	; 0xff
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff fd94 	bl	80019e4 <VL53L0X_WrByte>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2180      	movs	r1, #128	; 0x80
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff fd88 	bl	80019e4 <VL53L0X_WrByte>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001edc:	4313      	orrs	r3, r2
 8001ede:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	653b      	str	r3, [r7, #80]	; 0x50
 8001ee6:	e014      	b.n	8001f12 <VL53L0X_DataInit+0x1ca>
		if (Status == VL53L0X_ERROR_NONE)
 8001ee8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d114      	bne.n	8001f1a <VL53L0X_DataInit+0x1d2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8001ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 ffc3 	bl	8002e84 <VL53L0X_SetLimitCheckEnable>
 8001efe:	4603      	mov	r3, r0
 8001f00:	461a      	mov	r2, r3
 8001f02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001f06:	4313      	orrs	r3, r2
 8001f08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f0e:	3301      	adds	r3, #1
 8001f10:	653b      	str	r3, [r7, #80]	; 0x50
 8001f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f14:	2b05      	cmp	r3, #5
 8001f16:	dde7      	ble.n	8001ee8 <VL53L0X_DataInit+0x1a0>
 8001f18:	e000      	b.n	8001f1c <VL53L0X_DataInit+0x1d4>
		else
			break;
 8001f1a:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8001f1c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d107      	bne.n	8001f34 <VL53L0X_DataInit+0x1ec>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001f24:	2200      	movs	r2, #0
 8001f26:	2102      	movs	r1, #2
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 ffab 	bl	8002e84 <VL53L0X_SetLimitCheckEnable>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8001f34:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d107      	bne.n	8001f4c <VL53L0X_DataInit+0x204>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2103      	movs	r1, #3
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 ff9f 	bl	8002e84 <VL53L0X_SetLimitCheckEnable>
 8001f46:	4603      	mov	r3, r0
 8001f48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8001f4c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d107      	bne.n	8001f64 <VL53L0X_DataInit+0x21c>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001f54:	2200      	movs	r2, #0
 8001f56:	2104      	movs	r1, #4
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 ff93 	bl	8002e84 <VL53L0X_SetLimitCheckEnable>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8001f64:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d107      	bne.n	8001f7c <VL53L0X_DataInit+0x234>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2105      	movs	r1, #5
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 ff87 	bl	8002e84 <VL53L0X_SetLimitCheckEnable>
 8001f76:	4603      	mov	r3, r0
 8001f78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8001f7c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d108      	bne.n	8001f96 <VL53L0X_DataInit+0x24e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001f84:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8001f88:	2100      	movs	r1, #0
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f001 f87e 	bl	800308c <VL53L0X_SetLimitCheckValue>
 8001f90:	4603      	mov	r3, r0
 8001f92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001f96:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d108      	bne.n	8001fb0 <VL53L0X_DataInit+0x268>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001f9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f001 f871 	bl	800308c <VL53L0X_SetLimitCheckValue>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001fb0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d108      	bne.n	8001fca <VL53L0X_DataInit+0x282>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001fb8:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f001 f864 	bl	800308c <VL53L0X_SetLimitCheckValue>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001fca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d107      	bne.n	8001fe2 <VL53L0X_DataInit+0x29a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2103      	movs	r1, #3
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f001 f858 	bl	800308c <VL53L0X_SetLimitCheckValue>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001fe2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10f      	bne.n	800200a <VL53L0X_DataInit+0x2c2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	22ff      	movs	r2, #255	; 0xff
 8001fee:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001ff2:	22ff      	movs	r2, #255	; 0xff
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff fcf4 	bl	80019e4 <VL53L0X_WrByte>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800200a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800200e:	2b00      	cmp	r3, #0
 8002010:	d103      	bne.n	800201a <VL53L0X_DataInit+0x2d2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <VL53L0X_DataInit+0x304>)
 800201c:	681c      	ldr	r4, [r3, #0]
 800201e:	f005 fcff 	bl	8007a20 <HAL_GetTick>
 8002022:	4603      	mov	r3, r0
 8002024:	461a      	mov	r2, r3
 8002026:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800202a:	9302      	str	r3, [sp, #8]
 800202c:	4b08      	ldr	r3, [pc, #32]	; (8002050 <VL53L0X_DataInit+0x308>)
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	9200      	str	r2, [sp, #0]
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <VL53L0X_DataInit+0x318>)
 8002034:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002038:	4621      	mov	r1, r4
 800203a:	2001      	movs	r0, #1
 800203c:	f005 fc42 	bl	80078c4 <trace_print_module_function>
	return Status;
 8002040:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8002044:	4618      	mov	r0, r3
 8002046:	3758      	adds	r7, #88	; 0x58
 8002048:	46bd      	mov	sp, r7
 800204a:	bdb0      	pop	{r4, r5, r7, pc}
 800204c:	200007c8 	.word	0x200007c8
 8002050:	0800bfe8 	.word	0x0800bfe8
 8002054:	0800bd5c 	.word	0x0800bd5c
 8002058:	00016b85 	.word	0x00016b85
 800205c:	000970a4 	.word	0x000970a4
 8002060:	0800bd70 	.word	0x0800bd70

08002064 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8002064:	b5b0      	push	{r4, r5, r7, lr}
 8002066:	b0a0      	sub	sp, #128	; 0x80
 8002068:	af04      	add	r7, sp, #16
 800206a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800206c:	2300      	movs	r3, #0
 800206e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8002072:	f107 031c 	add.w	r3, r7, #28
 8002076:	2240      	movs	r2, #64	; 0x40
 8002078:	2100      	movs	r1, #0
 800207a:	4618      	mov	r0, r3
 800207c:	f008 ff74 	bl	800af68 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");
 80020a0:	4bc1      	ldr	r3, [pc, #772]	; (80023a8 <VL53L0X_StaticInit+0x344>)
 80020a2:	681c      	ldr	r4, [r3, #0]
 80020a4:	f005 fcbc 	bl	8007a20 <HAL_GetTick>
 80020a8:	4603      	mov	r3, r0
 80020aa:	461a      	mov	r2, r3
 80020ac:	4bbf      	ldr	r3, [pc, #764]	; (80023ac <VL53L0X_StaticInit+0x348>)
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	9200      	str	r2, [sp, #0]
 80020b2:	4bbf      	ldr	r3, [pc, #764]	; (80023b0 <VL53L0X_StaticInit+0x34c>)
 80020b4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80020b8:	4621      	mov	r1, r4
 80020ba:	2001      	movs	r0, #1
 80020bc:	f005 fc02 	bl	80078c4 <trace_print_module_function>

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80020c0:	2101      	movs	r1, #1
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f002 ffee 	bl	80050a4 <VL53L0X_get_info_from_device>
 80020c8:	4603      	mov	r3, r0
 80020ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80020d4:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80020dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80020e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d80d      	bhi.n	8002104 <VL53L0X_StaticInit+0xa0>
 80020e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d102      	bne.n	80020f6 <VL53L0X_StaticInit+0x92>
		((ApertureSpads == 1) && (count > 32)) ||
 80020f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020f2:	2b20      	cmp	r3, #32
 80020f4:	d806      	bhi.n	8002104 <VL53L0X_StaticInit+0xa0>
 80020f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10e      	bne.n	800211c <VL53L0X_StaticInit+0xb8>
		((ApertureSpads == 0) && (count > 12)))
 80020fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002100:	2b0c      	cmp	r3, #12
 8002102:	d90b      	bls.n	800211c <VL53L0X_StaticInit+0xb8>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8002104:	f107 0218 	add.w	r2, r7, #24
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	4619      	mov	r1, r3
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f002 fa16 	bl	8004540 <VL53L0X_perform_ref_spad_management>
 8002114:	4603      	mov	r3, r0
 8002116:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800211a:	e009      	b.n	8002130 <VL53L0X_StaticInit+0xcc>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800211c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002120:	461a      	mov	r2, r3
 8002122:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f002 fc17 	bl	8004958 <VL53L0X_set_reference_spads>
 800212a:	4603      	mov	r3, r0
 800212c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8002130:	4ba0      	ldr	r3, [pc, #640]	; (80023b4 <VL53L0X_StaticInit+0x350>)
 8002132:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8002134:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10f      	bne.n	800215c <VL53L0X_StaticInit+0xf8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8002142:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8002146:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800214a:	2b00      	cmp	r3, #0
 800214c:	d104      	bne.n	8002158 <VL53L0X_StaticInit+0xf4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8002154:	66bb      	str	r3, [r7, #104]	; 0x68
 8002156:	e001      	b.n	800215c <VL53L0X_StaticInit+0xf8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8002158:	4b96      	ldr	r3, [pc, #600]	; (80023b4 <VL53L0X_StaticInit+0x350>)
 800215a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800215c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002160:	2b00      	cmp	r3, #0
 8002162:	d106      	bne.n	8002172 <VL53L0X_StaticInit+0x10e>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8002164:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f004 fc2e 	bl	80069c8 <VL53L0X_load_tuning_settings>
 800216c:	4603      	mov	r3, r0
 800216e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8002172:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10a      	bne.n	8002190 <VL53L0X_StaticInit+0x12c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800217a:	2300      	movs	r3, #0
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	2304      	movs	r3, #4
 8002180:	2200      	movs	r2, #0
 8002182:	2100      	movs	r1, #0
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f001 fd31 	bl	8003bec <VL53L0X_SetGpioConfig>
 800218a:	4603      	mov	r3, r0
 800218c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002190:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002194:	2b00      	cmp	r3, #0
 8002196:	d121      	bne.n	80021dc <VL53L0X_StaticInit+0x178>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002198:	2201      	movs	r2, #1
 800219a:	21ff      	movs	r1, #255	; 0xff
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff fc21 	bl	80019e4 <VL53L0X_WrByte>
 80021a2:	4603      	mov	r3, r0
 80021a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80021a8:	f107 031a 	add.w	r3, r7, #26
 80021ac:	461a      	mov	r2, r3
 80021ae:	2184      	movs	r1, #132	; 0x84
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff fcc3 	bl	8001b3c <VL53L0X_RdWord>
 80021b6:	4603      	mov	r3, r0
 80021b8:	461a      	mov	r2, r3
 80021ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80021be:	4313      	orrs	r3, r2
 80021c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80021c4:	2200      	movs	r2, #0
 80021c6:	21ff      	movs	r1, #255	; 0xff
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff fc0b 	bl	80019e4 <VL53L0X_WrByte>
 80021ce:	4603      	mov	r3, r0
 80021d0:	461a      	mov	r2, r3
 80021d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80021dc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d105      	bne.n	80021f0 <VL53L0X_StaticInit+0x18c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80021e4:	8b7b      	ldrh	r3, [r7, #26]
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	461a      	mov	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 80021f0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d108      	bne.n	800220a <VL53L0X_StaticInit+0x1a6>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80021f8:	f107 031c 	add.w	r3, r7, #28
 80021fc:	4619      	mov	r1, r3
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f8dc 	bl	80023bc <VL53L0X_GetDeviceParameters>
 8002204:	4603      	mov	r3, r0
 8002206:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800220a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800220e:	2b00      	cmp	r3, #0
 8002210:	d110      	bne.n	8002234 <VL53L0X_StaticInit+0x1d0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8002212:	f107 0319 	add.w	r3, r7, #25
 8002216:	4619      	mov	r1, r3
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 fa1d 	bl	8002658 <VL53L0X_GetFractionEnable>
 800221e:	4603      	mov	r3, r0
 8002220:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8002224:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002228:	2b00      	cmp	r3, #0
 800222a:	d103      	bne.n	8002234 <VL53L0X_StaticInit+0x1d0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800222c:	7e7a      	ldrb	r2, [r7, #25]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8002234:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10e      	bne.n	800225a <VL53L0X_StaticInit+0x1f6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f103 0410 	add.w	r4, r3, #16
 8002242:	f107 051c 	add.w	r5, r7, #28
 8002246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800224a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800224c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800224e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002252:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002256:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800225a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800225e:	2b00      	cmp	r3, #0
 8002260:	d111      	bne.n	8002286 <VL53L0X_StaticInit+0x222>
		Status = VL53L0X_RdByte(Dev,
 8002262:	f107 0319 	add.w	r3, r7, #25
 8002266:	461a      	mov	r2, r3
 8002268:	2101      	movs	r1, #1
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff fc3c 	bl	8001ae8 <VL53L0X_RdByte>
 8002270:	4603      	mov	r3, r0
 8002272:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8002276:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800227a:	2b00      	cmp	r3, #0
 800227c:	d103      	bne.n	8002286 <VL53L0X_StaticInit+0x222>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800227e:	7e7a      	ldrb	r2, [r7, #25]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8002286:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800228a:	2b00      	cmp	r3, #0
 800228c:	d107      	bne.n	800229e <VL53L0X_StaticInit+0x23a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800228e:	2200      	movs	r2, #0
 8002290:	2100      	movs	r1, #0
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 fb2c 	bl	80028f0 <VL53L0X_SetSequenceStepEnable>
 8002298:	4603      	mov	r3, r0
 800229a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800229e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d107      	bne.n	80022b6 <VL53L0X_StaticInit+0x252>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80022a6:	2200      	movs	r2, #0
 80022a8:	2102      	movs	r1, #2
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fb20 	bl	80028f0 <VL53L0X_SetSequenceStepEnable>
 80022b0:	4603      	mov	r3, r0
 80022b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80022b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d103      	bne.n	80022c6 <VL53L0X_StaticInit+0x262>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2203      	movs	r2, #3
 80022c2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80022c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <VL53L0X_StaticInit+0x27e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80022ce:	f107 0313 	add.w	r3, r7, #19
 80022d2:	461a      	mov	r2, r3
 80022d4:	2100      	movs	r1, #0
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 fac8 	bl	800286c <VL53L0X_GetVcselPulsePeriod>
 80022dc:	4603      	mov	r3, r0
 80022de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80022e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d103      	bne.n	80022f2 <VL53L0X_StaticInit+0x28e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80022ea:	7cfa      	ldrb	r2, [r7, #19]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80022f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d109      	bne.n	800230e <VL53L0X_StaticInit+0x2aa>
		Status = VL53L0X_GetVcselPulsePeriod(
 80022fa:	f107 0313 	add.w	r3, r7, #19
 80022fe:	461a      	mov	r2, r3
 8002300:	2101      	movs	r1, #1
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 fab2 	bl	800286c <VL53L0X_GetVcselPulsePeriod>
 8002308:	4603      	mov	r3, r0
 800230a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800230e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002312:	2b00      	cmp	r3, #0
 8002314:	d103      	bne.n	800231e <VL53L0X_StaticInit+0x2ba>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002316:	7cfa      	ldrb	r2, [r7, #19]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800231e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002322:	2b00      	cmp	r3, #0
 8002324:	d109      	bne.n	800233a <VL53L0X_StaticInit+0x2d6>
		Status = get_sequence_step_timeout(
 8002326:	f107 030c 	add.w	r3, r7, #12
 800232a:	461a      	mov	r2, r3
 800232c:	2103      	movs	r1, #3
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f003 fc94 	bl	8005c5c <get_sequence_step_timeout>
 8002334:	4603      	mov	r3, r0
 8002336:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800233a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800233e:	2b00      	cmp	r3, #0
 8002340:	d103      	bne.n	800234a <VL53L0X_StaticInit+0x2e6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800234a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800234e:	2b00      	cmp	r3, #0
 8002350:	d109      	bne.n	8002366 <VL53L0X_StaticInit+0x302>
		Status = get_sequence_step_timeout(
 8002352:	f107 030c 	add.w	r3, r7, #12
 8002356:	461a      	mov	r2, r3
 8002358:	2104      	movs	r1, #4
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f003 fc7e 	bl	8005c5c <get_sequence_step_timeout>
 8002360:	4603      	mov	r3, r0
 8002362:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002366:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800236a:	2b00      	cmp	r3, #0
 800236c:	d103      	bne.n	8002376 <VL53L0X_StaticInit+0x312>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			Dev,
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
 8002376:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <VL53L0X_StaticInit+0x344>)
 8002378:	681c      	ldr	r4, [r3, #0]
 800237a:	f005 fb51 	bl	8007a20 <HAL_GetTick>
 800237e:	4603      	mov	r3, r0
 8002380:	461a      	mov	r2, r3
 8002382:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002386:	9302      	str	r3, [sp, #8]
 8002388:	4b08      	ldr	r3, [pc, #32]	; (80023ac <VL53L0X_StaticInit+0x348>)
 800238a:	9301      	str	r3, [sp, #4]
 800238c:	9200      	str	r2, [sp, #0]
 800238e:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <VL53L0X_StaticInit+0x354>)
 8002390:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002394:	4621      	mov	r1, r4
 8002396:	2001      	movs	r0, #1
 8002398:	f005 fa94 	bl	80078c4 <trace_print_module_function>
	return Status;
 800239c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3770      	adds	r7, #112	; 0x70
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bdb0      	pop	{r4, r5, r7, pc}
 80023a8:	200007c8 	.word	0x200007c8
 80023ac:	0800c03c 	.word	0x0800c03c
 80023b0:	0800bd5c 	.word	0x0800bd5c
 80023b4:	2000050c 	.word	0x2000050c
 80023b8:	0800bd70 	.word	0x0800bd70

080023bc <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b089      	sub	sp, #36	; 0x24
 80023c0:	af04      	add	r7, sp, #16
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80023c6:	2300      	movs	r3, #0
 80023c8:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");
 80023ca:	4b56      	ldr	r3, [pc, #344]	; (8002524 <VL53L0X_GetDeviceParameters+0x168>)
 80023cc:	681c      	ldr	r4, [r3, #0]
 80023ce:	f005 fb27 	bl	8007a20 <HAL_GetTick>
 80023d2:	4603      	mov	r3, r0
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b54      	ldr	r3, [pc, #336]	; (8002528 <VL53L0X_GetDeviceParameters+0x16c>)
 80023d8:	9301      	str	r3, [sp, #4]
 80023da:	9200      	str	r2, [sp, #0]
 80023dc:	4b53      	ldr	r3, [pc, #332]	; (800252c <VL53L0X_GetDeviceParameters+0x170>)
 80023de:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80023e2:	4621      	mov	r1, r4
 80023e4:	2001      	movs	r0, #1
 80023e6:	f005 fa6d 	bl	80078c4 <trace_print_module_function>

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	4619      	mov	r1, r3
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f8f6 	bl	80025e0 <VL53L0X_GetDeviceMode>
 80023f4:	4603      	mov	r3, r0
 80023f6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80023f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d107      	bne.n	8002410 <VL53L0X_GetDeviceParameters+0x54>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	3308      	adds	r3, #8
 8002404:	4619      	mov	r1, r3
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fc40 	bl	8002c8c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800240c:	4603      	mov	r3, r0
 800240e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8002410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d102      	bne.n	800241e <VL53L0X_GetDeviceParameters+0x62>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	2200      	movs	r2, #0
 800241c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800241e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d107      	bne.n	8002436 <VL53L0X_GetDeviceParameters+0x7a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	3310      	adds	r3, #16
 800242a:	4619      	mov	r1, r3
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 fccb 	bl	8002dc8 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8002432:	4603      	mov	r3, r0
 8002434:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8002436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d107      	bne.n	800244e <VL53L0X_GetDeviceParameters+0x92>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	3314      	adds	r3, #20
 8002442:	4619      	mov	r1, r3
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff fbfd 	bl	8001c44 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800244a:	4603      	mov	r3, r0
 800244c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800244e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d134      	bne.n	80024c0 <VL53L0X_GetDeviceParameters+0x104>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002456:	2300      	movs	r3, #0
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	e02a      	b.n	80024b2 <VL53L0X_GetDeviceParameters+0xf6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800245c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d12a      	bne.n	80024ba <VL53L0X_GetDeviceParameters+0xfe>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	b299      	uxth	r1, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	3308      	adds	r3, #8
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	4413      	add	r3, r2
 8002472:	3304      	adds	r3, #4
 8002474:	461a      	mov	r2, r3
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fe94 	bl	80031a4 <VL53L0X_GetLimitCheckValue>
 800247c:	4603      	mov	r3, r0
 800247e:	461a      	mov	r2, r3
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	4313      	orrs	r3, r2
 8002484:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8002486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d117      	bne.n	80024be <VL53L0X_GetDeviceParameters+0x102>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	b299      	uxth	r1, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	3318      	adds	r3, #24
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	4413      	add	r3, r2
 800249a:	461a      	mov	r2, r3
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 fda9 	bl	8002ff4 <VL53L0X_GetLimitCheckEnable>
 80024a2:	4603      	mov	r3, r0
 80024a4:	461a      	mov	r2, r3
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	3301      	adds	r3, #1
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b05      	cmp	r3, #5
 80024b6:	ddd1      	ble.n	800245c <VL53L0X_GetDeviceParameters+0xa0>
 80024b8:	e002      	b.n	80024c0 <VL53L0X_GetDeviceParameters+0x104>
				break;
 80024ba:	bf00      	nop
 80024bc:	e000      	b.n	80024c0 <VL53L0X_GetDeviceParameters+0x104>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80024be:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80024c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d107      	bne.n	80024d8 <VL53L0X_GetDeviceParameters+0x11c>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	333c      	adds	r3, #60	; 0x3c
 80024cc:	4619      	mov	r1, r3
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 ff20 	bl	8003314 <VL53L0X_GetWrapAroundCheckEnable>
 80024d4:	4603      	mov	r3, r0
 80024d6:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80024d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d107      	bne.n	80024f0 <VL53L0X_GetDeviceParameters+0x134>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	3304      	adds	r3, #4
 80024e4:	4619      	mov	r1, r3
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f93e 	bl	8002768 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80024ec:	4603      	mov	r3, r0
 80024ee:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
 80024f0:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <VL53L0X_GetDeviceParameters+0x168>)
 80024f2:	681c      	ldr	r4, [r3, #0]
 80024f4:	f005 fa94 	bl	8007a20 <HAL_GetTick>
 80024f8:	4603      	mov	r3, r0
 80024fa:	461a      	mov	r2, r3
 80024fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002500:	9302      	str	r3, [sp, #8]
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <VL53L0X_GetDeviceParameters+0x16c>)
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	9200      	str	r2, [sp, #0]
 8002508:	4b09      	ldr	r3, [pc, #36]	; (8002530 <VL53L0X_GetDeviceParameters+0x174>)
 800250a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800250e:	4621      	mov	r1, r4
 8002510:	2001      	movs	r0, #1
 8002512:	f005 f9d7 	bl	80078c4 <trace_print_module_function>
	return Status;
 8002516:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	bd90      	pop	{r4, r7, pc}
 8002522:	bf00      	nop
 8002524:	200007c8 	.word	0x200007c8
 8002528:	0800c09c 	.word	0x0800c09c
 800252c:	0800bd5c 	.word	0x0800bd5c
 8002530:	0800bd70 	.word	0x0800bd70

08002534 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8002534:	b590      	push	{r4, r7, lr}
 8002536:	b089      	sub	sp, #36	; 0x24
 8002538:	af04      	add	r7, sp, #16
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002540:	2300      	movs	r3, #0
 8002542:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);
 8002544:	4b21      	ldr	r3, [pc, #132]	; (80025cc <VL53L0X_SetDeviceMode+0x98>)
 8002546:	681c      	ldr	r4, [r3, #0]
 8002548:	f005 fa6a 	bl	8007a20 <HAL_GetTick>
 800254c:	4603      	mov	r3, r0
 800254e:	461a      	mov	r2, r3
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	9302      	str	r3, [sp, #8]
 8002554:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <VL53L0X_SetDeviceMode+0x9c>)
 8002556:	9301      	str	r3, [sp, #4]
 8002558:	9200      	str	r2, [sp, #0]
 800255a:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <VL53L0X_SetDeviceMode+0xa0>)
 800255c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002560:	4621      	mov	r1, r4
 8002562:	2001      	movs	r0, #1
 8002564:	f005 f9ae 	bl	80078c4 <trace_print_module_function>

	switch (DeviceMode) {
 8002568:	78fb      	ldrb	r3, [r7, #3]
 800256a:	2b15      	cmp	r3, #21
 800256c:	bf8c      	ite	hi
 800256e:	2201      	movhi	r2, #1
 8002570:	2200      	movls	r2, #0
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	2a00      	cmp	r2, #0
 8002576:	d10e      	bne.n	8002596 <VL53L0X_SetDeviceMode+0x62>
 8002578:	2201      	movs	r2, #1
 800257a:	409a      	lsls	r2, r3
 800257c:	4b16      	ldr	r3, [pc, #88]	; (80025d8 <VL53L0X_SetDeviceMode+0xa4>)
 800257e:	4013      	ands	r3, r2
 8002580:	2b00      	cmp	r3, #0
 8002582:	bf14      	ite	ne
 8002584:	2301      	movne	r3, #1
 8002586:	2300      	moveq	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <VL53L0X_SetDeviceMode+0x62>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	741a      	strb	r2, [r3, #16]
		break;
 8002594:	e001      	b.n	800259a <VL53L0X_SetDeviceMode+0x66>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8002596:	23f8      	movs	r3, #248	; 0xf8
 8002598:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
 800259a:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <VL53L0X_SetDeviceMode+0x98>)
 800259c:	681c      	ldr	r4, [r3, #0]
 800259e:	f005 fa3f 	bl	8007a20 <HAL_GetTick>
 80025a2:	4603      	mov	r3, r0
 80025a4:	461a      	mov	r2, r3
 80025a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025aa:	9302      	str	r3, [sp, #8]
 80025ac:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <VL53L0X_SetDeviceMode+0x9c>)
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	9200      	str	r2, [sp, #0]
 80025b2:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <VL53L0X_SetDeviceMode+0xa8>)
 80025b4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80025b8:	4621      	mov	r1, r4
 80025ba:	2001      	movs	r0, #1
 80025bc:	f005 f982 	bl	80078c4 <trace_print_module_function>
	return Status;
 80025c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd90      	pop	{r4, r7, pc}
 80025cc:	200007c8 	.word	0x200007c8
 80025d0:	0800c0b8 	.word	0x0800c0b8
 80025d4:	0800bd80 	.word	0x0800bd80
 80025d8:	0030000b 	.word	0x0030000b
 80025dc:	0800bd70 	.word	0x0800bd70

080025e0 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b089      	sub	sp, #36	; 0x24
 80025e4:	af04      	add	r7, sp, #16
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80025ea:	2300      	movs	r3, #0
 80025ec:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 80025ee:	4b16      	ldr	r3, [pc, #88]	; (8002648 <VL53L0X_GetDeviceMode+0x68>)
 80025f0:	681c      	ldr	r4, [r3, #0]
 80025f2:	f005 fa15 	bl	8007a20 <HAL_GetTick>
 80025f6:	4603      	mov	r3, r0
 80025f8:	461a      	mov	r2, r3
 80025fa:	4b14      	ldr	r3, [pc, #80]	; (800264c <VL53L0X_GetDeviceMode+0x6c>)
 80025fc:	9301      	str	r3, [sp, #4]
 80025fe:	9200      	str	r2, [sp, #0]
 8002600:	4b13      	ldr	r3, [pc, #76]	; (8002650 <VL53L0X_GetDeviceMode+0x70>)
 8002602:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002606:	4621      	mov	r1, r4
 8002608:	2001      	movs	r0, #1
 800260a:	f005 f95b 	bl	80078c4 <trace_print_module_function>

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	7c1a      	ldrb	r2, [r3, #16]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
 8002616:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <VL53L0X_GetDeviceMode+0x68>)
 8002618:	681c      	ldr	r4, [r3, #0]
 800261a:	f005 fa01 	bl	8007a20 <HAL_GetTick>
 800261e:	4603      	mov	r3, r0
 8002620:	461a      	mov	r2, r3
 8002622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002626:	9302      	str	r3, [sp, #8]
 8002628:	4b08      	ldr	r3, [pc, #32]	; (800264c <VL53L0X_GetDeviceMode+0x6c>)
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	9200      	str	r2, [sp, #0]
 800262e:	4b09      	ldr	r3, [pc, #36]	; (8002654 <VL53L0X_GetDeviceMode+0x74>)
 8002630:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002634:	4621      	mov	r1, r4
 8002636:	2001      	movs	r0, #1
 8002638:	f005 f944 	bl	80078c4 <trace_print_module_function>
	return Status;
 800263c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	bd90      	pop	{r4, r7, pc}
 8002648:	200007c8 	.word	0x200007c8
 800264c:	0800c0d0 	.word	0x0800c0d0
 8002650:	0800bd5c 	.word	0x0800bd5c
 8002654:	0800bd70 	.word	0x0800bd70

08002658 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8002658:	b590      	push	{r4, r7, lr}
 800265a:	b089      	sub	sp, #36	; 0x24
 800265c:	af04      	add	r7, sp, #16
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002662:	2300      	movs	r3, #0
 8002664:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 8002666:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <VL53L0X_GetFractionEnable+0x84>)
 8002668:	681c      	ldr	r4, [r3, #0]
 800266a:	f005 f9d9 	bl	8007a20 <HAL_GetTick>
 800266e:	4603      	mov	r3, r0
 8002670:	461a      	mov	r2, r3
 8002672:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <VL53L0X_GetFractionEnable+0x88>)
 8002674:	9301      	str	r3, [sp, #4]
 8002676:	9200      	str	r2, [sp, #0]
 8002678:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <VL53L0X_GetFractionEnable+0x8c>)
 800267a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800267e:	4621      	mov	r1, r4
 8002680:	2001      	movs	r0, #1
 8002682:	f005 f91f 	bl	80078c4 <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	2109      	movs	r1, #9
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff fa2c 	bl	8001ae8 <VL53L0X_RdByte>
 8002690:	4603      	mov	r3, r0
 8002692:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8002694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d106      	bne.n	80026aa <VL53L0X_GetFractionEnable+0x52>
		*pEnabled = (*pEnabled & 1);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
 80026aa:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <VL53L0X_GetFractionEnable+0x84>)
 80026ac:	681c      	ldr	r4, [r3, #0]
 80026ae:	f005 f9b7 	bl	8007a20 <HAL_GetTick>
 80026b2:	4603      	mov	r3, r0
 80026b4:	461a      	mov	r2, r3
 80026b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ba:	9302      	str	r3, [sp, #8]
 80026bc:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <VL53L0X_GetFractionEnable+0x88>)
 80026be:	9301      	str	r3, [sp, #4]
 80026c0:	9200      	str	r2, [sp, #0]
 80026c2:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <VL53L0X_GetFractionEnable+0x90>)
 80026c4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80026c8:	4621      	mov	r1, r4
 80026ca:	2001      	movs	r0, #1
 80026cc:	f005 f8fa 	bl	80078c4 <trace_print_module_function>
	return Status;
 80026d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd90      	pop	{r4, r7, pc}
 80026dc:	200007c8 	.word	0x200007c8
 80026e0:	0800c108 	.word	0x0800c108
 80026e4:	0800bd5c 	.word	0x0800bd5c
 80026e8:	0800bd70 	.word	0x0800bd70

080026ec <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80026ec:	b590      	push	{r4, r7, lr}
 80026ee:	b089      	sub	sp, #36	; 0x24
 80026f0:	af04      	add	r7, sp, #16
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80026f6:	2300      	movs	r3, #0
 80026f8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 80026fa:	4b17      	ldr	r3, [pc, #92]	; (8002758 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x6c>)
 80026fc:	681c      	ldr	r4, [r3, #0]
 80026fe:	f005 f98f 	bl	8007a20 <HAL_GetTick>
 8002702:	4603      	mov	r3, r0
 8002704:	461a      	mov	r2, r3
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x70>)
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	9200      	str	r2, [sp, #0]
 800270c:	4b14      	ldr	r3, [pc, #80]	; (8002760 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x74>)
 800270e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002712:	4621      	mov	r1, r4
 8002714:	2001      	movs	r0, #1
 8002716:	f005 f8d5 	bl	80078c4 <trace_print_module_function>

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800271a:	6839      	ldr	r1, [r7, #0]
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f003 ff31 	bl	8006584 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8002722:	4603      	mov	r3, r0
 8002724:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
 8002726:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x6c>)
 8002728:	681c      	ldr	r4, [r3, #0]
 800272a:	f005 f979 	bl	8007a20 <HAL_GetTick>
 800272e:	4603      	mov	r3, r0
 8002730:	461a      	mov	r2, r3
 8002732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002736:	9302      	str	r3, [sp, #8]
 8002738:	4b08      	ldr	r3, [pc, #32]	; (800275c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x70>)
 800273a:	9301      	str	r3, [sp, #4]
 800273c:	9200      	str	r2, [sp, #0]
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x78>)
 8002740:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002744:	4621      	mov	r1, r4
 8002746:	2001      	movs	r0, #1
 8002748:	f005 f8bc 	bl	80078c4 <trace_print_module_function>

	return Status;
 800274c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	bd90      	pop	{r4, r7, pc}
 8002758:	200007c8 	.word	0x200007c8
 800275c:	0800c15c 	.word	0x0800c15c
 8002760:	0800bd5c 	.word	0x0800bd5c
 8002764:	0800bd70 	.word	0x0800bd70

08002768 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8002768:	b590      	push	{r4, r7, lr}
 800276a:	b089      	sub	sp, #36	; 0x24
 800276c:	af04      	add	r7, sp, #16
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002772:	2300      	movs	r3, #0
 8002774:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 8002776:	4b17      	ldr	r3, [pc, #92]	; (80027d4 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x6c>)
 8002778:	681c      	ldr	r4, [r3, #0]
 800277a:	f005 f951 	bl	8007a20 <HAL_GetTick>
 800277e:	4603      	mov	r3, r0
 8002780:	461a      	mov	r2, r3
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x70>)
 8002784:	9301      	str	r3, [sp, #4]
 8002786:	9200      	str	r2, [sp, #0]
 8002788:	4b14      	ldr	r3, [pc, #80]	; (80027dc <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x74>)
 800278a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800278e:	4621      	mov	r1, r4
 8002790:	2001      	movs	r0, #1
 8002792:	f005 f897 	bl	80078c4 <trace_print_module_function>

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8002796:	6839      	ldr	r1, [r7, #0]
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f004 f825 	bl	80067e8 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800279e:	4603      	mov	r3, r0
 80027a0:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
 80027a2:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x6c>)
 80027a4:	681c      	ldr	r4, [r3, #0]
 80027a6:	f005 f93b 	bl	8007a20 <HAL_GetTick>
 80027aa:	4603      	mov	r3, r0
 80027ac:	461a      	mov	r2, r3
 80027ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b2:	9302      	str	r3, [sp, #8]
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x70>)
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	9200      	str	r2, [sp, #0]
 80027ba:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x78>)
 80027bc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80027c0:	4621      	mov	r1, r4
 80027c2:	2001      	movs	r0, #1
 80027c4:	f005 f87e 	bl	80078c4 <trace_print_module_function>
	return Status;
 80027c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd90      	pop	{r4, r7, pc}
 80027d4:	200007c8 	.word	0x200007c8
 80027d8:	0800c18c 	.word	0x0800c18c
 80027dc:	0800bd5c 	.word	0x0800bd5c
 80027e0:	0800bd70 	.word	0x0800bd70

080027e4 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80027e4:	b590      	push	{r4, r7, lr}
 80027e6:	b089      	sub	sp, #36	; 0x24
 80027e8:	af04      	add	r7, sp, #16
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	70fb      	strb	r3, [r7, #3]
 80027f0:	4613      	mov	r3, r2
 80027f2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80027f4:	2300      	movs	r3, #0
 80027f6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 80027f8:	4b18      	ldr	r3, [pc, #96]	; (800285c <VL53L0X_SetVcselPulsePeriod+0x78>)
 80027fa:	681c      	ldr	r4, [r3, #0]
 80027fc:	f005 f910 	bl	8007a20 <HAL_GetTick>
 8002800:	4603      	mov	r3, r0
 8002802:	461a      	mov	r2, r3
 8002804:	4b16      	ldr	r3, [pc, #88]	; (8002860 <VL53L0X_SetVcselPulsePeriod+0x7c>)
 8002806:	9301      	str	r3, [sp, #4]
 8002808:	9200      	str	r2, [sp, #0]
 800280a:	4b16      	ldr	r3, [pc, #88]	; (8002864 <VL53L0X_SetVcselPulsePeriod+0x80>)
 800280c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002810:	4621      	mov	r1, r4
 8002812:	2001      	movs	r0, #1
 8002814:	f005 f856 	bl	80078c4 <trace_print_module_function>

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8002818:	78ba      	ldrb	r2, [r7, #2]
 800281a:	78fb      	ldrb	r3, [r7, #3]
 800281c:	4619      	mov	r1, r3
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f003 fbef 	bl	8006002 <VL53L0X_set_vcsel_pulse_period>
 8002824:	4603      	mov	r3, r0
 8002826:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <VL53L0X_SetVcselPulsePeriod+0x78>)
 800282a:	681c      	ldr	r4, [r3, #0]
 800282c:	f005 f8f8 	bl	8007a20 <HAL_GetTick>
 8002830:	4603      	mov	r3, r0
 8002832:	461a      	mov	r2, r3
 8002834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002838:	9302      	str	r3, [sp, #8]
 800283a:	4b09      	ldr	r3, [pc, #36]	; (8002860 <VL53L0X_SetVcselPulsePeriod+0x7c>)
 800283c:	9301      	str	r3, [sp, #4]
 800283e:	9200      	str	r2, [sp, #0]
 8002840:	4b09      	ldr	r3, [pc, #36]	; (8002868 <VL53L0X_SetVcselPulsePeriod+0x84>)
 8002842:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002846:	4621      	mov	r1, r4
 8002848:	2001      	movs	r0, #1
 800284a:	f005 f83b 	bl	80078c4 <trace_print_module_function>
	return Status;
 800284e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	bd90      	pop	{r4, r7, pc}
 800285a:	bf00      	nop
 800285c:	200007c8 	.word	0x200007c8
 8002860:	0800c1bc 	.word	0x0800c1bc
 8002864:	0800bd5c 	.word	0x0800bd5c
 8002868:	0800bd70 	.word	0x0800bd70

0800286c <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800286c:	b590      	push	{r4, r7, lr}
 800286e:	b08b      	sub	sp, #44	; 0x2c
 8002870:	af04      	add	r7, sp, #16
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	460b      	mov	r3, r1
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800287a:	2300      	movs	r3, #0
 800287c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");
 800287e:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <VL53L0X_GetVcselPulsePeriod+0x74>)
 8002880:	681c      	ldr	r4, [r3, #0]
 8002882:	f005 f8cd 	bl	8007a20 <HAL_GetTick>
 8002886:	4603      	mov	r3, r0
 8002888:	461a      	mov	r2, r3
 800288a:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <VL53L0X_GetVcselPulsePeriod+0x78>)
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	9200      	str	r2, [sp, #0]
 8002890:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <VL53L0X_GetVcselPulsePeriod+0x7c>)
 8002892:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002896:	4621      	mov	r1, r4
 8002898:	2001      	movs	r0, #1
 800289a:	f005 f813 	bl	80078c4 <trace_print_module_function>

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800289e:	7afb      	ldrb	r3, [r7, #11]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	4619      	mov	r1, r3
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f003 fe35 	bl	8006514 <VL53L0X_get_vcsel_pulse_period>
 80028aa:	4603      	mov	r3, r0
 80028ac:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
 80028ae:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <VL53L0X_GetVcselPulsePeriod+0x74>)
 80028b0:	681c      	ldr	r4, [r3, #0]
 80028b2:	f005 f8b5 	bl	8007a20 <HAL_GetTick>
 80028b6:	4603      	mov	r3, r0
 80028b8:	461a      	mov	r2, r3
 80028ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028be:	9302      	str	r3, [sp, #8]
 80028c0:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <VL53L0X_GetVcselPulsePeriod+0x78>)
 80028c2:	9301      	str	r3, [sp, #4]
 80028c4:	9200      	str	r2, [sp, #0]
 80028c6:	4b09      	ldr	r3, [pc, #36]	; (80028ec <VL53L0X_GetVcselPulsePeriod+0x80>)
 80028c8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80028cc:	4621      	mov	r1, r4
 80028ce:	2001      	movs	r0, #1
 80028d0:	f004 fff8 	bl	80078c4 <trace_print_module_function>
	return Status;
 80028d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	371c      	adds	r7, #28
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd90      	pop	{r4, r7, pc}
 80028e0:	200007c8 	.word	0x200007c8
 80028e4:	0800c1d8 	.word	0x0800c1d8
 80028e8:	0800bd5c 	.word	0x0800bd5c
 80028ec:	0800bd70 	.word	0x0800bd70

080028f0 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80028f0:	b590      	push	{r4, r7, lr}
 80028f2:	b08b      	sub	sp, #44	; 0x2c
 80028f4:	af04      	add	r7, sp, #16
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	70fb      	strb	r3, [r7, #3]
 80028fc:	4613      	mov	r3, r2
 80028fe:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002900:	2300      	movs	r3, #0
 8002902:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8002904:	2300      	movs	r3, #0
 8002906:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");
 800290c:	4b5b      	ldr	r3, [pc, #364]	; (8002a7c <VL53L0X_SetSequenceStepEnable+0x18c>)
 800290e:	681c      	ldr	r4, [r3, #0]
 8002910:	f005 f886 	bl	8007a20 <HAL_GetTick>
 8002914:	4603      	mov	r3, r0
 8002916:	461a      	mov	r2, r3
 8002918:	4b59      	ldr	r3, [pc, #356]	; (8002a80 <VL53L0X_SetSequenceStepEnable+0x190>)
 800291a:	9301      	str	r3, [sp, #4]
 800291c:	9200      	str	r2, [sp, #0]
 800291e:	4b59      	ldr	r3, [pc, #356]	; (8002a84 <VL53L0X_SetSequenceStepEnable+0x194>)
 8002920:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002924:	4621      	mov	r1, r4
 8002926:	2001      	movs	r0, #1
 8002928:	f004 ffcc 	bl	80078c4 <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800292c:	f107 030f 	add.w	r3, r7, #15
 8002930:	461a      	mov	r2, r3
 8002932:	2101      	movs	r1, #1
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff f8d7 	bl	8001ae8 <VL53L0X_RdByte>
 800293a:	4603      	mov	r3, r0
 800293c:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8002942:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d15a      	bne.n	8002a00 <VL53L0X_SetSequenceStepEnable+0x110>
		if (SequenceStepEnabled == 1) {
 800294a:	78bb      	ldrb	r3, [r7, #2]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d12b      	bne.n	80029a8 <VL53L0X_SetSequenceStepEnable+0xb8>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	2b04      	cmp	r3, #4
 8002954:	d825      	bhi.n	80029a2 <VL53L0X_SetSequenceStepEnable+0xb2>
 8002956:	a201      	add	r2, pc, #4	; (adr r2, 800295c <VL53L0X_SetSequenceStepEnable+0x6c>)
 8002958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295c:	08002971 	.word	0x08002971
 8002960:	0800297b 	.word	0x0800297b
 8002964:	08002985 	.word	0x08002985
 8002968:	0800298f 	.word	0x0800298f
 800296c:	08002999 	.word	0x08002999
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8002970:	7dbb      	ldrb	r3, [r7, #22]
 8002972:	f043 0310 	orr.w	r3, r3, #16
 8002976:	75bb      	strb	r3, [r7, #22]
				break;
 8002978:	e043      	b.n	8002a02 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800297a:	7dbb      	ldrb	r3, [r7, #22]
 800297c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8002980:	75bb      	strb	r3, [r7, #22]
				break;
 8002982:	e03e      	b.n	8002a02 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8002984:	7dbb      	ldrb	r3, [r7, #22]
 8002986:	f043 0304 	orr.w	r3, r3, #4
 800298a:	75bb      	strb	r3, [r7, #22]
				break;
 800298c:	e039      	b.n	8002a02 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800298e:	7dbb      	ldrb	r3, [r7, #22]
 8002990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002994:	75bb      	strb	r3, [r7, #22]
				break;
 8002996:	e034      	b.n	8002a02 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8002998:	7dbb      	ldrb	r3, [r7, #22]
 800299a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800299e:	75bb      	strb	r3, [r7, #22]
				break;
 80029a0:	e02f      	b.n	8002a02 <VL53L0X_SetSequenceStepEnable+0x112>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80029a2:	23fc      	movs	r3, #252	; 0xfc
 80029a4:	75fb      	strb	r3, [r7, #23]
 80029a6:	e02c      	b.n	8002a02 <VL53L0X_SetSequenceStepEnable+0x112>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d825      	bhi.n	80029fa <VL53L0X_SetSequenceStepEnable+0x10a>
 80029ae:	a201      	add	r2, pc, #4	; (adr r2, 80029b4 <VL53L0X_SetSequenceStepEnable+0xc4>)
 80029b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b4:	080029c9 	.word	0x080029c9
 80029b8:	080029d3 	.word	0x080029d3
 80029bc:	080029dd 	.word	0x080029dd
 80029c0:	080029e7 	.word	0x080029e7
 80029c4:	080029f1 	.word	0x080029f1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80029c8:	7dbb      	ldrb	r3, [r7, #22]
 80029ca:	f023 0310 	bic.w	r3, r3, #16
 80029ce:	75bb      	strb	r3, [r7, #22]
				break;
 80029d0:	e017      	b.n	8002a02 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80029d2:	7dbb      	ldrb	r3, [r7, #22]
 80029d4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80029d8:	75bb      	strb	r3, [r7, #22]
				break;
 80029da:	e012      	b.n	8002a02 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80029dc:	7dbb      	ldrb	r3, [r7, #22]
 80029de:	f023 0304 	bic.w	r3, r3, #4
 80029e2:	75bb      	strb	r3, [r7, #22]
				break;
 80029e4:	e00d      	b.n	8002a02 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80029e6:	7dbb      	ldrb	r3, [r7, #22]
 80029e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029ec:	75bb      	strb	r3, [r7, #22]
				break;
 80029ee:	e008      	b.n	8002a02 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80029f0:	7dbb      	ldrb	r3, [r7, #22]
 80029f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029f6:	75bb      	strb	r3, [r7, #22]
				break;
 80029f8:	e003      	b.n	8002a02 <VL53L0X_SetSequenceStepEnable+0x112>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80029fa:	23fc      	movs	r3, #252	; 0xfc
 80029fc:	75fb      	strb	r3, [r7, #23]
 80029fe:	e000      	b.n	8002a02 <VL53L0X_SetSequenceStepEnable+0x112>
			}
		}
 8002a00:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	7dba      	ldrb	r2, [r7, #22]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d01e      	beq.n	8002a48 <VL53L0X_SetSequenceStepEnable+0x158>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8002a0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d107      	bne.n	8002a22 <VL53L0X_SetSequenceStepEnable+0x132>
			Status = VL53L0X_WrByte(Dev,
 8002a12:	7dbb      	ldrb	r3, [r7, #22]
 8002a14:	461a      	mov	r2, r3
 8002a16:	2101      	movs	r1, #1
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7fe ffe3 	bl	80019e4 <VL53L0X_WrByte>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8002a22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d103      	bne.n	8002a32 <VL53L0X_SetSequenceStepEnable+0x142>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	7dba      	ldrb	r2, [r7, #22]
 8002a2e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8002a32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <VL53L0X_SetSequenceStepEnable+0x158>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8002a40:	6939      	ldr	r1, [r7, #16]
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff fe52 	bl	80026ec <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
				MeasurementTimingBudgetMicroSeconds);
		}
	}

	LOG_FUNCTION_END(Status);
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <VL53L0X_SetSequenceStepEnable+0x18c>)
 8002a4a:	681c      	ldr	r4, [r3, #0]
 8002a4c:	f004 ffe8 	bl	8007a20 <HAL_GetTick>
 8002a50:	4603      	mov	r3, r0
 8002a52:	461a      	mov	r2, r3
 8002a54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a58:	9302      	str	r3, [sp, #8]
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <VL53L0X_SetSequenceStepEnable+0x190>)
 8002a5c:	9301      	str	r3, [sp, #4]
 8002a5e:	9200      	str	r2, [sp, #0]
 8002a60:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <VL53L0X_SetSequenceStepEnable+0x198>)
 8002a62:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002a66:	4621      	mov	r1, r4
 8002a68:	2001      	movs	r0, #1
 8002a6a:	f004 ff2b 	bl	80078c4 <trace_print_module_function>

	return Status;
 8002a6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	371c      	adds	r7, #28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd90      	pop	{r4, r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200007c8 	.word	0x200007c8
 8002a80:	0800c1f4 	.word	0x0800c1f4
 8002a84:	0800bd5c 	.word	0x0800bd5c
 8002a88:	0800bd70 	.word	0x0800bd70

08002a8c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8002a8c:	b590      	push	{r4, r7, lr}
 8002a8e:	b08b      	sub	sp, #44	; 0x2c
 8002a90:	af04      	add	r7, sp, #16
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	607b      	str	r3, [r7, #4]
 8002a96:	460b      	mov	r3, r1
 8002a98:	72fb      	strb	r3, [r7, #11]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");
 8002aa8:	4b32      	ldr	r3, [pc, #200]	; (8002b74 <sequence_step_enabled+0xe8>)
 8002aaa:	681c      	ldr	r4, [r3, #0]
 8002aac:	f004 ffb8 	bl	8007a20 <HAL_GetTick>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	4b30      	ldr	r3, [pc, #192]	; (8002b78 <sequence_step_enabled+0xec>)
 8002ab6:	9301      	str	r3, [sp, #4]
 8002ab8:	9200      	str	r2, [sp, #0]
 8002aba:	4b30      	ldr	r3, [pc, #192]	; (8002b7c <sequence_step_enabled+0xf0>)
 8002abc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002ac0:	4621      	mov	r1, r4
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	f004 fefe 	bl	80078c4 <trace_print_module_function>

	switch (SequenceStepId) {
 8002ac8:	7afb      	ldrb	r3, [r7, #11]
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d836      	bhi.n	8002b3c <sequence_step_enabled+0xb0>
 8002ace:	a201      	add	r2, pc, #4	; (adr r2, 8002ad4 <sequence_step_enabled+0x48>)
 8002ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad4:	08002ae9 	.word	0x08002ae9
 8002ad8:	08002afb 	.word	0x08002afb
 8002adc:	08002b0d 	.word	0x08002b0d
 8002ae0:	08002b1f 	.word	0x08002b1f
 8002ae4:	08002b31 	.word	0x08002b31
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8002ae8:	7abb      	ldrb	r3, [r7, #10]
 8002aea:	111b      	asrs	r3, r3, #4
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	701a      	strb	r2, [r3, #0]
		break;
 8002af8:	e022      	b.n	8002b40 <sequence_step_enabled+0xb4>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8002afa:	7abb      	ldrb	r3, [r7, #10]
 8002afc:	10db      	asrs	r3, r3, #3
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	701a      	strb	r2, [r3, #0]
		break;
 8002b0a:	e019      	b.n	8002b40 <sequence_step_enabled+0xb4>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8002b0c:	7abb      	ldrb	r3, [r7, #10]
 8002b0e:	109b      	asrs	r3, r3, #2
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	701a      	strb	r2, [r3, #0]
		break;
 8002b1c:	e010      	b.n	8002b40 <sequence_step_enabled+0xb4>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8002b1e:	7abb      	ldrb	r3, [r7, #10]
 8002b20:	119b      	asrs	r3, r3, #6
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	701a      	strb	r2, [r3, #0]
		break;
 8002b2e:	e007      	b.n	8002b40 <sequence_step_enabled+0xb4>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8002b30:	7abb      	ldrb	r3, [r7, #10]
 8002b32:	09db      	lsrs	r3, r3, #7
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	701a      	strb	r2, [r3, #0]
		break;
 8002b3a:	e001      	b.n	8002b40 <sequence_step_enabled+0xb4>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002b3c:	23fc      	movs	r3, #252	; 0xfc
 8002b3e:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <sequence_step_enabled+0xe8>)
 8002b42:	681c      	ldr	r4, [r3, #0]
 8002b44:	f004 ff6c 	bl	8007a20 <HAL_GetTick>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b50:	9302      	str	r3, [sp, #8]
 8002b52:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <sequence_step_enabled+0xec>)
 8002b54:	9301      	str	r3, [sp, #4]
 8002b56:	9200      	str	r2, [sp, #0]
 8002b58:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <sequence_step_enabled+0xf4>)
 8002b5a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002b5e:	4621      	mov	r1, r4
 8002b60:	2001      	movs	r0, #1
 8002b62:	f004 feaf 	bl	80078c4 <trace_print_module_function>
	return Status;
 8002b66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	371c      	adds	r7, #28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd90      	pop	{r4, r7, pc}
 8002b72:	bf00      	nop
 8002b74:	200007c8 	.word	0x200007c8
 8002b78:	0800c214 	.word	0x0800c214
 8002b7c:	0800bd5c 	.word	0x0800bd5c
 8002b80:	0800bd70 	.word	0x0800bd70

08002b84 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8002b84:	b590      	push	{r4, r7, lr}
 8002b86:	b089      	sub	sp, #36	; 0x24
 8002b88:	af04      	add	r7, sp, #16
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");
 8002b96:	4b39      	ldr	r3, [pc, #228]	; (8002c7c <VL53L0X_GetSequenceStepEnables+0xf8>)
 8002b98:	681c      	ldr	r4, [r3, #0]
 8002b9a:	f004 ff41 	bl	8007a20 <HAL_GetTick>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4b37      	ldr	r3, [pc, #220]	; (8002c80 <VL53L0X_GetSequenceStepEnables+0xfc>)
 8002ba4:	9301      	str	r3, [sp, #4]
 8002ba6:	9200      	str	r2, [sp, #0]
 8002ba8:	4b36      	ldr	r3, [pc, #216]	; (8002c84 <VL53L0X_GetSequenceStepEnables+0x100>)
 8002baa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002bae:	4621      	mov	r1, r4
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	f004 fe87 	bl	80078c4 <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002bb6:	f107 030e 	add.w	r3, r7, #14
 8002bba:	461a      	mov	r2, r3
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fe ff92 	bl	8001ae8 <VL53L0X_RdByte>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8002bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d107      	bne.n	8002be0 <VL53L0X_GetSequenceStepEnables+0x5c>
		Status = sequence_step_enabled(Dev,
 8002bd0:	7bba      	ldrb	r2, [r7, #14]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff ff58 	bl	8002a8c <sequence_step_enabled>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d108      	bne.n	8002bfa <VL53L0X_GetSequenceStepEnables+0x76>
		Status = sequence_step_enabled(Dev,
 8002be8:	7bba      	ldrb	r2, [r7, #14]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	3302      	adds	r3, #2
 8002bee:	2101      	movs	r1, #1
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff ff4b 	bl	8002a8c <sequence_step_enabled>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d108      	bne.n	8002c14 <VL53L0X_GetSequenceStepEnables+0x90>
		Status = sequence_step_enabled(Dev,
 8002c02:	7bba      	ldrb	r2, [r7, #14]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	3301      	adds	r3, #1
 8002c08:	2102      	movs	r1, #2
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff ff3e 	bl	8002a8c <sequence_step_enabled>
 8002c10:	4603      	mov	r3, r0
 8002c12:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d108      	bne.n	8002c2e <VL53L0X_GetSequenceStepEnables+0xaa>
		Status = sequence_step_enabled(Dev,
 8002c1c:	7bba      	ldrb	r2, [r7, #14]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	3303      	adds	r3, #3
 8002c22:	2103      	movs	r1, #3
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ff31 	bl	8002a8c <sequence_step_enabled>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d108      	bne.n	8002c48 <VL53L0X_GetSequenceStepEnables+0xc4>
		Status = sequence_step_enabled(Dev,
 8002c36:	7bba      	ldrb	r2, [r7, #14]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	2104      	movs	r1, #4
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff ff24 	bl	8002a8c <sequence_step_enabled>
 8002c44:	4603      	mov	r3, r0
 8002c46:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
 8002c48:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <VL53L0X_GetSequenceStepEnables+0xf8>)
 8002c4a:	681c      	ldr	r4, [r3, #0]
 8002c4c:	f004 fee8 	bl	8007a20 <HAL_GetTick>
 8002c50:	4603      	mov	r3, r0
 8002c52:	461a      	mov	r2, r3
 8002c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c58:	9302      	str	r3, [sp, #8]
 8002c5a:	4b09      	ldr	r3, [pc, #36]	; (8002c80 <VL53L0X_GetSequenceStepEnables+0xfc>)
 8002c5c:	9301      	str	r3, [sp, #4]
 8002c5e:	9200      	str	r2, [sp, #0]
 8002c60:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <VL53L0X_GetSequenceStepEnables+0x104>)
 8002c62:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002c66:	4621      	mov	r1, r4
 8002c68:	2001      	movs	r0, #1
 8002c6a:	f004 fe2b 	bl	80078c4 <trace_print_module_function>
	return Status;
 8002c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd90      	pop	{r4, r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	200007c8 	.word	0x200007c8
 8002c80:	0800c24c 	.word	0x0800c24c
 8002c84:	0800bd5c 	.word	0x0800bd5c
 8002c88:	0800bd70 	.word	0x0800bd70

08002c8c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8002c8c:	b590      	push	{r4, r7, lr}
 8002c8e:	b089      	sub	sp, #36	; 0x24
 8002c90:	af04      	add	r7, sp, #16
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002c96:	2300      	movs	r3, #0
 8002c98:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");
 8002c9a:	4b28      	ldr	r3, [pc, #160]	; (8002d3c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb0>)
 8002c9c:	681c      	ldr	r4, [r3, #0]
 8002c9e:	f004 febf 	bl	8007a20 <HAL_GetTick>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4b26      	ldr	r3, [pc, #152]	; (8002d40 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb4>)
 8002ca8:	9301      	str	r3, [sp, #4]
 8002caa:	9200      	str	r2, [sp, #0]
 8002cac:	4b25      	ldr	r3, [pc, #148]	; (8002d44 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb8>)
 8002cae:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	f004 fe05 	bl	80078c4 <trace_print_module_function>

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8002cba:	f107 030c 	add.w	r3, r7, #12
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	21f8      	movs	r1, #248	; 0xf8
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fe ff3a 	bl	8001b3c <VL53L0X_RdWord>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8002ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d108      	bne.n	8002ce6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5a>
		Status = VL53L0X_RdDWord(Dev,
 8002cd4:	f107 0308 	add.w	r3, r7, #8
 8002cd8:	461a      	mov	r2, r3
 8002cda:	2104      	movs	r1, #4
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7fe ff65 	bl	8001bac <VL53L0X_RdDWord>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10c      	bne.n	8002d08 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x7c>
		if (osc_calibrate_val != 0) {
 8002cee:	89bb      	ldrh	r3, [r7, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x74>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	89ba      	ldrh	r2, [r7, #12]
 8002cf8:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
 8002d08:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb0>)
 8002d0a:	681c      	ldr	r4, [r3, #0]
 8002d0c:	f004 fe88 	bl	8007a20 <HAL_GetTick>
 8002d10:	4603      	mov	r3, r0
 8002d12:	461a      	mov	r2, r3
 8002d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d18:	9302      	str	r3, [sp, #8]
 8002d1a:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb4>)
 8002d1c:	9301      	str	r3, [sp, #4]
 8002d1e:	9200      	str	r2, [sp, #0]
 8002d20:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xbc>)
 8002d22:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002d26:	4621      	mov	r1, r4
 8002d28:	2001      	movs	r0, #1
 8002d2a:	f004 fdcb 	bl	80078c4 <trace_print_module_function>
	return Status;
 8002d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd90      	pop	{r4, r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	200007c8 	.word	0x200007c8
 8002d40:	0800c320 	.word	0x0800c320
 8002d44:	0800bd5c 	.word	0x0800bd5c
 8002d48:	0800bd70 	.word	0x0800bd70

08002d4c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b089      	sub	sp, #36	; 0x24
 8002d50:	af04      	add	r7, sp, #16
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002d56:	2300      	movs	r3, #0
 8002d58:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");
 8002d5a:	4b17      	ldr	r3, [pc, #92]	; (8002db8 <VL53L0X_GetXTalkCompensationEnable+0x6c>)
 8002d5c:	681c      	ldr	r4, [r3, #0]
 8002d5e:	f004 fe5f 	bl	8007a20 <HAL_GetTick>
 8002d62:	4603      	mov	r3, r0
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <VL53L0X_GetXTalkCompensationEnable+0x70>)
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	9200      	str	r2, [sp, #0]
 8002d6c:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <VL53L0X_GetXTalkCompensationEnable+0x74>)
 8002d6e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002d72:	4621      	mov	r1, r4
 8002d74:	2001      	movs	r0, #1
 8002d76:	f004 fda5 	bl	80078c4 <trace_print_module_function>

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	7f1b      	ldrb	r3, [r3, #28]
 8002d7e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	7bba      	ldrb	r2, [r7, #14]
 8002d84:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
 8002d86:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <VL53L0X_GetXTalkCompensationEnable+0x6c>)
 8002d88:	681c      	ldr	r4, [r3, #0]
 8002d8a:	f004 fe49 	bl	8007a20 <HAL_GetTick>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	461a      	mov	r2, r3
 8002d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d96:	9302      	str	r3, [sp, #8]
 8002d98:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <VL53L0X_GetXTalkCompensationEnable+0x70>)
 8002d9a:	9301      	str	r3, [sp, #4]
 8002d9c:	9200      	str	r2, [sp, #0]
 8002d9e:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <VL53L0X_GetXTalkCompensationEnable+0x78>)
 8002da0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002da4:	4621      	mov	r1, r4
 8002da6:	2001      	movs	r0, #1
 8002da8:	f004 fd8c 	bl	80078c4 <trace_print_module_function>
	return Status;
 8002dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd90      	pop	{r4, r7, pc}
 8002db8:	200007c8 	.word	0x200007c8
 8002dbc:	0800c374 	.word	0x0800c374
 8002dc0:	0800bd5c 	.word	0x0800bd5c
 8002dc4:	0800bd70 	.word	0x0800bd70

08002dc8 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8002dc8:	b590      	push	{r4, r7, lr}
 8002dca:	b08b      	sub	sp, #44	; 0x2c
 8002dcc:	af04      	add	r7, sp, #16
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");
 8002dd6:	4b27      	ldr	r3, [pc, #156]	; (8002e74 <VL53L0X_GetXTalkCompensationRateMegaCps+0xac>)
 8002dd8:	681c      	ldr	r4, [r3, #0]
 8002dda:	f004 fe21 	bl	8007a20 <HAL_GetTick>
 8002dde:	4603      	mov	r3, r0
 8002de0:	461a      	mov	r2, r3
 8002de2:	4b25      	ldr	r3, [pc, #148]	; (8002e78 <VL53L0X_GetXTalkCompensationRateMegaCps+0xb0>)
 8002de4:	9301      	str	r3, [sp, #4]
 8002de6:	9200      	str	r2, [sp, #0]
 8002de8:	4b24      	ldr	r3, [pc, #144]	; (8002e7c <VL53L0X_GetXTalkCompensationRateMegaCps+0xb4>)
 8002dea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002dee:	4621      	mov	r1, r4
 8002df0:	2001      	movs	r0, #1
 8002df2:	f004 fd67 	bl	80078c4 <trace_print_module_function>

	Status = VL53L0X_RdWord(Dev,
 8002df6:	f107 030e 	add.w	r3, r7, #14
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	2120      	movs	r1, #32
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7fe fe9c 	bl	8001b3c <VL53L0X_RdWord>
 8002e04:	4603      	mov	r3, r0
 8002e06:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8002e08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d118      	bne.n	8002e42 <VL53L0X_GetXTalkCompensationRateMegaCps+0x7a>
		if (Value == 0) {
 8002e10:	89fb      	ldrh	r3, [r7, #14]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <VL53L0X_GetXTalkCompensationRateMegaCps+0x62>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	771a      	strb	r2, [r3, #28]
 8002e28:	e00b      	b.n	8002e42 <VL53L0X_GetXTalkCompensationRateMegaCps+0x7a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8002e2a:	89fb      	ldrh	r3, [r7, #14]
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
 8002e42:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <VL53L0X_GetXTalkCompensationRateMegaCps+0xac>)
 8002e44:	681c      	ldr	r4, [r3, #0]
 8002e46:	f004 fdeb 	bl	8007a20 <HAL_GetTick>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e52:	9302      	str	r3, [sp, #8]
 8002e54:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <VL53L0X_GetXTalkCompensationRateMegaCps+0xb0>)
 8002e56:	9301      	str	r3, [sp, #4]
 8002e58:	9200      	str	r2, [sp, #0]
 8002e5a:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <VL53L0X_GetXTalkCompensationRateMegaCps+0xb8>)
 8002e5c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002e60:	4621      	mov	r1, r4
 8002e62:	2001      	movs	r0, #1
 8002e64:	f004 fd2e 	bl	80078c4 <trace_print_module_function>
	return Status;
 8002e68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	371c      	adds	r7, #28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd90      	pop	{r4, r7, pc}
 8002e74:	200007c8 	.word	0x200007c8
 8002e78:	0800c3c0 	.word	0x0800c3c0
 8002e7c:	0800bd5c 	.word	0x0800bd5c
 8002e80:	0800bd70 	.word	0x0800bd70

08002e84 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8002e84:	b590      	push	{r4, r7, lr}
 8002e86:	b08b      	sub	sp, #44	; 0x2c
 8002e88:	af04      	add	r7, sp, #16
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	807b      	strh	r3, [r7, #2]
 8002e90:	4613      	mov	r3, r2
 8002e92:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002e94:	2300      	movs	r3, #0
 8002e96:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");
 8002ea4:	4b4f      	ldr	r3, [pc, #316]	; (8002fe4 <VL53L0X_SetLimitCheckEnable+0x160>)
 8002ea6:	681c      	ldr	r4, [r3, #0]
 8002ea8:	f004 fdba 	bl	8007a20 <HAL_GetTick>
 8002eac:	4603      	mov	r3, r0
 8002eae:	461a      	mov	r2, r3
 8002eb0:	4b4d      	ldr	r3, [pc, #308]	; (8002fe8 <VL53L0X_SetLimitCheckEnable+0x164>)
 8002eb2:	9301      	str	r3, [sp, #4]
 8002eb4:	9200      	str	r2, [sp, #0]
 8002eb6:	4b4d      	ldr	r3, [pc, #308]	; (8002fec <VL53L0X_SetLimitCheckEnable+0x168>)
 8002eb8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002ebc:	4621      	mov	r1, r4
 8002ebe:	2001      	movs	r0, #1
 8002ec0:	f004 fd00 	bl	80078c4 <trace_print_module_function>

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002ec4:	887b      	ldrh	r3, [r7, #2]
 8002ec6:	2b05      	cmp	r3, #5
 8002ec8:	d902      	bls.n	8002ed0 <VL53L0X_SetLimitCheckEnable+0x4c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002eca:	23fc      	movs	r3, #252	; 0xfc
 8002ecc:	75fb      	strb	r3, [r7, #23]
 8002ece:	e05b      	b.n	8002f88 <VL53L0X_SetLimitCheckEnable+0x104>
	} else {
		if (LimitCheckEnable == 0) {
 8002ed0:	787b      	ldrb	r3, [r7, #1]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <VL53L0X_SetLimitCheckEnable+0x60>
			TempFix1616 = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	73bb      	strb	r3, [r7, #14]
 8002ee2:	e00a      	b.n	8002efa <VL53L0X_SetLimitCheckEnable+0x76>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002ee4:	887b      	ldrh	r3, [r7, #2]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	330c      	adds	r3, #12
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8002efa:	887b      	ldrh	r3, [r7, #2]
 8002efc:	2b05      	cmp	r3, #5
 8002efe:	d841      	bhi.n	8002f84 <VL53L0X_SetLimitCheckEnable+0x100>
 8002f00:	a201      	add	r2, pc, #4	; (adr r2, 8002f08 <VL53L0X_SetLimitCheckEnable+0x84>)
 8002f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f06:	bf00      	nop
 8002f08:	08002f21 	.word	0x08002f21
 8002f0c:	08002f2b 	.word	0x08002f2b
 8002f10:	08002f41 	.word	0x08002f41
 8002f14:	08002f4b 	.word	0x08002f4b
 8002f18:	08002f55 	.word	0x08002f55
 8002f1c:	08002f6d 	.word	0x08002f6d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	7bfa      	ldrb	r2, [r7, #15]
 8002f24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8002f28:	e02e      	b.n	8002f88 <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	461a      	mov	r2, r3
 8002f32:	2144      	movs	r1, #68	; 0x44
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7fe fd79 	bl	8001a2c <VL53L0X_WrWord>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	75fb      	strb	r3, [r7, #23]

			break;
 8002f3e:	e023      	b.n	8002f88 <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	7bfa      	ldrb	r2, [r7, #15]
 8002f44:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8002f48:	e01e      	b.n	8002f88 <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	7bfa      	ldrb	r2, [r7, #15]
 8002f4e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8002f52:	e019      	b.n	8002f88 <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8002f54:	7bbb      	ldrb	r3, [r7, #14]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8002f5a:	7b7b      	ldrb	r3, [r7, #13]
 8002f5c:	22fe      	movs	r2, #254	; 0xfe
 8002f5e:	2160      	movs	r1, #96	; 0x60
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7fe fd8d 	bl	8001a80 <VL53L0X_UpdateByte>
 8002f66:	4603      	mov	r3, r0
 8002f68:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8002f6a:	e00d      	b.n	8002f88 <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8002f6c:	7bbb      	ldrb	r3, [r7, #14]
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8002f72:	7b7b      	ldrb	r3, [r7, #13]
 8002f74:	22ef      	movs	r2, #239	; 0xef
 8002f76:	2160      	movs	r1, #96	; 0x60
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7fe fd81 	bl	8001a80 <VL53L0X_UpdateByte>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8002f82:	e001      	b.n	8002f88 <VL53L0X_SetLimitCheckEnable+0x104>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002f84:	23fc      	movs	r3, #252	; 0xfc
 8002f86:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002f88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10f      	bne.n	8002fb0 <VL53L0X_SetLimitCheckEnable+0x12c>
		if (LimitCheckEnable == 0) {
 8002f90:	787b      	ldrb	r3, [r7, #1]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <VL53L0X_SetLimitCheckEnable+0x120>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002f96:	887b      	ldrh	r3, [r7, #2]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002fa2:	e005      	b.n	8002fb0 <VL53L0X_SetLimitCheckEnable+0x12c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002fa4:	887b      	ldrh	r3, [r7, #2]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	4413      	add	r3, r2
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <VL53L0X_SetLimitCheckEnable+0x160>)
 8002fb2:	681c      	ldr	r4, [r3, #0]
 8002fb4:	f004 fd34 	bl	8007a20 <HAL_GetTick>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002fc0:	9302      	str	r3, [sp, #8]
 8002fc2:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <VL53L0X_SetLimitCheckEnable+0x164>)
 8002fc4:	9301      	str	r3, [sp, #4]
 8002fc6:	9200      	str	r2, [sp, #0]
 8002fc8:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <VL53L0X_SetLimitCheckEnable+0x16c>)
 8002fca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002fce:	4621      	mov	r1, r4
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	f004 fc77 	bl	80078c4 <trace_print_module_function>
	return Status;
 8002fd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	371c      	adds	r7, #28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd90      	pop	{r4, r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	200007c8 	.word	0x200007c8
 8002fe8:	0800c478 	.word	0x0800c478
 8002fec:	0800bd5c 	.word	0x0800bd5c
 8002ff0:	0800bd70 	.word	0x0800bd70

08002ff4 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8002ff4:	b590      	push	{r4, r7, lr}
 8002ff6:	b08b      	sub	sp, #44	; 0x2c
 8002ff8:	af04      	add	r7, sp, #16
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003002:	2300      	movs	r3, #0
 8003004:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");
 8003006:	4b1d      	ldr	r3, [pc, #116]	; (800307c <VL53L0X_GetLimitCheckEnable+0x88>)
 8003008:	681c      	ldr	r4, [r3, #0]
 800300a:	f004 fd09 	bl	8007a20 <HAL_GetTick>
 800300e:	4603      	mov	r3, r0
 8003010:	461a      	mov	r2, r3
 8003012:	4b1b      	ldr	r3, [pc, #108]	; (8003080 <VL53L0X_GetLimitCheckEnable+0x8c>)
 8003014:	9301      	str	r3, [sp, #4]
 8003016:	9200      	str	r2, [sp, #0]
 8003018:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <VL53L0X_GetLimitCheckEnable+0x90>)
 800301a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800301e:	4621      	mov	r1, r4
 8003020:	2001      	movs	r0, #1
 8003022:	f004 fc4f 	bl	80078c4 <trace_print_module_function>

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003026:	897b      	ldrh	r3, [r7, #10]
 8003028:	2b05      	cmp	r3, #5
 800302a:	d905      	bls.n	8003038 <VL53L0X_GetLimitCheckEnable+0x44>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800302c:	23fc      	movs	r3, #252	; 0xfc
 800302e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	701a      	strb	r2, [r3, #0]
 8003036:	e008      	b.n	800304a <VL53L0X_GetLimitCheckEnable+0x56>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003038:	897b      	ldrh	r3, [r7, #10]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4413      	add	r3, r2
 800303e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003042:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	7dba      	ldrb	r2, [r7, #22]
 8003048:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
 800304a:	4b0c      	ldr	r3, [pc, #48]	; (800307c <VL53L0X_GetLimitCheckEnable+0x88>)
 800304c:	681c      	ldr	r4, [r3, #0]
 800304e:	f004 fce7 	bl	8007a20 <HAL_GetTick>
 8003052:	4603      	mov	r3, r0
 8003054:	461a      	mov	r2, r3
 8003056:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800305a:	9302      	str	r3, [sp, #8]
 800305c:	4b08      	ldr	r3, [pc, #32]	; (8003080 <VL53L0X_GetLimitCheckEnable+0x8c>)
 800305e:	9301      	str	r3, [sp, #4]
 8003060:	9200      	str	r2, [sp, #0]
 8003062:	4b09      	ldr	r3, [pc, #36]	; (8003088 <VL53L0X_GetLimitCheckEnable+0x94>)
 8003064:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003068:	4621      	mov	r1, r4
 800306a:	2001      	movs	r0, #1
 800306c:	f004 fc2a 	bl	80078c4 <trace_print_module_function>
	return Status;
 8003070:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003074:	4618      	mov	r0, r3
 8003076:	371c      	adds	r7, #28
 8003078:	46bd      	mov	sp, r7
 800307a:	bd90      	pop	{r4, r7, pc}
 800307c:	200007c8 	.word	0x200007c8
 8003080:	0800c494 	.word	0x0800c494
 8003084:	0800bd5c 	.word	0x0800bd5c
 8003088:	0800bd70 	.word	0x0800bd70

0800308c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800308c:	b590      	push	{r4, r7, lr}
 800308e:	b08b      	sub	sp, #44	; 0x2c
 8003090:	af04      	add	r7, sp, #16
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	460b      	mov	r3, r1
 8003096:	607a      	str	r2, [r7, #4]
 8003098:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800309a:	2300      	movs	r3, #0
 800309c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");
 800309e:	4b3d      	ldr	r3, [pc, #244]	; (8003194 <VL53L0X_SetLimitCheckValue+0x108>)
 80030a0:	681c      	ldr	r4, [r3, #0]
 80030a2:	f004 fcbd 	bl	8007a20 <HAL_GetTick>
 80030a6:	4603      	mov	r3, r0
 80030a8:	461a      	mov	r2, r3
 80030aa:	4b3b      	ldr	r3, [pc, #236]	; (8003198 <VL53L0X_SetLimitCheckValue+0x10c>)
 80030ac:	9301      	str	r3, [sp, #4]
 80030ae:	9200      	str	r2, [sp, #0]
 80030b0:	4b3a      	ldr	r3, [pc, #232]	; (800319c <VL53L0X_SetLimitCheckValue+0x110>)
 80030b2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80030b6:	4621      	mov	r1, r4
 80030b8:	2001      	movs	r0, #1
 80030ba:	f004 fc03 	bl	80078c4 <trace_print_module_function>

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80030be:	897b      	ldrh	r3, [r7, #10]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4413      	add	r3, r2
 80030c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030c8:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80030ca:	7dbb      	ldrb	r3, [r7, #22]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d107      	bne.n	80030e0 <VL53L0X_SetLimitCheckValue+0x54>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80030d0:	897b      	ldrh	r3, [r7, #10]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	330c      	adds	r3, #12
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	e040      	b.n	8003162 <VL53L0X_SetLimitCheckValue+0xd6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80030e0:	897b      	ldrh	r3, [r7, #10]
 80030e2:	2b05      	cmp	r3, #5
 80030e4:	d830      	bhi.n	8003148 <VL53L0X_SetLimitCheckValue+0xbc>
 80030e6:	a201      	add	r2, pc, #4	; (adr r2, 80030ec <VL53L0X_SetLimitCheckValue+0x60>)
 80030e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ec:	08003105 	.word	0x08003105
 80030f0:	0800310d 	.word	0x0800310d
 80030f4:	08003123 	.word	0x08003123
 80030f8:	0800312b 	.word	0x0800312b
 80030fc:	08003133 	.word	0x08003133
 8003100:	08003133 	.word	0x08003133

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800310a:	e01f      	b.n	800314c <VL53L0X_SetLimitCheckValue+0xc0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8003110:	b29b      	uxth	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	2144      	movs	r1, #68	; 0x44
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f7fe fc88 	bl	8001a2c <VL53L0X_WrWord>
 800311c:	4603      	mov	r3, r0
 800311e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8003120:	e014      	b.n	800314c <VL53L0X_SetLimitCheckValue+0xc0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8003128:	e010      	b.n	800314c <VL53L0X_SetLimitCheckValue+0xc0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8003130:	e00c      	b.n	800314c <VL53L0X_SetLimitCheckValue+0xc0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8003136:	b29b      	uxth	r3, r3
 8003138:	461a      	mov	r2, r3
 800313a:	2164      	movs	r1, #100	; 0x64
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f7fe fc75 	bl	8001a2c <VL53L0X_WrWord>
 8003142:	4603      	mov	r3, r0
 8003144:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8003146:	e001      	b.n	800314c <VL53L0X_SetLimitCheckValue+0xc0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003148:	23fc      	movs	r3, #252	; 0xfc
 800314a:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800314c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d106      	bne.n	8003162 <VL53L0X_SetLimitCheckValue+0xd6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003154:	897b      	ldrh	r3, [r7, #10]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	330c      	adds	r3, #12
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
 8003162:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <VL53L0X_SetLimitCheckValue+0x108>)
 8003164:	681c      	ldr	r4, [r3, #0]
 8003166:	f004 fc5b 	bl	8007a20 <HAL_GetTick>
 800316a:	4603      	mov	r3, r0
 800316c:	461a      	mov	r2, r3
 800316e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003172:	9302      	str	r3, [sp, #8]
 8003174:	4b08      	ldr	r3, [pc, #32]	; (8003198 <VL53L0X_SetLimitCheckValue+0x10c>)
 8003176:	9301      	str	r3, [sp, #4]
 8003178:	9200      	str	r2, [sp, #0]
 800317a:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <VL53L0X_SetLimitCheckValue+0x114>)
 800317c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003180:	4621      	mov	r1, r4
 8003182:	2001      	movs	r0, #1
 8003184:	f004 fb9e 	bl	80078c4 <trace_print_module_function>
	return Status;
 8003188:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800318c:	4618      	mov	r0, r3
 800318e:	371c      	adds	r7, #28
 8003190:	46bd      	mov	sp, r7
 8003192:	bd90      	pop	{r4, r7, pc}
 8003194:	200007c8 	.word	0x200007c8
 8003198:	0800c4b0 	.word	0x0800c4b0
 800319c:	0800bd5c 	.word	0x0800bd5c
 80031a0:	0800bd70 	.word	0x0800bd70

080031a4 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b08d      	sub	sp, #52	; 0x34
 80031a8:	af04      	add	r7, sp, #16
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	460b      	mov	r3, r1
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80031b2:	2300      	movs	r3, #0
 80031b4:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");
 80031ba:	4b52      	ldr	r3, [pc, #328]	; (8003304 <VL53L0X_GetLimitCheckValue+0x160>)
 80031bc:	681c      	ldr	r4, [r3, #0]
 80031be:	f004 fc2f 	bl	8007a20 <HAL_GetTick>
 80031c2:	4603      	mov	r3, r0
 80031c4:	461a      	mov	r2, r3
 80031c6:	4b50      	ldr	r3, [pc, #320]	; (8003308 <VL53L0X_GetLimitCheckValue+0x164>)
 80031c8:	9301      	str	r3, [sp, #4]
 80031ca:	9200      	str	r2, [sp, #0]
 80031cc:	4b4f      	ldr	r3, [pc, #316]	; (800330c <VL53L0X_GetLimitCheckValue+0x168>)
 80031ce:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80031d2:	4621      	mov	r1, r4
 80031d4:	2001      	movs	r0, #1
 80031d6:	f004 fb75 	bl	80078c4 <trace_print_module_function>

	switch (LimitCheckId) {
 80031da:	897b      	ldrh	r3, [r7, #10]
 80031dc:	2b05      	cmp	r3, #5
 80031de:	d847      	bhi.n	8003270 <VL53L0X_GetLimitCheckValue+0xcc>
 80031e0:	a201      	add	r2, pc, #4	; (adr r2, 80031e8 <VL53L0X_GetLimitCheckValue+0x44>)
 80031e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e6:	bf00      	nop
 80031e8:	08003201 	.word	0x08003201
 80031ec:	0800320d 	.word	0x0800320d
 80031f0:	08003233 	.word	0x08003233
 80031f4:	0800323f 	.word	0x0800323f
 80031f8:	0800324b 	.word	0x0800324b
 80031fc:	0800324b 	.word	0x0800324b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003204:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8003206:	2300      	movs	r3, #0
 8003208:	77bb      	strb	r3, [r7, #30]
		break;
 800320a:	e033      	b.n	8003274 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800320c:	f107 0316 	add.w	r3, r7, #22
 8003210:	461a      	mov	r2, r3
 8003212:	2144      	movs	r1, #68	; 0x44
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f7fe fc91 	bl	8001b3c <VL53L0X_RdWord>
 800321a:	4603      	mov	r3, r0
 800321c:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800321e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d102      	bne.n	800322c <VL53L0X_GetLimitCheckValue+0x88>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8003226:	8afb      	ldrh	r3, [r7, #22]
 8003228:	025b      	lsls	r3, r3, #9
 800322a:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800322c:	2301      	movs	r3, #1
 800322e:	77bb      	strb	r3, [r7, #30]
		break;
 8003230:	e020      	b.n	8003274 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003236:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8003238:	2300      	movs	r3, #0
 800323a:	77bb      	strb	r3, [r7, #30]
		break;
 800323c:	e01a      	b.n	8003274 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	77bb      	strb	r3, [r7, #30]
		break;
 8003248:	e014      	b.n	8003274 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800324a:	f107 0316 	add.w	r3, r7, #22
 800324e:	461a      	mov	r2, r3
 8003250:	2164      	movs	r1, #100	; 0x64
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f7fe fc72 	bl	8001b3c <VL53L0X_RdWord>
 8003258:	4603      	mov	r3, r0
 800325a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800325c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d102      	bne.n	800326a <VL53L0X_GetLimitCheckValue+0xc6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8003264:	8afb      	ldrh	r3, [r7, #22]
 8003266:	025b      	lsls	r3, r3, #9
 8003268:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	77bb      	strb	r3, [r7, #30]
		break;
 800326e:	e001      	b.n	8003274 <VL53L0X_GetLimitCheckValue+0xd0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003270:	23fc      	movs	r3, #252	; 0xfc
 8003272:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003274:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d12a      	bne.n	80032d2 <VL53L0X_GetLimitCheckValue+0x12e>

		if (EnableZeroValue == 1) {
 800327c:	7fbb      	ldrb	r3, [r7, #30]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d124      	bne.n	80032cc <VL53L0X_GetLimitCheckValue+0x128>

			if (TempFix1616 == 0) {
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d110      	bne.n	80032aa <VL53L0X_GetLimitCheckValue+0x106>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8003288:	897b      	ldrh	r3, [r7, #10]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	330c      	adds	r3, #12
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800329c:	897b      	ldrh	r3, [r7, #10]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4413      	add	r3, r2
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80032a8:	e013      	b.n	80032d2 <VL53L0X_GetLimitCheckValue+0x12e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80032b0:	897b      	ldrh	r3, [r7, #10]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	330c      	adds	r3, #12
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80032be:	897b      	ldrh	r3, [r7, #10]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4413      	add	r3, r2
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80032ca:	e002      	b.n	80032d2 <VL53L0X_GetLimitCheckValue+0x12e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
 80032d2:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <VL53L0X_GetLimitCheckValue+0x160>)
 80032d4:	681c      	ldr	r4, [r3, #0]
 80032d6:	f004 fba3 	bl	8007a20 <HAL_GetTick>
 80032da:	4603      	mov	r3, r0
 80032dc:	461a      	mov	r2, r3
 80032de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80032e2:	9302      	str	r3, [sp, #8]
 80032e4:	4b08      	ldr	r3, [pc, #32]	; (8003308 <VL53L0X_GetLimitCheckValue+0x164>)
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	9200      	str	r2, [sp, #0]
 80032ea:	4b09      	ldr	r3, [pc, #36]	; (8003310 <VL53L0X_GetLimitCheckValue+0x16c>)
 80032ec:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80032f0:	4621      	mov	r1, r4
 80032f2:	2001      	movs	r0, #1
 80032f4:	f004 fae6 	bl	80078c4 <trace_print_module_function>
	return Status;
 80032f8:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3724      	adds	r7, #36	; 0x24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd90      	pop	{r4, r7, pc}
 8003304:	200007c8 	.word	0x200007c8
 8003308:	0800c4cc 	.word	0x0800c4cc
 800330c:	0800bd5c 	.word	0x0800bd5c
 8003310:	0800bd70 	.word	0x0800bd70

08003314 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8003314:	b590      	push	{r4, r7, lr}
 8003316:	b089      	sub	sp, #36	; 0x24
 8003318:	af04      	add	r7, sp, #16
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800331e:	2300      	movs	r3, #0
 8003320:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");
 8003322:	4b27      	ldr	r3, [pc, #156]	; (80033c0 <VL53L0X_GetWrapAroundCheckEnable+0xac>)
 8003324:	681c      	ldr	r4, [r3, #0]
 8003326:	f004 fb7b 	bl	8007a20 <HAL_GetTick>
 800332a:	4603      	mov	r3, r0
 800332c:	461a      	mov	r2, r3
 800332e:	4b25      	ldr	r3, [pc, #148]	; (80033c4 <VL53L0X_GetWrapAroundCheckEnable+0xb0>)
 8003330:	9301      	str	r3, [sp, #4]
 8003332:	9200      	str	r2, [sp, #0]
 8003334:	4b24      	ldr	r3, [pc, #144]	; (80033c8 <VL53L0X_GetWrapAroundCheckEnable+0xb4>)
 8003336:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800333a:	4621      	mov	r1, r4
 800333c:	2001      	movs	r0, #1
 800333e:	f004 fac1 	bl	80078c4 <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8003342:	f107 030e 	add.w	r3, r7, #14
 8003346:	461a      	mov	r2, r3
 8003348:	2101      	movs	r1, #1
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7fe fbcc 	bl	8001ae8 <VL53L0X_RdByte>
 8003350:	4603      	mov	r3, r0
 8003352:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8003354:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10e      	bne.n	800337a <VL53L0X_GetWrapAroundCheckEnable+0x66>
		PALDevDataSet(Dev, SequenceConfig, data);
 800335c:	7bba      	ldrb	r2, [r7, #14]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8003364:	7bbb      	ldrb	r3, [r7, #14]
 8003366:	b25b      	sxtb	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	da03      	bge.n	8003374 <VL53L0X_GetWrapAroundCheckEnable+0x60>
			*pWrapAroundCheckEnable = 0x01;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2201      	movs	r2, #1
 8003370:	701a      	strb	r2, [r3, #0]
 8003372:	e002      	b.n	800337a <VL53L0X_GetWrapAroundCheckEnable+0x66>
		else
			*pWrapAroundCheckEnable = 0x00;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	2200      	movs	r2, #0
 8003378:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800337a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d104      	bne.n	800338c <VL53L0X_GetWrapAroundCheckEnable+0x78>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	781a      	ldrb	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
 800338c:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <VL53L0X_GetWrapAroundCheckEnable+0xac>)
 800338e:	681c      	ldr	r4, [r3, #0]
 8003390:	f004 fb46 	bl	8007a20 <HAL_GetTick>
 8003394:	4603      	mov	r3, r0
 8003396:	461a      	mov	r2, r3
 8003398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800339c:	9302      	str	r3, [sp, #8]
 800339e:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <VL53L0X_GetWrapAroundCheckEnable+0xb0>)
 80033a0:	9301      	str	r3, [sp, #4]
 80033a2:	9200      	str	r2, [sp, #0]
 80033a4:	4b09      	ldr	r3, [pc, #36]	; (80033cc <VL53L0X_GetWrapAroundCheckEnable+0xb8>)
 80033a6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80033aa:	4621      	mov	r1, r4
 80033ac:	2001      	movs	r0, #1
 80033ae:	f004 fa89 	bl	80078c4 <trace_print_module_function>
	return Status;
 80033b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd90      	pop	{r4, r7, pc}
 80033be:	bf00      	nop
 80033c0:	200007c8 	.word	0x200007c8
 80033c4:	0800c52c 	.word	0x0800c52c
 80033c8:	0800bd5c 	.word	0x0800bd5c
 80033cc:	0800bd70 	.word	0x0800bd70

080033d0 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80033d0:	b590      	push	{r4, r7, lr}
 80033d2:	b089      	sub	sp, #36	; 0x24
 80033d4:	af04      	add	r7, sp, #16
 80033d6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80033d8:	2300      	movs	r3, #0
 80033da:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");
 80033dc:	4b28      	ldr	r3, [pc, #160]	; (8003480 <VL53L0X_PerformSingleMeasurement+0xb0>)
 80033de:	681c      	ldr	r4, [r3, #0]
 80033e0:	f004 fb1e 	bl	8007a20 <HAL_GetTick>
 80033e4:	4603      	mov	r3, r0
 80033e6:	461a      	mov	r2, r3
 80033e8:	4b26      	ldr	r3, [pc, #152]	; (8003484 <VL53L0X_PerformSingleMeasurement+0xb4>)
 80033ea:	9301      	str	r3, [sp, #4]
 80033ec:	9200      	str	r2, [sp, #0]
 80033ee:	4b26      	ldr	r3, [pc, #152]	; (8003488 <VL53L0X_PerformSingleMeasurement+0xb8>)
 80033f0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80033f4:	4621      	mov	r1, r4
 80033f6:	2001      	movs	r0, #1
 80033f8:	f004 fa64 	bl	80078c4 <trace_print_module_function>

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80033fc:	f107 030e 	add.w	r3, r7, #14
 8003400:	4619      	mov	r1, r3
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7ff f8ec 	bl	80025e0 <VL53L0X_GetDeviceMode>
 8003408:	4603      	mov	r3, r0
 800340a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800340c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d107      	bne.n	8003424 <VL53L0X_PerformSingleMeasurement+0x54>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8003414:	7bbb      	ldrb	r3, [r7, #14]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d104      	bne.n	8003424 <VL53L0X_PerformSingleMeasurement+0x54>
		Status = VL53L0X_StartMeasurement(Dev);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f8e0 	bl	80035e0 <VL53L0X_StartMeasurement>
 8003420:	4603      	mov	r3, r0
 8003422:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d104      	bne.n	8003436 <VL53L0X_PerformSingleMeasurement+0x66>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f001 fd15 	bl	8004e5c <VL53L0X_measurement_poll_for_completion>
 8003432:	4603      	mov	r3, r0
 8003434:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8003436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <VL53L0X_PerformSingleMeasurement+0x7c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800343e:	7bbb      	ldrb	r3, [r7, #14]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d103      	bne.n	800344c <VL53L0X_PerformSingleMeasurement+0x7c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2203      	movs	r2, #3
 8003448:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
 800344c:	4b0c      	ldr	r3, [pc, #48]	; (8003480 <VL53L0X_PerformSingleMeasurement+0xb0>)
 800344e:	681c      	ldr	r4, [r3, #0]
 8003450:	f004 fae6 	bl	8007a20 <HAL_GetTick>
 8003454:	4603      	mov	r3, r0
 8003456:	461a      	mov	r2, r3
 8003458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800345c:	9302      	str	r3, [sp, #8]
 800345e:	4b09      	ldr	r3, [pc, #36]	; (8003484 <VL53L0X_PerformSingleMeasurement+0xb4>)
 8003460:	9301      	str	r3, [sp, #4]
 8003462:	9200      	str	r2, [sp, #0]
 8003464:	4b09      	ldr	r3, [pc, #36]	; (800348c <VL53L0X_PerformSingleMeasurement+0xbc>)
 8003466:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800346a:	4621      	mov	r1, r4
 800346c:	2001      	movs	r0, #1
 800346e:	f004 fa29 	bl	80078c4 <trace_print_module_function>
	return Status;
 8003472:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	bd90      	pop	{r4, r7, pc}
 800347e:	bf00      	nop
 8003480:	200007c8 	.word	0x200007c8
 8003484:	0800c590 	.word	0x0800c590
 8003488:	0800bd5c 	.word	0x0800bd5c
 800348c:	0800bd70 	.word	0x0800bd70

08003490 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8003490:	b590      	push	{r4, r7, lr}
 8003492:	b08b      	sub	sp, #44	; 0x2c
 8003494:	af04      	add	r7, sp, #16
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800349c:	2300      	movs	r3, #0
 800349e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");
 80034a0:	4b18      	ldr	r3, [pc, #96]	; (8003504 <VL53L0X_PerformRefCalibration+0x74>)
 80034a2:	681c      	ldr	r4, [r3, #0]
 80034a4:	f004 fabc 	bl	8007a20 <HAL_GetTick>
 80034a8:	4603      	mov	r3, r0
 80034aa:	461a      	mov	r2, r3
 80034ac:	4b16      	ldr	r3, [pc, #88]	; (8003508 <VL53L0X_PerformRefCalibration+0x78>)
 80034ae:	9301      	str	r3, [sp, #4]
 80034b0:	9200      	str	r2, [sp, #0]
 80034b2:	4b16      	ldr	r3, [pc, #88]	; (800350c <VL53L0X_PerformRefCalibration+0x7c>)
 80034b4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80034b8:	4621      	mov	r1, r4
 80034ba:	2001      	movs	r0, #1
 80034bc:	f004 fa02 	bl	80078c4 <trace_print_module_function>

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80034c0:	2301      	movs	r3, #1
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	68b9      	ldr	r1, [r7, #8]
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f001 fc8b 	bl	8004de2 <VL53L0X_perform_ref_calibration>
 80034cc:	4603      	mov	r3, r0
 80034ce:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
 80034d0:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <VL53L0X_PerformRefCalibration+0x74>)
 80034d2:	681c      	ldr	r4, [r3, #0]
 80034d4:	f004 faa4 	bl	8007a20 <HAL_GetTick>
 80034d8:	4603      	mov	r3, r0
 80034da:	461a      	mov	r2, r3
 80034dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034e0:	9302      	str	r3, [sp, #8]
 80034e2:	4b09      	ldr	r3, [pc, #36]	; (8003508 <VL53L0X_PerformRefCalibration+0x78>)
 80034e4:	9301      	str	r3, [sp, #4]
 80034e6:	9200      	str	r2, [sp, #0]
 80034e8:	4b09      	ldr	r3, [pc, #36]	; (8003510 <VL53L0X_PerformRefCalibration+0x80>)
 80034ea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80034ee:	4621      	mov	r1, r4
 80034f0:	2001      	movs	r0, #1
 80034f2:	f004 f9e7 	bl	80078c4 <trace_print_module_function>
	return Status;
 80034f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd90      	pop	{r4, r7, pc}
 8003502:	bf00      	nop
 8003504:	200007c8 	.word	0x200007c8
 8003508:	0800c5e0 	.word	0x0800c5e0
 800350c:	0800bd5c 	.word	0x0800bd5c
 8003510:	0800bd70 	.word	0x0800bd70

08003514 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003520:	2300      	movs	r3, #0
 8003522:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800352a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800352c:	7dbb      	ldrb	r3, [r7, #22]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d005      	beq.n	800353e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8003532:	7dbb      	ldrb	r3, [r7, #22]
 8003534:	2b02      	cmp	r3, #2
 8003536:	d002      	beq.n	800353e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8003538:	7dbb      	ldrb	r3, [r7, #22]
 800353a:	2b03      	cmp	r3, #3
 800353c:	d147      	bne.n	80035ce <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800353e:	f107 030c 	add.w	r3, r7, #12
 8003542:	f107 0210 	add.w	r2, r7, #16
 8003546:	2101      	movs	r1, #1
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 fca1 	bl	8003e90 <VL53L0X_GetInterruptThresholds>
 800354e:	4603      	mov	r3, r0
 8003550:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8003558:	d803      	bhi.n	8003562 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800355a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800355c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8003560:	d935      	bls.n	80035ce <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8003562:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d131      	bne.n	80035ce <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d006      	beq.n	800357e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8003570:	491a      	ldr	r1, [pc, #104]	; (80035dc <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f003 fa28 	bl	80069c8 <VL53L0X_load_tuning_settings>
 8003578:	4603      	mov	r3, r0
 800357a:	75fb      	strb	r3, [r7, #23]
 800357c:	e027      	b.n	80035ce <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800357e:	2204      	movs	r2, #4
 8003580:	21ff      	movs	r1, #255	; 0xff
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fe fa2e 	bl	80019e4 <VL53L0X_WrByte>
 8003588:	4603      	mov	r3, r0
 800358a:	461a      	mov	r2, r3
 800358c:	7dfb      	ldrb	r3, [r7, #23]
 800358e:	4313      	orrs	r3, r2
 8003590:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8003592:	2200      	movs	r2, #0
 8003594:	2170      	movs	r1, #112	; 0x70
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fe fa24 	bl	80019e4 <VL53L0X_WrByte>
 800359c:	4603      	mov	r3, r0
 800359e:	461a      	mov	r2, r3
 80035a0:	7dfb      	ldrb	r3, [r7, #23]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80035a6:	2200      	movs	r2, #0
 80035a8:	21ff      	movs	r1, #255	; 0xff
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fe fa1a 	bl	80019e4 <VL53L0X_WrByte>
 80035b0:	4603      	mov	r3, r0
 80035b2:	461a      	mov	r2, r3
 80035b4:	7dfb      	ldrb	r3, [r7, #23]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80035ba:	2200      	movs	r2, #0
 80035bc:	2180      	movs	r1, #128	; 0x80
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7fe fa10 	bl	80019e4 <VL53L0X_WrByte>
 80035c4:	4603      	mov	r3, r0
 80035c6:	461a      	mov	r2, r3
 80035c8:	7dfb      	ldrb	r3, [r7, #23]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 80035ce:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000600 	.word	0x20000600

080035e0 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80035e0:	b590      	push	{r4, r7, lr}
 80035e2:	b08b      	sub	sp, #44	; 0x2c
 80035e4:	af04      	add	r7, sp, #16
 80035e6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80035e8:	2300      	movs	r3, #0
 80035ea:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80035ec:	2301      	movs	r3, #1
 80035ee:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");
 80035f0:	4b6e      	ldr	r3, [pc, #440]	; (80037ac <VL53L0X_StartMeasurement+0x1cc>)
 80035f2:	681c      	ldr	r4, [r3, #0]
 80035f4:	f004 fa14 	bl	8007a20 <HAL_GetTick>
 80035f8:	4603      	mov	r3, r0
 80035fa:	461a      	mov	r2, r3
 80035fc:	4b6c      	ldr	r3, [pc, #432]	; (80037b0 <VL53L0X_StartMeasurement+0x1d0>)
 80035fe:	9301      	str	r3, [sp, #4]
 8003600:	9200      	str	r2, [sp, #0]
 8003602:	4b6c      	ldr	r3, [pc, #432]	; (80037b4 <VL53L0X_StartMeasurement+0x1d4>)
 8003604:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003608:	4621      	mov	r1, r4
 800360a:	2001      	movs	r0, #1
 800360c:	f004 f95a 	bl	80078c4 <trace_print_module_function>

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8003610:	f107 030e 	add.w	r3, r7, #14
 8003614:	4619      	mov	r1, r3
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fe ffe2 	bl	80025e0 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800361c:	2201      	movs	r2, #1
 800361e:	2180      	movs	r1, #128	; 0x80
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7fe f9df 	bl	80019e4 <VL53L0X_WrByte>
 8003626:	4603      	mov	r3, r0
 8003628:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800362a:	2201      	movs	r2, #1
 800362c:	21ff      	movs	r1, #255	; 0xff
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fe f9d8 	bl	80019e4 <VL53L0X_WrByte>
 8003634:	4603      	mov	r3, r0
 8003636:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003638:	2200      	movs	r2, #0
 800363a:	2100      	movs	r1, #0
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7fe f9d1 	bl	80019e4 <VL53L0X_WrByte>
 8003642:	4603      	mov	r3, r0
 8003644:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800364c:	461a      	mov	r2, r3
 800364e:	2191      	movs	r1, #145	; 0x91
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7fe f9c7 	bl	80019e4 <VL53L0X_WrByte>
 8003656:	4603      	mov	r3, r0
 8003658:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800365a:	2201      	movs	r2, #1
 800365c:	2100      	movs	r1, #0
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fe f9c0 	bl	80019e4 <VL53L0X_WrByte>
 8003664:	4603      	mov	r3, r0
 8003666:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003668:	2200      	movs	r2, #0
 800366a:	21ff      	movs	r1, #255	; 0xff
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7fe f9b9 	bl	80019e4 <VL53L0X_WrByte>
 8003672:	4603      	mov	r3, r0
 8003674:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003676:	2200      	movs	r2, #0
 8003678:	2180      	movs	r1, #128	; 0x80
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7fe f9b2 	bl	80019e4 <VL53L0X_WrByte>
 8003680:	4603      	mov	r3, r0
 8003682:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8003684:	7bbb      	ldrb	r3, [r7, #14]
 8003686:	2b03      	cmp	r3, #3
 8003688:	d054      	beq.n	8003734 <VL53L0X_StartMeasurement+0x154>
 800368a:	2b03      	cmp	r3, #3
 800368c:	dc6c      	bgt.n	8003768 <VL53L0X_StartMeasurement+0x188>
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <VL53L0X_StartMeasurement+0xb8>
 8003692:	2b01      	cmp	r3, #1
 8003694:	d034      	beq.n	8003700 <VL53L0X_StartMeasurement+0x120>
 8003696:	e067      	b.n	8003768 <VL53L0X_StartMeasurement+0x188>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8003698:	2201      	movs	r2, #1
 800369a:	2100      	movs	r1, #0
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7fe f9a1 	bl	80019e4 <VL53L0X_WrByte>
 80036a2:	4603      	mov	r3, r0
 80036a4:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80036aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d15d      	bne.n	800376e <VL53L0X_StartMeasurement+0x18e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <VL53L0X_StartMeasurement+0xee>
					Status = VL53L0X_RdByte(Dev,
 80036bc:	f107 030d 	add.w	r3, r7, #13
 80036c0:	461a      	mov	r2, r3
 80036c2:	2100      	movs	r1, #0
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7fe fa0f 	bl	8001ae8 <VL53L0X_RdByte>
 80036ca:	4603      	mov	r3, r0
 80036cc:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	3301      	adds	r3, #1
 80036d2:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80036d4:	7b7a      	ldrb	r2, [r7, #13]
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
 80036d8:	4013      	ands	r3, r2
 80036da:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80036dc:	7bfa      	ldrb	r2, [r7, #15]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d107      	bne.n	80036f2 <VL53L0X_StartMeasurement+0x112>
				&& (Status == VL53L0X_ERROR_NONE)
 80036e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d103      	bne.n	80036f2 <VL53L0X_StartMeasurement+0x112>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80036f0:	d3e1      	bcc.n	80036b6 <VL53L0X_StartMeasurement+0xd6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80036f8:	d339      	bcc.n	800376e <VL53L0X_StartMeasurement+0x18e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80036fa:	23f9      	movs	r3, #249	; 0xf9
 80036fc:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80036fe:	e036      	b.n	800376e <VL53L0X_StartMeasurement+0x18e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003700:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d105      	bne.n	8003714 <VL53L0X_StartMeasurement+0x134>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8003708:	2101      	movs	r1, #1
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff ff02 	bl	8003514 <VL53L0X_CheckAndLoadInterruptSettings>
 8003710:	4603      	mov	r3, r0
 8003712:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003714:	2202      	movs	r2, #2
 8003716:	2100      	movs	r1, #0
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7fe f963 	bl	80019e4 <VL53L0X_WrByte>
 800371e:	4603      	mov	r3, r0
 8003720:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8003722:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d123      	bne.n	8003772 <VL53L0X_StartMeasurement+0x192>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2204      	movs	r2, #4
 800372e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8003732:	e01e      	b.n	8003772 <VL53L0X_StartMeasurement+0x192>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003734:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d105      	bne.n	8003748 <VL53L0X_StartMeasurement+0x168>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800373c:	2101      	movs	r1, #1
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff fee8 	bl	8003514 <VL53L0X_CheckAndLoadInterruptSettings>
 8003744:	4603      	mov	r3, r0
 8003746:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003748:	2204      	movs	r2, #4
 800374a:	2100      	movs	r1, #0
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7fe f949 	bl	80019e4 <VL53L0X_WrByte>
 8003752:	4603      	mov	r3, r0
 8003754:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8003756:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10b      	bne.n	8003776 <VL53L0X_StartMeasurement+0x196>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2204      	movs	r2, #4
 8003762:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8003766:	e006      	b.n	8003776 <VL53L0X_StartMeasurement+0x196>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003768:	23f8      	movs	r3, #248	; 0xf8
 800376a:	75fb      	strb	r3, [r7, #23]
 800376c:	e004      	b.n	8003778 <VL53L0X_StartMeasurement+0x198>
		break;
 800376e:	bf00      	nop
 8003770:	e002      	b.n	8003778 <VL53L0X_StartMeasurement+0x198>
		break;
 8003772:	bf00      	nop
 8003774:	e000      	b.n	8003778 <VL53L0X_StartMeasurement+0x198>
		break;
 8003776:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
 8003778:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <VL53L0X_StartMeasurement+0x1cc>)
 800377a:	681c      	ldr	r4, [r3, #0]
 800377c:	f004 f950 	bl	8007a20 <HAL_GetTick>
 8003780:	4603      	mov	r3, r0
 8003782:	461a      	mov	r2, r3
 8003784:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003788:	9302      	str	r3, [sp, #8]
 800378a:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <VL53L0X_StartMeasurement+0x1d0>)
 800378c:	9301      	str	r3, [sp, #4]
 800378e:	9200      	str	r2, [sp, #0]
 8003790:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <VL53L0X_StartMeasurement+0x1d8>)
 8003792:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003796:	4621      	mov	r1, r4
 8003798:	2001      	movs	r0, #1
 800379a:	f004 f893 	bl	80078c4 <trace_print_module_function>
	return Status;
 800379e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	371c      	adds	r7, #28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd90      	pop	{r4, r7, pc}
 80037aa:	bf00      	nop
 80037ac:	200007c8 	.word	0x200007c8
 80037b0:	0800c664 	.word	0x0800c664
 80037b4:	0800bd5c 	.word	0x0800bd5c
 80037b8:	0800bd70 	.word	0x0800bd70

080037bc <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80037bc:	b590      	push	{r4, r7, lr}
 80037be:	b089      	sub	sp, #36	; 0x24
 80037c0:	af04      	add	r7, sp, #16
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80037c6:	2300      	movs	r3, #0
 80037c8:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");
 80037ca:	4b2e      	ldr	r3, [pc, #184]	; (8003884 <VL53L0X_GetMeasurementDataReady+0xc8>)
 80037cc:	681c      	ldr	r4, [r3, #0]
 80037ce:	f004 f927 	bl	8007a20 <HAL_GetTick>
 80037d2:	4603      	mov	r3, r0
 80037d4:	461a      	mov	r2, r3
 80037d6:	4b2c      	ldr	r3, [pc, #176]	; (8003888 <VL53L0X_GetMeasurementDataReady+0xcc>)
 80037d8:	9301      	str	r3, [sp, #4]
 80037da:	9200      	str	r2, [sp, #0]
 80037dc:	4b2b      	ldr	r3, [pc, #172]	; (800388c <VL53L0X_GetMeasurementDataReady+0xd0>)
 80037de:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80037e2:	4621      	mov	r1, r4
 80037e4:	2001      	movs	r0, #1
 80037e6:	f004 f86d 	bl	80078c4 <trace_print_module_function>

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80037f0:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80037f2:	7bbb      	ldrb	r3, [r7, #14]
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d112      	bne.n	800381e <VL53L0X_GetMeasurementDataReady+0x62>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80037f8:	f107 0308 	add.w	r3, r7, #8
 80037fc:	4619      	mov	r1, r3
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fc14 	bl	800402c <VL53L0X_GetInterruptMaskStatus>
 8003804:	4603      	mov	r3, r0
 8003806:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b04      	cmp	r3, #4
 800380c:	d103      	bne.n	8003816 <VL53L0X_GetMeasurementDataReady+0x5a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2201      	movs	r2, #1
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	e01c      	b.n	8003850 <VL53L0X_GetMeasurementDataReady+0x94>
		else
			*pMeasurementDataReady = 0;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2200      	movs	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]
 800381c:	e018      	b.n	8003850 <VL53L0X_GetMeasurementDataReady+0x94>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800381e:	f107 030d 	add.w	r3, r7, #13
 8003822:	461a      	mov	r2, r3
 8003824:	2114      	movs	r1, #20
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fe f95e 	bl	8001ae8 <VL53L0X_RdByte>
 800382c:	4603      	mov	r3, r0
 800382e:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8003830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10b      	bne.n	8003850 <VL53L0X_GetMeasurementDataReady+0x94>
			if (SysRangeStatusRegister & 0x01)
 8003838:	7b7b      	ldrb	r3, [r7, #13]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <VL53L0X_GetMeasurementDataReady+0x8e>
				*pMeasurementDataReady = 1;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2201      	movs	r2, #1
 8003846:	701a      	strb	r2, [r3, #0]
 8003848:	e002      	b.n	8003850 <VL53L0X_GetMeasurementDataReady+0x94>
			else
				*pMeasurementDataReady = 0;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2200      	movs	r2, #0
 800384e:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
 8003850:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <VL53L0X_GetMeasurementDataReady+0xc8>)
 8003852:	681c      	ldr	r4, [r3, #0]
 8003854:	f004 f8e4 	bl	8007a20 <HAL_GetTick>
 8003858:	4603      	mov	r3, r0
 800385a:	461a      	mov	r2, r3
 800385c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003860:	9302      	str	r3, [sp, #8]
 8003862:	4b09      	ldr	r3, [pc, #36]	; (8003888 <VL53L0X_GetMeasurementDataReady+0xcc>)
 8003864:	9301      	str	r3, [sp, #4]
 8003866:	9200      	str	r2, [sp, #0]
 8003868:	4b09      	ldr	r3, [pc, #36]	; (8003890 <VL53L0X_GetMeasurementDataReady+0xd4>)
 800386a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800386e:	4621      	mov	r1, r4
 8003870:	2001      	movs	r0, #1
 8003872:	f004 f827 	bl	80078c4 <trace_print_module_function>
	return Status;
 8003876:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	bd90      	pop	{r4, r7, pc}
 8003882:	bf00      	nop
 8003884:	200007c8 	.word	0x200007c8
 8003888:	0800c698 	.word	0x0800c698
 800388c:	0800bd5c 	.word	0x0800bd5c
 8003890:	0800bd70 	.word	0x0800bd70

08003894 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8003894:	b5b0      	push	{r4, r5, r7, lr}
 8003896:	b098      	sub	sp, #96	; 0x60
 8003898:	af04      	add	r7, sp, #16
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800389e:	2300      	movs	r3, #0
 80038a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint16_t XtalkRangeMilliMeter;
	uint16_t LinearityCorrectiveGain;
	uint8_t localBuffer[12];
	VL53L0X_RangingMeasurementData_t LastRangeDataBuffer;

	LOG_FUNCTION_START("");
 80038a4:	4b9e      	ldr	r3, [pc, #632]	; (8003b20 <VL53L0X_GetRangingMeasurementData+0x28c>)
 80038a6:	681c      	ldr	r4, [r3, #0]
 80038a8:	f004 f8ba 	bl	8007a20 <HAL_GetTick>
 80038ac:	4603      	mov	r3, r0
 80038ae:	461a      	mov	r2, r3
 80038b0:	4b9c      	ldr	r3, [pc, #624]	; (8003b24 <VL53L0X_GetRangingMeasurementData+0x290>)
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	9200      	str	r2, [sp, #0]
 80038b6:	4b9c      	ldr	r3, [pc, #624]	; (8003b28 <VL53L0X_GetRangingMeasurementData+0x294>)
 80038b8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80038bc:	4621      	mov	r1, r4
 80038be:	2001      	movs	r0, #1
 80038c0:	f004 f800 	bl	80078c4 <trace_print_module_function>
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80038c4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038c8:	230c      	movs	r3, #12
 80038ca:	2114      	movs	r1, #20
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7fe f85d 	bl	800198c <VL53L0X_ReadMulti>
 80038d2:	4603      	mov	r3, r0
 80038d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80038d8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f040 80d1 	bne.w	8003a84 <VL53L0X_GetRangingMeasurementData+0x1f0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2200      	movs	r2, #0
 80038e6:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80038ee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	4413      	add	r3, r2
 8003900:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2200      	movs	r2, #0
 8003908:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800390a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800390e:	b29b      	uxth	r3, r3
 8003910:	021b      	lsls	r3, r3, #8
 8003912:	b29a      	uxth	r2, r3
 8003914:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003918:	b29b      	uxth	r3, r3
 800391a:	4413      	add	r3, r2
 800391c:	b29b      	uxth	r3, r3
 800391e:	025b      	lsls	r3, r3, #9
 8003920:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003926:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8003928:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800392c:	b29b      	uxth	r3, r3
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	b29a      	uxth	r2, r3
 8003932:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003936:	b29b      	uxth	r3, r3
 8003938:	4413      	add	r3, r2
 800393a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800393e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003942:	025b      	lsls	r3, r3, #9
 8003944:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800394a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800394e:	b29b      	uxth	r3, r3
 8003950:	021b      	lsls	r3, r3, #8
 8003952:	b29a      	uxth	r2, r3
 8003954:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003958:	b29b      	uxth	r3, r3
 800395a:	4413      	add	r3, r2
 800395c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003966:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8003968:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800396c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8003976:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800397e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8003982:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003984:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003988:	d046      	beq.n	8003a18 <VL53L0X_GetRangingMeasurementData+0x184>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800398a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800398c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003990:	fb02 f303 	mul.w	r3, r2, r3
 8003994:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003998:	4a64      	ldr	r2, [pc, #400]	; (8003b2c <VL53L0X_GetRangingMeasurementData+0x298>)
 800399a:	fb82 1203 	smull	r1, r2, r2, r3
 800399e:	1192      	asrs	r2, r2, #6
 80039a0:	17db      	asrs	r3, r3, #31
 80039a2:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80039a4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	7f1b      	ldrb	r3, [r3, #28]
 80039b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80039b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d02c      	beq.n	8003a18 <VL53L0X_GetRangingMeasurementData+0x184>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80039be:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80039c0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80039c4:	fb02 f303 	mul.w	r3, r2, r3
 80039c8:	121a      	asrs	r2, r3, #8
					<= 0) {
 80039ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d10d      	bne.n	80039ec <VL53L0X_GetRangingMeasurementData+0x158>
					if (RangeFractionalEnable)
 80039d0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d004      	beq.n	80039e2 <VL53L0X_GetRangingMeasurementData+0x14e>
						XtalkRangeMilliMeter = 8888;
 80039d8:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80039dc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80039e0:	e016      	b.n	8003a10 <VL53L0X_GetRangingMeasurementData+0x17c>
					else
						XtalkRangeMilliMeter = 8888
 80039e2:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80039e6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80039ea:	e011      	b.n	8003a10 <VL53L0X_GetRangingMeasurementData+0x17c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80039ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80039f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039f2:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80039f6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80039f8:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80039fc:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8003a00:	121b      	asrs	r3, r3, #8
 8003a02:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8003a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a06:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8003a08:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8003a0c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8003a10:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003a14:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8003a18:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00d      	beq.n	8003a3c <VL53L0X_GetRangingMeasurementData+0x1a8>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8003a20:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003a24:	089b      	lsrs	r3, r3, #2
 8003a26:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8003a2c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	019b      	lsls	r3, r3, #6
 8003a34:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	75da      	strb	r2, [r3, #23]
 8003a3a:	e006      	b.n	8003a4a <VL53L0X_GetRangingMeasurementData+0x1b6>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003a42:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2200      	movs	r2, #0
 8003a48:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8003a4a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003a4e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8003a52:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8003a56:	9301      	str	r3, [sp, #4]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f003 fd03 	bl	800746c <VL53L0X_get_pal_range_status>
 8003a66:	4603      	mov	r3, r0
 8003a68:	461a      	mov	r2, r3
 8003a6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8003a74:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d103      	bne.n	8003a84 <VL53L0X_GetRangingMeasurementData+0x1f0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8003a7c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003a84:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d12f      	bne.n	8003aec <VL53L0X_GetRangingMeasurementData+0x258>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f107 040c 	add.w	r4, r7, #12
 8003a92:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8003a96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003a9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8003aa6:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8003aac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8003ab4:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8003aba:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8003ac0:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8003ac6:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8003acc:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8003ad2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8003adc:	f107 050c 	add.w	r5, r7, #12
 8003ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ae4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003ae8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
 8003aec:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <VL53L0X_GetRangingMeasurementData+0x28c>)
 8003aee:	681c      	ldr	r4, [r3, #0]
 8003af0:	f003 ff96 	bl	8007a20 <HAL_GetTick>
 8003af4:	4603      	mov	r3, r0
 8003af6:	461a      	mov	r2, r3
 8003af8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003afc:	9302      	str	r3, [sp, #8]
 8003afe:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <VL53L0X_GetRangingMeasurementData+0x290>)
 8003b00:	9301      	str	r3, [sp, #4]
 8003b02:	9200      	str	r2, [sp, #0]
 8003b04:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <VL53L0X_GetRangingMeasurementData+0x29c>)
 8003b06:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	f003 fed9 	bl	80078c4 <trace_print_module_function>
	return Status;
 8003b12:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3750      	adds	r7, #80	; 0x50
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	200007c8 	.word	0x200007c8
 8003b24:	0800c6e4 	.word	0x0800c6e4
 8003b28:	0800bd5c 	.word	0x0800bd5c
 8003b2c:	10624dd3 	.word	0x10624dd3
 8003b30:	0800bd70 	.word	0x0800bd70

08003b34 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8003b34:	b590      	push	{r4, r7, lr}
 8003b36:	b089      	sub	sp, #36	; 0x24
 8003b38:	af04      	add	r7, sp, #16
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");
 8003b42:	4b26      	ldr	r3, [pc, #152]	; (8003bdc <VL53L0X_PerformSingleRangingMeasurement+0xa8>)
 8003b44:	681c      	ldr	r4, [r3, #0]
 8003b46:	f003 ff6b 	bl	8007a20 <HAL_GetTick>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	4b24      	ldr	r3, [pc, #144]	; (8003be0 <VL53L0X_PerformSingleRangingMeasurement+0xac>)
 8003b50:	9301      	str	r3, [sp, #4]
 8003b52:	9200      	str	r2, [sp, #0]
 8003b54:	4b23      	ldr	r3, [pc, #140]	; (8003be4 <VL53L0X_PerformSingleRangingMeasurement+0xb0>)
 8003b56:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	f003 feb1 	bl	80078c4 <trace_print_module_function>

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8003b62:	2100      	movs	r1, #0
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7fe fce5 	bl	8002534 <VL53L0X_SetDeviceMode>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d104      	bne.n	8003b80 <VL53L0X_PerformSingleRangingMeasurement+0x4c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff fc2a 	bl	80033d0 <VL53L0X_PerformSingleMeasurement>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003b80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d105      	bne.n	8003b94 <VL53L0X_PerformSingleRangingMeasurement+0x60>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8003b88:	6839      	ldr	r1, [r7, #0]
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff fe82 	bl	8003894 <VL53L0X_GetRangingMeasurementData>
 8003b90:	4603      	mov	r3, r0
 8003b92:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8003b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d105      	bne.n	8003ba8 <VL53L0X_PerformSingleRangingMeasurement+0x74>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f9d8 	bl	8003f54 <VL53L0X_ClearInterruptMask>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <VL53L0X_PerformSingleRangingMeasurement+0xa8>)
 8003baa:	681c      	ldr	r4, [r3, #0]
 8003bac:	f003 ff38 	bl	8007a20 <HAL_GetTick>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bb8:	9302      	str	r3, [sp, #8]
 8003bba:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <VL53L0X_PerformSingleRangingMeasurement+0xac>)
 8003bbc:	9301      	str	r3, [sp, #4]
 8003bbe:	9200      	str	r2, [sp, #0]
 8003bc0:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <VL53L0X_PerformSingleRangingMeasurement+0xb4>)
 8003bc2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	2001      	movs	r0, #1
 8003bca:	f003 fe7b 	bl	80078c4 <trace_print_module_function>
	return Status;
 8003bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd90      	pop	{r4, r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	200007c8 	.word	0x200007c8
 8003be0:	0800c74c 	.word	0x0800c74c
 8003be4:	0800bd5c 	.word	0x0800bd5c
 8003be8:	0800bd70 	.word	0x0800bd70

08003bec <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8003bec:	b590      	push	{r4, r7, lr}
 8003bee:	b089      	sub	sp, #36	; 0x24
 8003bf0:	af04      	add	r7, sp, #16
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	4608      	mov	r0, r1
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	70fb      	strb	r3, [r7, #3]
 8003bfe:	460b      	mov	r3, r1
 8003c00:	70bb      	strb	r3, [r7, #2]
 8003c02:	4613      	mov	r3, r2
 8003c04:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c06:	2300      	movs	r3, #0
 8003c08:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");
 8003c0a:	4b9d      	ldr	r3, [pc, #628]	; (8003e80 <VL53L0X_SetGpioConfig+0x294>)
 8003c0c:	681c      	ldr	r4, [r3, #0]
 8003c0e:	f003 ff07 	bl	8007a20 <HAL_GetTick>
 8003c12:	4603      	mov	r3, r0
 8003c14:	461a      	mov	r2, r3
 8003c16:	4b9b      	ldr	r3, [pc, #620]	; (8003e84 <VL53L0X_SetGpioConfig+0x298>)
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	9200      	str	r2, [sp, #0]
 8003c1c:	4b9a      	ldr	r3, [pc, #616]	; (8003e88 <VL53L0X_SetGpioConfig+0x29c>)
 8003c1e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003c22:	4621      	mov	r1, r4
 8003c24:	2001      	movs	r0, #1
 8003c26:	f003 fe4d 	bl	80078c4 <trace_print_module_function>

	if (Pin != 0) {
 8003c2a:	78fb      	ldrb	r3, [r7, #3]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <VL53L0X_SetGpioConfig+0x4a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8003c30:	23f6      	movs	r3, #246	; 0xf6
 8003c32:	73fb      	strb	r3, [r7, #15]
 8003c34:	e10a      	b.n	8003e4c <VL53L0X_SetGpioConfig+0x260>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8003c36:	78bb      	ldrb	r3, [r7, #2]
 8003c38:	2b14      	cmp	r3, #20
 8003c3a:	d111      	bne.n	8003c60 <VL53L0X_SetGpioConfig+0x74>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8003c3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d102      	bne.n	8003c4a <VL53L0X_SetGpioConfig+0x5e>
			data = 0x10;
 8003c44:	2310      	movs	r3, #16
 8003c46:	73bb      	strb	r3, [r7, #14]
 8003c48:	e001      	b.n	8003c4e <VL53L0X_SetGpioConfig+0x62>
		else
			data = 1;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8003c4e:	7bbb      	ldrb	r3, [r7, #14]
 8003c50:	461a      	mov	r2, r3
 8003c52:	2184      	movs	r1, #132	; 0x84
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7fd fec5 	bl	80019e4 <VL53L0X_WrByte>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	73fb      	strb	r3, [r7, #15]
 8003c5e:	e0f5      	b.n	8003e4c <VL53L0X_SetGpioConfig+0x260>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8003c60:	78bb      	ldrb	r3, [r7, #2]
 8003c62:	2b15      	cmp	r3, #21
 8003c64:	f040 8097 	bne.w	8003d96 <VL53L0X_SetGpioConfig+0x1aa>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8003c68:	2201      	movs	r2, #1
 8003c6a:	21ff      	movs	r1, #255	; 0xff
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7fd feb9 	bl	80019e4 <VL53L0X_WrByte>
 8003c72:	4603      	mov	r3, r0
 8003c74:	461a      	mov	r2, r3
 8003c76:	7bfb      	ldrb	r3, [r7, #15]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	2100      	movs	r1, #0
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7fd feaf 	bl	80019e4 <VL53L0X_WrByte>
 8003c86:	4603      	mov	r3, r0
 8003c88:	461a      	mov	r2, r3
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8003c90:	2200      	movs	r2, #0
 8003c92:	21ff      	movs	r1, #255	; 0xff
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7fd fea5 	bl	80019e4 <VL53L0X_WrByte>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	2180      	movs	r1, #128	; 0x80
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7fd fe9b 	bl	80019e4 <VL53L0X_WrByte>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8003cb8:	2202      	movs	r2, #2
 8003cba:	2185      	movs	r1, #133	; 0x85
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7fd fe91 	bl	80019e4 <VL53L0X_WrByte>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8003ccc:	2204      	movs	r2, #4
 8003cce:	21ff      	movs	r1, #255	; 0xff
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7fd fe87 	bl	80019e4 <VL53L0X_WrByte>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	461a      	mov	r2, r3
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	21cd      	movs	r1, #205	; 0xcd
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7fd fe7d 	bl	80019e4 <VL53L0X_WrByte>
 8003cea:	4603      	mov	r3, r0
 8003cec:	461a      	mov	r2, r3
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8003cf4:	2211      	movs	r2, #17
 8003cf6:	21cc      	movs	r1, #204	; 0xcc
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7fd fe73 	bl	80019e4 <VL53L0X_WrByte>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	461a      	mov	r2, r3
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8003d08:	2207      	movs	r2, #7
 8003d0a:	21ff      	movs	r1, #255	; 0xff
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7fd fe69 	bl	80019e4 <VL53L0X_WrByte>
 8003d12:	4603      	mov	r3, r0
 8003d14:	461a      	mov	r2, r3
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	21be      	movs	r1, #190	; 0xbe
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7fd fe5f 	bl	80019e4 <VL53L0X_WrByte>
 8003d26:	4603      	mov	r3, r0
 8003d28:	461a      	mov	r2, r3
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8003d30:	2206      	movs	r2, #6
 8003d32:	21ff      	movs	r1, #255	; 0xff
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7fd fe55 	bl	80019e4 <VL53L0X_WrByte>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8003d44:	2209      	movs	r2, #9
 8003d46:	21cc      	movs	r1, #204	; 0xcc
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7fd fe4b 	bl	80019e4 <VL53L0X_WrByte>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	461a      	mov	r2, r3
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8003d58:	2200      	movs	r2, #0
 8003d5a:	21ff      	movs	r1, #255	; 0xff
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7fd fe41 	bl	80019e4 <VL53L0X_WrByte>
 8003d62:	4603      	mov	r3, r0
 8003d64:	461a      	mov	r2, r3
 8003d66:	7bfb      	ldrb	r3, [r7, #15]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	21ff      	movs	r1, #255	; 0xff
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7fd fe37 	bl	80019e4 <VL53L0X_WrByte>
 8003d76:	4603      	mov	r3, r0
 8003d78:	461a      	mov	r2, r3
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003d80:	2200      	movs	r2, #0
 8003d82:	2100      	movs	r1, #0
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7fd fe2d 	bl	80019e4 <VL53L0X_WrByte>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	73fb      	strb	r3, [r7, #15]
 8003d94:	e05a      	b.n	8003e4c <VL53L0X_SetGpioConfig+0x260>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8003d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d122      	bne.n	8003de4 <VL53L0X_SetGpioConfig+0x1f8>
			switch (Functionality) {
 8003d9e:	787b      	ldrb	r3, [r7, #1]
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d81c      	bhi.n	8003dde <VL53L0X_SetGpioConfig+0x1f2>
 8003da4:	a201      	add	r2, pc, #4	; (adr r2, 8003dac <VL53L0X_SetGpioConfig+0x1c0>)
 8003da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003daa:	bf00      	nop
 8003dac:	08003dc1 	.word	0x08003dc1
 8003db0:	08003dc7 	.word	0x08003dc7
 8003db4:	08003dcd 	.word	0x08003dcd
 8003db8:	08003dd3 	.word	0x08003dd3
 8003dbc:	08003dd9 	.word	0x08003dd9
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	73bb      	strb	r3, [r7, #14]
				break;
 8003dc4:	e00f      	b.n	8003de6 <VL53L0X_SetGpioConfig+0x1fa>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	73bb      	strb	r3, [r7, #14]
				break;
 8003dca:	e00c      	b.n	8003de6 <VL53L0X_SetGpioConfig+0x1fa>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8003dcc:	2302      	movs	r3, #2
 8003dce:	73bb      	strb	r3, [r7, #14]
				break;
 8003dd0:	e009      	b.n	8003de6 <VL53L0X_SetGpioConfig+0x1fa>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	73bb      	strb	r3, [r7, #14]
				break;
 8003dd6:	e006      	b.n	8003de6 <VL53L0X_SetGpioConfig+0x1fa>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8003dd8:	2304      	movs	r3, #4
 8003dda:	73bb      	strb	r3, [r7, #14]
				break;
 8003ddc:	e003      	b.n	8003de6 <VL53L0X_SetGpioConfig+0x1fa>
			default:
				Status =
 8003dde:	23f5      	movs	r3, #245	; 0xf5
 8003de0:	73fb      	strb	r3, [r7, #15]
 8003de2:	e000      	b.n	8003de6 <VL53L0X_SetGpioConfig+0x1fa>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8003de4:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8003de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d107      	bne.n	8003dfe <VL53L0X_SetGpioConfig+0x212>
			Status = VL53L0X_WrByte(Dev,
 8003dee:	7bbb      	ldrb	r3, [r7, #14]
 8003df0:	461a      	mov	r2, r3
 8003df2:	210a      	movs	r1, #10
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7fd fdf5 	bl	80019e4 <VL53L0X_WrByte>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8003dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d110      	bne.n	8003e28 <VL53L0X_SetGpioConfig+0x23c>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8003e06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d102      	bne.n	8003e14 <VL53L0X_SetGpioConfig+0x228>
				data = 0;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	73bb      	strb	r3, [r7, #14]
 8003e12:	e001      	b.n	8003e18 <VL53L0X_SetGpioConfig+0x22c>
			else
				data = (uint8_t)(1 << 4);
 8003e14:	2310      	movs	r3, #16
 8003e16:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8003e18:	7bbb      	ldrb	r3, [r7, #14]
 8003e1a:	22ef      	movs	r2, #239	; 0xef
 8003e1c:	2184      	movs	r1, #132	; 0x84
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fd fe2e 	bl	8001a80 <VL53L0X_UpdateByte>
 8003e24:	4603      	mov	r3, r0
 8003e26:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8003e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d103      	bne.n	8003e38 <VL53L0X_SetGpioConfig+0x24c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	787a      	ldrb	r2, [r7, #1]
 8003e34:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8003e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d105      	bne.n	8003e4c <VL53L0X_SetGpioConfig+0x260>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8003e40:	2100      	movs	r1, #0
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f886 	bl	8003f54 <VL53L0X_ClearInterruptMask>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
 8003e4c:	4b0c      	ldr	r3, [pc, #48]	; (8003e80 <VL53L0X_SetGpioConfig+0x294>)
 8003e4e:	681c      	ldr	r4, [r3, #0]
 8003e50:	f003 fde6 	bl	8007a20 <HAL_GetTick>
 8003e54:	4603      	mov	r3, r0
 8003e56:	461a      	mov	r2, r3
 8003e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e5c:	9302      	str	r3, [sp, #8]
 8003e5e:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <VL53L0X_SetGpioConfig+0x298>)
 8003e60:	9301      	str	r3, [sp, #4]
 8003e62:	9200      	str	r2, [sp, #0]
 8003e64:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <VL53L0X_SetGpioConfig+0x2a0>)
 8003e66:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003e6a:	4621      	mov	r1, r4
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	f003 fd29 	bl	80078c4 <trace_print_module_function>
	return Status;
 8003e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd90      	pop	{r4, r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	200007c8 	.word	0x200007c8
 8003e84:	0800c7cc 	.word	0x0800c7cc
 8003e88:	0800bd5c 	.word	0x0800bd5c
 8003e8c:	0800bd70 	.word	0x0800bd70

08003e90 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8003e90:	b590      	push	{r4, r7, lr}
 8003e92:	b08b      	sub	sp, #44	; 0x2c
 8003e94:	af04      	add	r7, sp, #16
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	607a      	str	r2, [r7, #4]
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");
 8003ea4:	4b26      	ldr	r3, [pc, #152]	; (8003f40 <VL53L0X_GetInterruptThresholds+0xb0>)
 8003ea6:	681c      	ldr	r4, [r3, #0]
 8003ea8:	f003 fdba 	bl	8007a20 <HAL_GetTick>
 8003eac:	4603      	mov	r3, r0
 8003eae:	461a      	mov	r2, r3
 8003eb0:	4b24      	ldr	r3, [pc, #144]	; (8003f44 <VL53L0X_GetInterruptThresholds+0xb4>)
 8003eb2:	9301      	str	r3, [sp, #4]
 8003eb4:	9200      	str	r2, [sp, #0]
 8003eb6:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <VL53L0X_GetInterruptThresholds+0xb8>)
 8003eb8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003ebc:	4621      	mov	r1, r4
 8003ebe:	2001      	movs	r0, #1
 8003ec0:	f003 fd00 	bl	80078c4 <trace_print_module_function>

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8003ec4:	f107 0314 	add.w	r3, r7, #20
 8003ec8:	461a      	mov	r2, r3
 8003eca:	210e      	movs	r1, #14
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f7fd fe35 	bl	8001b3c <VL53L0X_RdWord>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8003ed6:	8abb      	ldrh	r3, [r7, #20]
 8003ed8:	045b      	lsls	r3, r3, #17
 8003eda:	461a      	mov	r2, r3
 8003edc:	4b1b      	ldr	r3, [pc, #108]	; (8003f4c <VL53L0X_GetInterruptThresholds+0xbc>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8003ee4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10f      	bne.n	8003f0c <VL53L0X_GetInterruptThresholds+0x7c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8003eec:	f107 0314 	add.w	r3, r7, #20
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	210c      	movs	r1, #12
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f7fd fe21 	bl	8001b3c <VL53L0X_RdWord>
 8003efa:	4603      	mov	r3, r0
 8003efc:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8003efe:	8abb      	ldrh	r3, [r7, #20]
 8003f00:	045b      	lsls	r3, r3, #17
 8003f02:	461a      	mov	r2, r3
 8003f04:	4b11      	ldr	r3, [pc, #68]	; (8003f4c <VL53L0X_GetInterruptThresholds+0xbc>)
 8003f06:	4013      	ands	r3, r2
		*pThresholdHigh =
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
 8003f0c:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <VL53L0X_GetInterruptThresholds+0xb0>)
 8003f0e:	681c      	ldr	r4, [r3, #0]
 8003f10:	f003 fd86 	bl	8007a20 <HAL_GetTick>
 8003f14:	4603      	mov	r3, r0
 8003f16:	461a      	mov	r2, r3
 8003f18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f1c:	9302      	str	r3, [sp, #8]
 8003f1e:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <VL53L0X_GetInterruptThresholds+0xb4>)
 8003f20:	9301      	str	r3, [sp, #4]
 8003f22:	9200      	str	r2, [sp, #0]
 8003f24:	4b0a      	ldr	r3, [pc, #40]	; (8003f50 <VL53L0X_GetInterruptThresholds+0xc0>)
 8003f26:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003f2a:	4621      	mov	r1, r4
 8003f2c:	2001      	movs	r0, #1
 8003f2e:	f003 fcc9 	bl	80078c4 <trace_print_module_function>
	return Status;
 8003f32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	371c      	adds	r7, #28
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd90      	pop	{r4, r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	200007c8 	.word	0x200007c8
 8003f44:	0800c81c 	.word	0x0800c81c
 8003f48:	0800bd5c 	.word	0x0800bd5c
 8003f4c:	1ffe0000 	.word	0x1ffe0000
 8003f50:	0800bd70 	.word	0x0800bd70

08003f54 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8003f54:	b590      	push	{r4, r7, lr}
 8003f56:	b089      	sub	sp, #36	; 0x24
 8003f58:	af04      	add	r7, sp, #16
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");
 8003f62:	4b2e      	ldr	r3, [pc, #184]	; (800401c <VL53L0X_ClearInterruptMask+0xc8>)
 8003f64:	681c      	ldr	r4, [r3, #0]
 8003f66:	f003 fd5b 	bl	8007a20 <HAL_GetTick>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4b2c      	ldr	r3, [pc, #176]	; (8004020 <VL53L0X_ClearInterruptMask+0xcc>)
 8003f70:	9301      	str	r3, [sp, #4]
 8003f72:	9200      	str	r2, [sp, #0]
 8003f74:	4b2b      	ldr	r3, [pc, #172]	; (8004024 <VL53L0X_ClearInterruptMask+0xd0>)
 8003f76:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003f7a:	4621      	mov	r1, r4
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	f003 fca1 	bl	80078c4 <trace_print_module_function>

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8003f82:	2300      	movs	r3, #0
 8003f84:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8003f86:	2201      	movs	r2, #1
 8003f88:	210b      	movs	r1, #11
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fd fd2a 	bl	80019e4 <VL53L0X_WrByte>
 8003f90:	4603      	mov	r3, r0
 8003f92:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8003f94:	2200      	movs	r2, #0
 8003f96:	210b      	movs	r1, #11
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7fd fd23 	bl	80019e4 <VL53L0X_WrByte>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8003fa8:	f107 030d 	add.w	r3, r7, #13
 8003fac:	461a      	mov	r2, r3
 8003fae:	2113      	movs	r1, #19
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7fd fd99 	bl	8001ae8 <VL53L0X_RdByte>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	461a      	mov	r2, r3
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8003fc0:	7bbb      	ldrb	r3, [r7, #14]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8003fc6:	7b7b      	ldrb	r3, [r7, #13]
 8003fc8:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d006      	beq.n	8003fde <VL53L0X_ClearInterruptMask+0x8a>
			&& (LoopCount < 3)
 8003fd0:	7bbb      	ldrb	r3, [r7, #14]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d803      	bhi.n	8003fde <VL53L0X_ClearInterruptMask+0x8a>
			&& (Status == VL53L0X_ERROR_NONE));
 8003fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0d3      	beq.n	8003f86 <VL53L0X_ClearInterruptMask+0x32>


	if (LoopCount >= 3)
 8003fde:	7bbb      	ldrb	r3, [r7, #14]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <VL53L0X_ClearInterruptMask+0x94>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8003fe4:	23f4      	movs	r3, #244	; 0xf4
 8003fe6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	; (800401c <VL53L0X_ClearInterruptMask+0xc8>)
 8003fea:	681c      	ldr	r4, [r3, #0]
 8003fec:	f003 fd18 	bl	8007a20 <HAL_GetTick>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ff8:	9302      	str	r3, [sp, #8]
 8003ffa:	4b09      	ldr	r3, [pc, #36]	; (8004020 <VL53L0X_ClearInterruptMask+0xcc>)
 8003ffc:	9301      	str	r3, [sp, #4]
 8003ffe:	9200      	str	r2, [sp, #0]
 8004000:	4b09      	ldr	r3, [pc, #36]	; (8004028 <VL53L0X_ClearInterruptMask+0xd4>)
 8004002:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004006:	4621      	mov	r1, r4
 8004008:	2001      	movs	r0, #1
 800400a:	f003 fc5b 	bl	80078c4 <trace_print_module_function>
	return Status;
 800400e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	bd90      	pop	{r4, r7, pc}
 800401a:	bf00      	nop
 800401c:	200007c8 	.word	0x200007c8
 8004020:	0800c85c 	.word	0x0800c85c
 8004024:	0800bd5c 	.word	0x0800bd5c
 8004028:	0800bd70 	.word	0x0800bd70

0800402c <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800402c:	b590      	push	{r4, r7, lr}
 800402e:	b089      	sub	sp, #36	; 0x24
 8004030:	af04      	add	r7, sp, #16
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004036:	2300      	movs	r3, #0
 8004038:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");
 800403a:	4b1f      	ldr	r3, [pc, #124]	; (80040b8 <VL53L0X_GetInterruptMaskStatus+0x8c>)
 800403c:	681c      	ldr	r4, [r3, #0]
 800403e:	f003 fcef 	bl	8007a20 <HAL_GetTick>
 8004042:	4603      	mov	r3, r0
 8004044:	461a      	mov	r2, r3
 8004046:	4b1d      	ldr	r3, [pc, #116]	; (80040bc <VL53L0X_GetInterruptMaskStatus+0x90>)
 8004048:	9301      	str	r3, [sp, #4]
 800404a:	9200      	str	r2, [sp, #0]
 800404c:	4b1c      	ldr	r3, [pc, #112]	; (80040c0 <VL53L0X_GetInterruptMaskStatus+0x94>)
 800404e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004052:	4621      	mov	r1, r4
 8004054:	2001      	movs	r0, #1
 8004056:	f003 fc35 	bl	80078c4 <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800405a:	f107 030e 	add.w	r3, r7, #14
 800405e:	461a      	mov	r2, r3
 8004060:	2113      	movs	r1, #19
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fd fd40 	bl	8001ae8 <VL53L0X_RdByte>
 8004068:	4603      	mov	r3, r0
 800406a:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800406c:	7bbb      	ldrb	r3, [r7, #14]
 800406e:	f003 0207 	and.w	r2, r3, #7
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8004076:	7bbb      	ldrb	r3, [r7, #14]
 8004078:	f003 0318 	and.w	r3, r3, #24
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <VL53L0X_GetInterruptMaskStatus+0x58>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8004080:	23fa      	movs	r3, #250	; 0xfa
 8004082:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
 8004084:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <VL53L0X_GetInterruptMaskStatus+0x8c>)
 8004086:	681c      	ldr	r4, [r3, #0]
 8004088:	f003 fcca 	bl	8007a20 <HAL_GetTick>
 800408c:	4603      	mov	r3, r0
 800408e:	461a      	mov	r2, r3
 8004090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004094:	9302      	str	r3, [sp, #8]
 8004096:	4b09      	ldr	r3, [pc, #36]	; (80040bc <VL53L0X_GetInterruptMaskStatus+0x90>)
 8004098:	9301      	str	r3, [sp, #4]
 800409a:	9200      	str	r2, [sp, #0]
 800409c:	4b09      	ldr	r3, [pc, #36]	; (80040c4 <VL53L0X_GetInterruptMaskStatus+0x98>)
 800409e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80040a2:	4621      	mov	r1, r4
 80040a4:	2001      	movs	r0, #1
 80040a6:	f003 fc0d 	bl	80078c4 <trace_print_module_function>
	return Status;
 80040aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd90      	pop	{r4, r7, pc}
 80040b6:	bf00      	nop
 80040b8:	200007c8 	.word	0x200007c8
 80040bc:	0800c878 	.word	0x0800c878
 80040c0:	0800bd5c 	.word	0x0800bd5c
 80040c4:	0800bd70 	.word	0x0800bd70

080040c8 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80040c8:	b590      	push	{r4, r7, lr}
 80040ca:	b08b      	sub	sp, #44	; 0x2c
 80040cc:	af04      	add	r7, sp, #16
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80040d4:	2300      	movs	r3, #0
 80040d6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");
 80040d8:	4b17      	ldr	r3, [pc, #92]	; (8004138 <VL53L0X_PerformRefSpadManagement+0x70>)
 80040da:	681c      	ldr	r4, [r3, #0]
 80040dc:	f003 fca0 	bl	8007a20 <HAL_GetTick>
 80040e0:	4603      	mov	r3, r0
 80040e2:	461a      	mov	r2, r3
 80040e4:	4b15      	ldr	r3, [pc, #84]	; (800413c <VL53L0X_PerformRefSpadManagement+0x74>)
 80040e6:	9301      	str	r3, [sp, #4]
 80040e8:	9200      	str	r2, [sp, #0]
 80040ea:	4b15      	ldr	r3, [pc, #84]	; (8004140 <VL53L0X_PerformRefSpadManagement+0x78>)
 80040ec:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80040f0:	4621      	mov	r1, r4
 80040f2:	2001      	movs	r0, #1
 80040f4:	f003 fbe6 	bl	80078c4 <trace_print_module_function>

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 fa1f 	bl	8004540 <VL53L0X_perform_ref_spad_management>
 8004102:	4603      	mov	r3, r0
 8004104:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);
 8004106:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <VL53L0X_PerformRefSpadManagement+0x70>)
 8004108:	681c      	ldr	r4, [r3, #0]
 800410a:	f003 fc89 	bl	8007a20 <HAL_GetTick>
 800410e:	4603      	mov	r3, r0
 8004110:	461a      	mov	r2, r3
 8004112:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004116:	9302      	str	r3, [sp, #8]
 8004118:	4b08      	ldr	r3, [pc, #32]	; (800413c <VL53L0X_PerformRefSpadManagement+0x74>)
 800411a:	9301      	str	r3, [sp, #4]
 800411c:	9200      	str	r2, [sp, #0]
 800411e:	4b09      	ldr	r3, [pc, #36]	; (8004144 <VL53L0X_PerformRefSpadManagement+0x7c>)
 8004120:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004124:	4621      	mov	r1, r4
 8004126:	2001      	movs	r0, #1
 8004128:	f003 fbcc 	bl	80078c4 <trace_print_module_function>

	return Status;
 800412c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004130:	4618      	mov	r0, r3
 8004132:	371c      	adds	r7, #28
 8004134:	46bd      	mov	sp, r7
 8004136:	bd90      	pop	{r4, r7, pc}
 8004138:	200007c8 	.word	0x200007c8
 800413c:	0800c984 	.word	0x0800c984
 8004140:	0800bd5c 	.word	0x0800bd5c
 8004144:	0800bd70 	.word	0x0800bd70

08004148 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004152:	2300      	movs	r3, #0
 8004154:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8004156:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800415a:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800415c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004160:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8004162:	f107 0308 	add.w	r3, r7, #8
 8004166:	461a      	mov	r2, r3
 8004168:	2128      	movs	r1, #40	; 0x28
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7fd fce6 	bl	8001b3c <VL53L0X_RdWord>
 8004170:	4603      	mov	r3, r0
 8004172:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8004174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d11e      	bne.n	80041ba <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800417c:	893b      	ldrh	r3, [r7, #8]
 800417e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004182:	b29b      	uxth	r3, r3
 8004184:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8004186:	893b      	ldrh	r3, [r7, #8]
 8004188:	461a      	mov	r2, r3
 800418a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800418e:	429a      	cmp	r2, r3
 8004190:	dd0b      	ble.n	80041aa <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8004192:	893a      	ldrh	r2, [r7, #8]
 8004194:	897b      	ldrh	r3, [r7, #10]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	b29b      	uxth	r3, r3
 800419a:	b21b      	sxth	r3, r3
 800419c:	461a      	mov	r2, r3
					* 250;
 800419e:	23fa      	movs	r3, #250	; 0xfa
 80041a0:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	e007      	b.n	80041ba <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80041aa:	893b      	ldrh	r3, [r7, #8]
 80041ac:	b21b      	sxth	r3, r3
 80041ae:	461a      	mov	r2, r3
 80041b0:	23fa      	movs	r3, #250	; 0xfa
 80041b2:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80041ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b08b      	sub	sp, #44	; 0x2c
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	60f8      	str	r0, [r7, #12]
 80041ce:	60b9      	str	r1, [r7, #8]
 80041d0:	607a      	str	r2, [r7, #4]
 80041d2:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80041d4:	2308      	movs	r3, #8
 80041d6:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 80041d8:	2300      	movs	r3, #0
 80041da:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	f04f 32ff 	mov.w	r2, #4294967295
 80041e2:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ec:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80041f6:	69b9      	ldr	r1, [r7, #24]
 80041f8:	fb01 f202 	mul.w	r2, r1, r2
 80041fc:	1a9b      	subs	r3, r3, r2
 80041fe:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	627b      	str	r3, [r7, #36]	; 0x24
 8004204:	e030      	b.n	8004268 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8004206:	2300      	movs	r3, #0
 8004208:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	4413      	add	r3, r2
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8004214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	429a      	cmp	r2, r3
 800421a:	d11e      	bne.n	800425a <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800421c:	7ffa      	ldrb	r2, [r7, #31]
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	fa42 f303 	asr.w	r3, r2, r3
 8004224:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800422a:	e016      	b.n	800425a <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800422c:	7ffb      	ldrb	r3, [r7, #31]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00b      	beq.n	800424e <get_next_good_spad+0x88>
				success = 1;
 8004236:	2301      	movs	r3, #1
 8004238:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	fb02 f203 	mul.w	r2, r2, r3
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	4413      	add	r3, r2
 8004246:	461a      	mov	r2, r3
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	601a      	str	r2, [r3, #0]
				break;
 800424c:	e009      	b.n	8004262 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800424e:	7ffb      	ldrb	r3, [r7, #31]
 8004250:	085b      	lsrs	r3, r3, #1
 8004252:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	3301      	adds	r3, #1
 8004258:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800425a:	6a3a      	ldr	r2, [r7, #32]
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	429a      	cmp	r2, r3
 8004260:	d3e4      	bcc.n	800422c <get_next_good_spad+0x66>
				coarseIndex++) {
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	3301      	adds	r3, #1
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8004268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	429a      	cmp	r2, r3
 800426e:	d202      	bcs.n	8004276 <get_next_good_spad+0xb0>
 8004270:	7fbb      	ldrb	r3, [r7, #30]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0c7      	beq.n	8004206 <get_next_good_spad+0x40>
		}
	}
}
 8004276:	bf00      	nop
 8004278:	372c      	adds	r7, #44	; 0x2c
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800428c:	2301      	movs	r3, #1
 800428e:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	099b      	lsrs	r3, r3, #6
 8004294:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8004296:	4a07      	ldr	r2, [pc, #28]	; (80042b4 <is_aperture+0x30>)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <is_aperture+0x22>
		isAperture = 0;
 80042a2:	2300      	movs	r3, #0
 80042a4:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	200007b8 	.word	0x200007b8

080042b8 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b089      	sub	sp, #36	; 0x24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80042c4:	2300      	movs	r3, #0
 80042c6:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80042c8:	2308      	movs	r3, #8
 80042ca:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d4:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	fbb3 f2f2 	udiv	r2, r3, r2
 80042de:	69b9      	ldr	r1, [r7, #24]
 80042e0:	fb01 f202 	mul.w	r2, r1, r2
 80042e4:	1a9b      	subs	r3, r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d302      	bcc.n	80042f6 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80042f0:	23ce      	movs	r3, #206	; 0xce
 80042f2:	77fb      	strb	r3, [r7, #31]
 80042f4:	e010      	b.n	8004318 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	4413      	add	r3, r2
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	b25a      	sxtb	r2, r3
 8004300:	2101      	movs	r1, #1
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	fa01 f303 	lsl.w	r3, r1, r3
 8004308:	b25b      	sxtb	r3, r3
 800430a:	4313      	orrs	r3, r2
 800430c:	b259      	sxtb	r1, r3
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	4413      	add	r3, r2
 8004314:	b2ca      	uxtb	r2, r1
 8004316:	701a      	strb	r2, [r3, #0]

	return status;
 8004318:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3724      	adds	r7, #36	; 0x24
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8004332:	2306      	movs	r3, #6
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	21b0      	movs	r1, #176	; 0xb0
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7fd faf7 	bl	800192c <VL53L0X_WriteMulti>
 800433e:	4603      	mov	r3, r0
 8004340:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8004342:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8004358:	2306      	movs	r3, #6
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	21b0      	movs	r1, #176	; 0xb0
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7fd fb14 	bl	800198c <VL53L0X_ReadMulti>
 8004364:	4603      	mov	r3, r0
 8004366:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8004368:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08c      	sub	sp, #48	; 0x30
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	607a      	str	r2, [r7, #4]
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	460b      	mov	r3, r1
 8004382:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8004384:	2300      	movs	r3, #0
 8004386:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800438a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800438c:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800438e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004390:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8004392:	2300      	movs	r3, #0
 8004394:	62bb      	str	r3, [r7, #40]	; 0x28
 8004396:	e02b      	b.n	80043f0 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8004398:	f107 031c 	add.w	r3, r7, #28
 800439c:	6a3a      	ldr	r2, [r7, #32]
 800439e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff ff10 	bl	80041c6 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ac:	d103      	bne.n	80043b6 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80043ae:	23ce      	movs	r3, #206	; 0xce
 80043b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80043b4:	e020      	b.n	80043f8 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	461a      	mov	r2, r3
 80043ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043bc:	4413      	add	r3, r2
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff ff60 	bl	8004284 <is_aperture>
 80043c4:	4603      	mov	r3, r0
 80043c6:	461a      	mov	r2, r3
 80043c8:	7afb      	ldrb	r3, [r7, #11]
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d003      	beq.n	80043d6 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80043ce:	23ce      	movs	r3, #206	; 0xce
 80043d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80043d4:	e010      	b.n	80043f8 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80043da:	6a3a      	ldr	r2, [r7, #32]
 80043dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043de:	6838      	ldr	r0, [r7, #0]
 80043e0:	f7ff ff6a 	bl	80042b8 <enable_spad_bit>
		currentSpad++;
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	3301      	adds	r3, #1
 80043e8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80043ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ec:	3301      	adds	r3, #1
 80043ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80043f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d3cf      	bcc.n	8004398 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 80043f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043fa:	6a3a      	ldr	r2, [r7, #32]
 80043fc:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 80043fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004402:	2b00      	cmp	r3, #0
 8004404:	d106      	bne.n	8004414 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8004406:	6839      	ldr	r1, [r7, #0]
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f7ff ff8d 	bl	8004328 <set_ref_spad_map>
 800440e:	4603      	mov	r3, r0
 8004410:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8004414:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004418:	2b00      	cmp	r3, #0
 800441a:	d121      	bne.n	8004460 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800441c:	f107 0314 	add.w	r3, r7, #20
 8004420:	4619      	mov	r1, r3
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f7ff ff93 	bl	800434e <get_ref_spad_map>
 8004428:	4603      	mov	r3, r0
 800442a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800442e:	2300      	movs	r3, #0
 8004430:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8004432:	e011      	b.n	8004458 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	4413      	add	r3, r2
 800443a:	781a      	ldrb	r2, [r3, #0]
 800443c:	f107 0114 	add.w	r1, r7, #20
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	440b      	add	r3, r1
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d003      	beq.n	8004452 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800444a:	23ce      	movs	r3, #206	; 0xce
 800444c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8004450:	e006      	b.n	8004460 <enable_ref_spads+0xec>
			}
			i++;
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	3301      	adds	r3, #1
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8004458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800445a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445c:	429a      	cmp	r2, r3
 800445e:	d3e9      	bcc.n	8004434 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8004460:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004464:	4618      	mov	r0, r3
 8004466:	3730      	adds	r7, #48	; 0x30
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b08a      	sub	sp, #40	; 0x28
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8004476:	2300      	movs	r3, #0
 8004478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800447c:	2300      	movs	r3, #0
 800447e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004488:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800448c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004490:	2b00      	cmp	r3, #0
 8004492:	d107      	bne.n	80044a4 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8004494:	22c0      	movs	r2, #192	; 0xc0
 8004496:	2101      	movs	r1, #1
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7fd faa3 	bl	80019e4 <VL53L0X_WrByte>
 800449e:	4603      	mov	r3, r0
 80044a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80044a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d108      	bne.n	80044be <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80044ac:	f107 0308 	add.w	r3, r7, #8
 80044b0:	4619      	mov	r1, r3
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7ff fb3e 	bl	8003b34 <VL53L0X_PerformSingleRangingMeasurement>
 80044b8:	4603      	mov	r3, r0
 80044ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80044be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d107      	bne.n	80044d6 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80044c6:	2201      	movs	r2, #1
 80044c8:	21ff      	movs	r1, #255	; 0xff
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fd fa8a 	bl	80019e4 <VL53L0X_WrByte>
 80044d0:	4603      	mov	r3, r0
 80044d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 80044d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d107      	bne.n	80044ee <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	21b6      	movs	r1, #182	; 0xb6
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fd fb2a 	bl	8001b3c <VL53L0X_RdWord>
 80044e8:	4603      	mov	r3, r0
 80044ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 80044ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d107      	bne.n	8004506 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80044f6:	2200      	movs	r2, #0
 80044f8:	21ff      	movs	r1, #255	; 0xff
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7fd fa72 	bl	80019e4 <VL53L0X_WrByte>
 8004500:	4603      	mov	r3, r0
 8004502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8004506:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800450a:	2b00      	cmp	r3, #0
 800450c:	d112      	bne.n	8004534 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800450e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004512:	461a      	mov	r2, r3
 8004514:	2101      	movs	r1, #1
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fd fa64 	bl	80019e4 <VL53L0X_WrByte>
 800451c:	4603      	mov	r3, r0
 800451e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8004522:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004526:	2b00      	cmp	r3, #0
 8004528:	d104      	bne.n	8004534 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004530:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8004534:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004538:	4618      	mov	r0, r3
 800453a:	3728      	adds	r7, #40	; 0x28
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8004540:	b590      	push	{r4, r7, lr}
 8004542:	b09d      	sub	sp, #116	; 0x74
 8004544:	af06      	add	r7, sp, #24
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800454c:	2300      	movs	r3, #0
 800454e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8004552:	23b4      	movs	r3, #180	; 0xb4
 8004554:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8004558:	2303      	movs	r3, #3
 800455a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800455c:	232c      	movs	r3, #44	; 0x2c
 800455e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8004560:	2300      	movs	r3, #0
 8004562:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8004568:	2300      	movs	r3, #0
 800456a:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800456c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8004570:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8004572:	2300      	movs	r3, #0
 8004574:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8004576:	2300      	movs	r3, #0
 8004578:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800457a:	2306      	movs	r3, #6
 800457c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800457e:	2300      	movs	r3, #0
 8004580:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8004582:	2300      	movs	r3, #0
 8004584:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8004586:	2300      	movs	r3, #0
 8004588:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800458c:	2300      	movs	r3, #0
 800458e:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8004590:	2300      	movs	r3, #0
 8004592:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8004594:	2300      	movs	r3, #0
 8004596:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 80045a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80045a6:	2300      	movs	r3, #0
 80045a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80045aa:	e009      	b.n	80045c0 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80045b6:	2200      	movs	r2, #0
 80045b8:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80045ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045bc:	3301      	adds	r3, #1
 80045be:	64bb      	str	r3, [r7, #72]	; 0x48
 80045c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d3f1      	bcc.n	80045ac <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80045c8:	2201      	movs	r2, #1
 80045ca:	21ff      	movs	r1, #255	; 0xff
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f7fd fa09 	bl	80019e4 <VL53L0X_WrByte>
 80045d2:	4603      	mov	r3, r0
 80045d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80045d8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d107      	bne.n	80045f0 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 80045e0:	2200      	movs	r2, #0
 80045e2:	214f      	movs	r1, #79	; 0x4f
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f7fd f9fd 	bl	80019e4 <VL53L0X_WrByte>
 80045ea:	4603      	mov	r3, r0
 80045ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80045f0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d107      	bne.n	8004608 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 80045f8:	222c      	movs	r2, #44	; 0x2c
 80045fa:	214e      	movs	r1, #78	; 0x4e
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f7fd f9f1 	bl	80019e4 <VL53L0X_WrByte>
 8004602:	4603      	mov	r3, r0
 8004604:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8004608:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800460c:	2b00      	cmp	r3, #0
 800460e:	d107      	bne.n	8004620 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004610:	2200      	movs	r2, #0
 8004612:	21ff      	movs	r1, #255	; 0xff
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f7fd f9e5 	bl	80019e4 <VL53L0X_WrByte>
 800461a:	4603      	mov	r3, r0
 800461c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8004620:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004624:	2b00      	cmp	r3, #0
 8004626:	d109      	bne.n	800463c <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8004628:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800462c:	461a      	mov	r2, r3
 800462e:	21b6      	movs	r1, #182	; 0xb6
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f7fd f9d7 	bl	80019e4 <VL53L0X_WrByte>
 8004636:	4603      	mov	r3, r0
 8004638:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800463c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004640:	2b00      	cmp	r3, #0
 8004642:	d107      	bne.n	8004654 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8004644:	2200      	movs	r2, #0
 8004646:	2180      	movs	r1, #128	; 0x80
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f7fd f9cb 	bl	80019e4 <VL53L0X_WrByte>
 800464e:	4603      	mov	r3, r0
 8004650:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8004654:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10a      	bne.n	8004672 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800465c:	f107 0210 	add.w	r2, r7, #16
 8004660:	f107 0111 	add.w	r1, r7, #17
 8004664:	2300      	movs	r3, #0
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 fbbb 	bl	8004de2 <VL53L0X_perform_ref_calibration>
 800466c:	4603      	mov	r3, r0
 800466e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8004672:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004676:	2b00      	cmp	r3, #0
 8004678:	d121      	bne.n	80046be <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800467a:	2300      	movs	r3, #0
 800467c:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800467e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004680:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8004682:	2300      	movs	r3, #0
 8004684:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8004686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004688:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8004696:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800469a:	f107 0218 	add.w	r2, r7, #24
 800469e:	9204      	str	r2, [sp, #16]
 80046a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046a2:	9203      	str	r2, [sp, #12]
 80046a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80046a6:	9202      	str	r2, [sp, #8]
 80046a8:	9301      	str	r3, [sp, #4]
 80046aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	4623      	mov	r3, r4
 80046b0:	4602      	mov	r2, r0
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f7ff fe5e 	bl	8004374 <enable_ref_spads>
 80046b8:	4603      	mov	r3, r0
 80046ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80046be:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d174      	bne.n	80047b0 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 80046ca:	f107 0312 	add.w	r3, r7, #18
 80046ce:	4619      	mov	r1, r3
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f7ff fecb 	bl	800446c <perform_ref_signal_measurement>
 80046d6:	4603      	mov	r3, r0
 80046d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80046dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d161      	bne.n	80047a8 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80046e4:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80046e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d25d      	bcs.n	80047a8 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 80046ec:	2300      	movs	r3, #0
 80046ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80046f0:	e009      	b.n	8004706 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80046fc:	2200      	movs	r2, #0
 80046fe:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8004700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004702:	3301      	adds	r3, #1
 8004704:	64bb      	str	r3, [r7, #72]	; 0x48
 8004706:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	429a      	cmp	r2, r3
 800470c:	d3f1      	bcc.n	80046f2 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800470e:	e002      	b.n	8004716 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8004710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004712:	3301      	adds	r3, #1
 8004714:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8004716:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800471a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800471c:	4413      	add	r3, r2
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff fdb0 	bl	8004284 <is_aperture>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d103      	bne.n	8004732 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800472a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800472c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472e:	429a      	cmp	r2, r3
 8004730:	d3ee      	bcc.n	8004710 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8004732:	2301      	movs	r3, #1
 8004734:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8004736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004738:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8004746:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800474a:	f107 0218 	add.w	r2, r7, #24
 800474e:	9204      	str	r2, [sp, #16]
 8004750:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004752:	9203      	str	r2, [sp, #12]
 8004754:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004756:	9202      	str	r2, [sp, #8]
 8004758:	9301      	str	r3, [sp, #4]
 800475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	4623      	mov	r3, r4
 8004760:	4602      	mov	r2, r0
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f7ff fe06 	bl	8004374 <enable_ref_spads>
 8004768:	4603      	mov	r3, r0
 800476a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800476e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004772:	2b00      	cmp	r3, #0
 8004774:	d11b      	bne.n	80047ae <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800477a:	f107 0312 	add.w	r3, r7, #18
 800477e:	4619      	mov	r1, r3
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f7ff fe73 	bl	800446c <perform_ref_signal_measurement>
 8004786:	4603      	mov	r3, r0
 8004788:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800478c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10c      	bne.n	80047ae <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8004794:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8004796:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004798:	429a      	cmp	r2, r3
 800479a:	d208      	bcs.n	80047ae <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800479c:	2301      	movs	r3, #1
 800479e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 80047a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a4:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 80047a6:	e002      	b.n	80047ae <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 80047a8:	2300      	movs	r3, #0
 80047aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047ac:	e000      	b.n	80047b0 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 80047ae:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80047b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f040 80af 	bne.w	8004918 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 80047ba:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 80047bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80047be:	429a      	cmp	r2, r3
 80047c0:	f240 80aa 	bls.w	8004918 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 80047c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 80047ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047cc:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f503 7192 	add.w	r1, r3, #292	; 0x124
 80047d4:	f107 031c 	add.w	r3, r7, #28
 80047d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047da:	4618      	mov	r0, r3
 80047dc:	f006 fbb6 	bl	800af4c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 80047e0:	8a7b      	ldrh	r3, [r7, #18]
 80047e2:	461a      	mov	r2, r3
 80047e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bfb8      	it	lt
 80047ec:	425b      	neglt	r3, r3
 80047ee:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 80047f0:	2300      	movs	r3, #0
 80047f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 80047f6:	e086      	b.n	8004906 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 80047fe:	f107 0314 	add.w	r3, r7, #20
 8004802:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004804:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004806:	f7ff fcde 	bl	80041c6 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004810:	d103      	bne.n	800481a <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004812:	23ce      	movs	r3, #206	; 0xce
 8004814:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8004818:	e07e      	b.n	8004918 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800481a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	4413      	add	r3, r2
 8004822:	4618      	mov	r0, r3
 8004824:	f7ff fd2e 	bl	8004284 <is_aperture>
 8004828:	4603      	mov	r3, r0
 800482a:	461a      	mov	r2, r3
 800482c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800482e:	4293      	cmp	r3, r2
 8004830:	d003      	beq.n	800483a <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8004832:	2301      	movs	r3, #1
 8004834:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8004838:	e06e      	b.n	8004918 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800483a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800483c:	3301      	adds	r3, #1
 800483e:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800484a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800484c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800484e:	4618      	mov	r0, r3
 8004850:	f7ff fd32 	bl	80042b8 <enable_spad_bit>
 8004854:	4603      	mov	r3, r0
 8004856:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800485a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10c      	bne.n	800487c <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8004862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004864:	3301      	adds	r3, #1
 8004866:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800486e:	4619      	mov	r1, r3
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f7ff fd59 	bl	8004328 <set_ref_spad_map>
 8004876:	4603      	mov	r3, r0
 8004878:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800487c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004880:	2b00      	cmp	r3, #0
 8004882:	d146      	bne.n	8004912 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8004884:	f107 0312 	add.w	r3, r7, #18
 8004888:	4619      	mov	r1, r3
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f7ff fdee 	bl	800446c <perform_ref_signal_measurement>
 8004890:	4603      	mov	r3, r0
 8004892:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8004896:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800489a:	2b00      	cmp	r3, #0
 800489c:	d13b      	bne.n	8004916 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800489e:	8a7b      	ldrh	r3, [r7, #18]
 80048a0:	461a      	mov	r2, r3
 80048a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	bfb8      	it	lt
 80048aa:	425b      	neglt	r3, r3
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 80048ae:	8a7b      	ldrh	r3, [r7, #18]
 80048b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d21c      	bcs.n	80048f0 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 80048b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d914      	bls.n	80048e8 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 80048be:	f107 031c 	add.w	r3, r7, #28
 80048c2:	4619      	mov	r1, r3
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f7ff fd2f 	bl	8004328 <set_ref_spad_map>
 80048ca:	4603      	mov	r3, r0
 80048cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 80048d6:	f107 011c 	add.w	r1, r7, #28
 80048da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048dc:	4618      	mov	r0, r3
 80048de:	f006 fb35 	bl	800af4c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 80048e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e4:	3b01      	subs	r3, #1
 80048e6:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 80048e8:	2301      	movs	r3, #1
 80048ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048ee:	e00a      	b.n	8004906 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 80048fa:	f107 031c 	add.w	r3, r7, #28
 80048fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004900:	4618      	mov	r0, r3
 8004902:	f006 fb23 	bl	800af4c <memcpy>
		while (!complete) {
 8004906:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800490a:	2b00      	cmp	r3, #0
 800490c:	f43f af74 	beq.w	80047f8 <VL53L0X_perform_ref_spad_management+0x2b8>
 8004910:	e002      	b.n	8004918 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8004912:	bf00      	nop
 8004914:	e000      	b.n	8004918 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8004916:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004918:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800491c:	2b00      	cmp	r3, #0
 800491e:	d115      	bne.n	800494c <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004924:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800492c:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	b2da      	uxtb	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	781a      	ldrb	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800494c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8004950:	4618      	mov	r0, r3
 8004952:	375c      	adds	r7, #92	; 0x5c
 8004954:	46bd      	mov	sp, r7
 8004956:	bd90      	pop	{r4, r7, pc}

08004958 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8004958:	b590      	push	{r4, r7, lr}
 800495a:	b093      	sub	sp, #76	; 0x4c
 800495c:	af06      	add	r7, sp, #24
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	4613      	mov	r3, r2
 8004964:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004966:	2300      	movs	r3, #0
 8004968:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800496c:	2300      	movs	r3, #0
 800496e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8004970:	23b4      	movs	r3, #180	; 0xb4
 8004972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8004976:	2306      	movs	r3, #6
 8004978:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800497a:	232c      	movs	r3, #44	; 0x2c
 800497c:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800497e:	2201      	movs	r2, #1
 8004980:	21ff      	movs	r1, #255	; 0xff
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f7fd f82e 	bl	80019e4 <VL53L0X_WrByte>
 8004988:	4603      	mov	r3, r0
 800498a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800498e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004992:	2b00      	cmp	r3, #0
 8004994:	d107      	bne.n	80049a6 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8004996:	2200      	movs	r2, #0
 8004998:	214f      	movs	r1, #79	; 0x4f
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f7fd f822 	bl	80019e4 <VL53L0X_WrByte>
 80049a0:	4603      	mov	r3, r0
 80049a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80049a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d107      	bne.n	80049be <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 80049ae:	222c      	movs	r2, #44	; 0x2c
 80049b0:	214e      	movs	r1, #78	; 0x4e
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f7fd f816 	bl	80019e4 <VL53L0X_WrByte>
 80049b8:	4603      	mov	r3, r0
 80049ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80049be:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d107      	bne.n	80049d6 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80049c6:	2200      	movs	r2, #0
 80049c8:	21ff      	movs	r1, #255	; 0xff
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f7fd f80a 	bl	80019e4 <VL53L0X_WrByte>
 80049d0:	4603      	mov	r3, r0
 80049d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80049d6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d109      	bne.n	80049f2 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 80049de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049e2:	461a      	mov	r2, r3
 80049e4:	21b6      	movs	r1, #182	; 0xb6
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f7fc fffc 	bl	80019e4 <VL53L0X_WrByte>
 80049ec:	4603      	mov	r3, r0
 80049ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 80049f2:	2300      	movs	r3, #0
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24
 80049f6:	e009      	b.n	8004a0c <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004a02:	2200      	movs	r2, #0
 8004a04:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	3301      	adds	r3, #1
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d3f1      	bcc.n	80049f8 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8004a14:	79fb      	ldrb	r3, [r7, #7]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d011      	beq.n	8004a3e <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004a1a:	e002      	b.n	8004a22 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8004a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1e:	3301      	adds	r3, #1
 8004a20:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004a22:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a28:	4413      	add	r3, r2
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff fc2a 	bl	8004284 <is_aperture>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d103      	bne.n	8004a3e <VL53L0X_set_reference_spads+0xe6>
 8004a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d3ee      	bcc.n	8004a1c <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8004a4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a4e:	79f9      	ldrb	r1, [r7, #7]
 8004a50:	f107 0214 	add.w	r2, r7, #20
 8004a54:	9204      	str	r2, [sp, #16]
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	9203      	str	r2, [sp, #12]
 8004a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a5c:	9202      	str	r2, [sp, #8]
 8004a5e:	9301      	str	r3, [sp, #4]
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	4623      	mov	r3, r4
 8004a66:	4602      	mov	r2, r0
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f7ff fc83 	bl	8004374 <enable_ref_spads>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8004a74:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10c      	bne.n	8004a96 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	79fa      	ldrb	r2, [r7, #7]
 8004a92:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8004a96:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3734      	adds	r7, #52	; 0x34
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd90      	pop	{r4, r7, pc}

08004aa2 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b084      	sub	sp, #16
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	460b      	mov	r3, r1
 8004aac:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10a      	bne.n	8004ad0 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8004aba:	78fb      	ldrb	r3, [r7, #3]
 8004abc:	f043 0301 	orr.w	r3, r3, #1
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fc ff8c 	bl	80019e4 <VL53L0X_WrByte>
 8004acc:	4603      	mov	r3, r0
 8004ace:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8004ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d104      	bne.n	8004ae2 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f9bf 	bl	8004e5c <VL53L0X_measurement_poll_for_completion>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d105      	bne.n	8004af6 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004aea:	2100      	movs	r1, #0
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f7ff fa31 	bl	8003f54 <VL53L0X_ClearInterruptMask>
 8004af2:	4603      	mov	r3, r0
 8004af4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d106      	bne.n	8004b0c <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8004afe:	2200      	movs	r2, #0
 8004b00:	2100      	movs	r1, #0
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7fc ff6e 	bl	80019e4 <VL53L0X_WrByte>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	73fb      	strb	r3, [r7, #15]

	return Status;
 8004b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	4608      	mov	r0, r1
 8004b22:	4611      	mov	r1, r2
 8004b24:	461a      	mov	r2, r3
 8004b26:	4603      	mov	r3, r0
 8004b28:	70fb      	strb	r3, [r7, #3]
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	70bb      	strb	r3, [r7, #2]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b32:	2300      	movs	r3, #0
 8004b34:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8004b36:	2300      	movs	r3, #0
 8004b38:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	21ff      	movs	r1, #255	; 0xff
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fc ff50 	bl	80019e4 <VL53L0X_WrByte>
 8004b44:	4603      	mov	r3, r0
 8004b46:	461a      	mov	r2, r3
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004b4e:	2200      	movs	r2, #0
 8004b50:	2100      	movs	r1, #0
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fc ff46 	bl	80019e4 <VL53L0X_WrByte>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004b62:	2200      	movs	r2, #0
 8004b64:	21ff      	movs	r1, #255	; 0xff
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7fc ff3c 	bl	80019e4 <VL53L0X_WrByte>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	461a      	mov	r2, r3
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8004b76:	78fb      	ldrb	r3, [r7, #3]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d01e      	beq.n	8004bba <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8004b7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d009      	beq.n	8004b98 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	21cb      	movs	r1, #203	; 0xcb
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7fc ffad 	bl	8001ae8 <VL53L0X_RdByte>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	461a      	mov	r2, r3
 8004b92:	7bfb      	ldrb	r3, [r7, #15]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004b98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d02a      	beq.n	8004bf6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8004ba0:	f107 030e 	add.w	r3, r7, #14
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	21ee      	movs	r1, #238	; 0xee
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7fc ff9d 	bl	8001ae8 <VL53L0X_RdByte>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	73fb      	strb	r3, [r7, #15]
 8004bb8:	e01d      	b.n	8004bf6 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8004bba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8004bc2:	78bb      	ldrb	r3, [r7, #2]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	21cb      	movs	r1, #203	; 0xcb
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7fc ff0b 	bl	80019e4 <VL53L0X_WrByte>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	7bfb      	ldrb	r3, [r7, #15]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004bd8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00a      	beq.n	8004bf6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8004be0:	787b      	ldrb	r3, [r7, #1]
 8004be2:	2280      	movs	r2, #128	; 0x80
 8004be4:	21ee      	movs	r1, #238	; 0xee
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7fc ff4a 	bl	8001a80 <VL53L0X_UpdateByte>
 8004bec:	4603      	mov	r3, r0
 8004bee:	461a      	mov	r2, r3
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	21ff      	movs	r1, #255	; 0xff
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fc fef2 	bl	80019e4 <VL53L0X_WrByte>
 8004c00:	4603      	mov	r3, r0
 8004c02:	461a      	mov	r2, r3
 8004c04:	7bfb      	ldrb	r3, [r7, #15]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7fc fee8 	bl	80019e4 <VL53L0X_WrByte>
 8004c14:	4603      	mov	r3, r0
 8004c16:	461a      	mov	r2, r3
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004c1e:	2200      	movs	r2, #0
 8004c20:	21ff      	movs	r1, #255	; 0xff
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7fc fede 	bl	80019e4 <VL53L0X_WrByte>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8004c32:	7bbb      	ldrb	r3, [r7, #14]
 8004c34:	f023 0310 	bic.w	r3, r3, #16
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	701a      	strb	r2, [r3, #0]

	return Status;
 8004c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b08a      	sub	sp, #40	; 0x28
 8004c4e:	af04      	add	r7, sp, #16
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	4611      	mov	r1, r2
 8004c56:	461a      	mov	r2, r3
 8004c58:	460b      	mov	r3, r1
 8004c5a:	71fb      	strb	r3, [r7, #7]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c60:	2300      	movs	r3, #0
 8004c62:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004c64:	2300      	movs	r3, #0
 8004c66:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8004c70:	2300      	movs	r3, #0
 8004c72:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8004c74:	79bb      	ldrb	r3, [r7, #6]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004c80:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8004c82:	2201      	movs	r2, #1
 8004c84:	2101      	movs	r1, #1
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f7fc feac 	bl	80019e4 <VL53L0X_WrByte>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8004c90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d105      	bne.n	8004ca4 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8004c98:	2140      	movs	r1, #64	; 0x40
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f7ff ff01 	bl	8004aa2 <VL53L0X_perform_single_ref_calibration>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8004ca4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d115      	bne.n	8004cd8 <VL53L0X_perform_vhv_calibration+0x8e>
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d112      	bne.n	8004cd8 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8004cb2:	7d39      	ldrb	r1, [r7, #20]
 8004cb4:	7d7a      	ldrb	r2, [r7, #21]
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	9303      	str	r3, [sp, #12]
 8004cba:	2301      	movs	r3, #1
 8004cbc:	9302      	str	r3, [sp, #8]
 8004cbe:	f107 0313 	add.w	r3, r7, #19
 8004cc2:	9301      	str	r3, [sp, #4]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	2101      	movs	r1, #1
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f7ff ff23 	bl	8004b18 <VL53L0X_ref_calibration_io>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	75fb      	strb	r3, [r7, #23]
 8004cd6:	e002      	b.n	8004cde <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8004cde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d112      	bne.n	8004d0c <VL53L0X_perform_vhv_calibration+0xc2>
 8004ce6:	79bb      	ldrb	r3, [r7, #6]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00f      	beq.n	8004d0c <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004cec:	7dbb      	ldrb	r3, [r7, #22]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f7fc fe76 	bl	80019e4 <VL53L0X_WrByte>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004cfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d103      	bne.n	8004d0c <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	7dba      	ldrb	r2, [r7, #22]
 8004d08:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8004d0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08a      	sub	sp, #40	; 0x28
 8004d1c:	af04      	add	r7, sp, #16
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	4611      	mov	r1, r2
 8004d24:	461a      	mov	r2, r3
 8004d26:	460b      	mov	r3, r1
 8004d28:	71fb      	strb	r3, [r7, #7]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004d32:	2300      	movs	r3, #0
 8004d34:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8004d36:	2300      	movs	r3, #0
 8004d38:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8004d3e:	79bb      	ldrb	r3, [r7, #6]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004d4a:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	2101      	movs	r1, #1
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f7fc fe47 	bl	80019e4 <VL53L0X_WrByte>
 8004d56:	4603      	mov	r3, r0
 8004d58:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8004d5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d105      	bne.n	8004d6e <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8004d62:	2100      	movs	r1, #0
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f7ff fe9c 	bl	8004aa2 <VL53L0X_perform_single_ref_calibration>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8004d6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d115      	bne.n	8004da2 <VL53L0X_perform_phase_calibration+0x8a>
 8004d76:	79fb      	ldrb	r3, [r7, #7]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d112      	bne.n	8004da2 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8004d7c:	7d39      	ldrb	r1, [r7, #20]
 8004d7e:	7d7a      	ldrb	r2, [r7, #21]
 8004d80:	2301      	movs	r3, #1
 8004d82:	9303      	str	r3, [sp, #12]
 8004d84:	2300      	movs	r3, #0
 8004d86:	9302      	str	r3, [sp, #8]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	9301      	str	r3, [sp, #4]
 8004d8c:	f107 0313 	add.w	r3, r7, #19
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	460b      	mov	r3, r1
 8004d94:	2101      	movs	r1, #1
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f7ff febe 	bl	8004b18 <VL53L0X_ref_calibration_io>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	75fb      	strb	r3, [r7, #23]
 8004da0:	e002      	b.n	8004da8 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2200      	movs	r2, #0
 8004da6:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8004da8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d112      	bne.n	8004dd6 <VL53L0X_perform_phase_calibration+0xbe>
 8004db0:	79bb      	ldrb	r3, [r7, #6]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00f      	beq.n	8004dd6 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004db6:	7dbb      	ldrb	r3, [r7, #22]
 8004db8:	461a      	mov	r2, r3
 8004dba:	2101      	movs	r1, #1
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f7fc fe11 	bl	80019e4 <VL53L0X_WrByte>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004dc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d103      	bne.n	8004dd6 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	7dba      	ldrb	r2, [r7, #22]
 8004dd2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8004dd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b086      	sub	sp, #24
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	60f8      	str	r0, [r7, #12]
 8004dea:	60b9      	str	r1, [r7, #8]
 8004dec:	607a      	str	r2, [r7, #4]
 8004dee:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004df0:	2300      	movs	r3, #0
 8004df2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004df4:	2300      	movs	r3, #0
 8004df6:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004dfe:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8004e00:	78fa      	ldrb	r2, [r7, #3]
 8004e02:	2300      	movs	r3, #0
 8004e04:	68b9      	ldr	r1, [r7, #8]
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f7ff ff1f 	bl	8004c4a <VL53L0X_perform_vhv_calibration>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8004e10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d107      	bne.n	8004e28 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8004e18:	78fa      	ldrb	r2, [r7, #3]
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f7ff ff7a 	bl	8004d18 <VL53L0X_perform_phase_calibration>
 8004e24:	4603      	mov	r3, r0
 8004e26:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8004e28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10f      	bne.n	8004e50 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004e30:	7dbb      	ldrb	r3, [r7, #22]
 8004e32:	461a      	mov	r2, r3
 8004e34:	2101      	movs	r1, #1
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f7fc fdd4 	bl	80019e4 <VL53L0X_WrByte>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004e40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d103      	bne.n	8004e50 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	7dba      	ldrb	r2, [r7, #22]
 8004e4c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8004e50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8004e5c:	b590      	push	{r4, r7, lr}
 8004e5e:	b08b      	sub	sp, #44	; 0x2c
 8004e60:	af04      	add	r7, sp, #16
 8004e62:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e64:	2300      	movs	r3, #0
 8004e66:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");
 8004e6c:	4b25      	ldr	r3, [pc, #148]	; (8004f04 <VL53L0X_measurement_poll_for_completion+0xa8>)
 8004e6e:	681c      	ldr	r4, [r3, #0]
 8004e70:	f002 fdd6 	bl	8007a20 <HAL_GetTick>
 8004e74:	4603      	mov	r3, r0
 8004e76:	461a      	mov	r2, r3
 8004e78:	4b23      	ldr	r3, [pc, #140]	; (8004f08 <VL53L0X_measurement_poll_for_completion+0xac>)
 8004e7a:	9301      	str	r3, [sp, #4]
 8004e7c:	9200      	str	r2, [sp, #0]
 8004e7e:	4b23      	ldr	r3, [pc, #140]	; (8004f0c <VL53L0X_measurement_poll_for_completion+0xb0>)
 8004e80:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004e84:	4621      	mov	r1, r4
 8004e86:	2001      	movs	r0, #1
 8004e88:	f002 fd1c 	bl	80078c4 <trace_print_module_function>

	LoopNb = 0;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8004e90:	f107 030f 	add.w	r3, r7, #15
 8004e94:	4619      	mov	r1, r3
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7fe fc90 	bl	80037bc <VL53L0X_GetMeasurementDataReady>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8004ea0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d110      	bne.n	8004eca <VL53L0X_measurement_poll_for_completion+0x6e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d00f      	beq.n	8004ece <VL53L0X_measurement_poll_for_completion+0x72>
			break; /* done note that status == 0 */

		LoopNb++;
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004eba:	d302      	bcc.n	8004ec2 <VL53L0X_measurement_poll_for_completion+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8004ebc:	23f9      	movs	r3, #249	; 0xf9
 8004ebe:	75fb      	strb	r3, [r7, #23]
			break;
 8004ec0:	e006      	b.n	8004ed0 <VL53L0X_measurement_poll_for_completion+0x74>
		}

		VL53L0X_PollingDelay(Dev);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7fc feae 	bl	8001c24 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8004ec8:	e7e2      	b.n	8004e90 <VL53L0X_measurement_poll_for_completion+0x34>
			break; /* the error is set */
 8004eca:	bf00      	nop
 8004ecc:	e000      	b.n	8004ed0 <VL53L0X_measurement_poll_for_completion+0x74>
			break; /* done note that status == 0 */
 8004ece:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);
 8004ed0:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <VL53L0X_measurement_poll_for_completion+0xa8>)
 8004ed2:	681c      	ldr	r4, [r3, #0]
 8004ed4:	f002 fda4 	bl	8007a20 <HAL_GetTick>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	461a      	mov	r2, r3
 8004edc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ee0:	9302      	str	r3, [sp, #8]
 8004ee2:	4b09      	ldr	r3, [pc, #36]	; (8004f08 <VL53L0X_measurement_poll_for_completion+0xac>)
 8004ee4:	9301      	str	r3, [sp, #4]
 8004ee6:	9200      	str	r2, [sp, #0]
 8004ee8:	4b09      	ldr	r3, [pc, #36]	; (8004f10 <VL53L0X_measurement_poll_for_completion+0xb4>)
 8004eea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004eee:	4621      	mov	r1, r4
 8004ef0:	2001      	movs	r0, #1
 8004ef2:	f002 fce7 	bl	80078c4 <trace_print_module_function>

	return Status;
 8004ef6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	371c      	adds	r7, #28
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd90      	pop	{r4, r7, pc}
 8004f02:	bf00      	nop
 8004f04:	200007c8 	.word	0x200007c8
 8004f08:	0800c9d0 	.word	0x0800c9d0
 8004f0c:	0800c9a8 	.word	0x0800c9a8
 8004f10:	0800c9bc 	.word	0x0800c9bc

08004f14 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8004f22:	79fb      	ldrb	r3, [r7, #7]
 8004f24:	3301      	adds	r3, #1
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b085      	sub	sp, #20
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	4603      	mov	r3, r0
 8004f42:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8004f44:	2300      	movs	r3, #0
 8004f46:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8004f48:	79fb      	ldrb	r3, [r7, #7]
 8004f4a:	085b      	lsrs	r3, r3, #1
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8004f6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f70:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8004f72:	e002      	b.n	8004f7a <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	089b      	lsrs	r3, r3, #2
 8004f78:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d8f8      	bhi.n	8004f74 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8004f82:	e017      	b.n	8004fb4 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	4413      	add	r3, r2
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d30b      	bcc.n	8004fa8 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	4413      	add	r3, r2
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	085b      	lsrs	r3, r3, #1
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]
 8004fa6:	e002      	b.n	8004fae <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	085b      	lsrs	r3, r3, #1
 8004fac:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	089b      	lsrs	r3, r3, #2
 8004fb2:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1e4      	bne.n	8004f84 <VL53L0X_isqrt+0x24>
	}

	return res;
 8004fba:	68fb      	ldr	r3, [r7, #12]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8004fc8:	b590      	push	{r4, r7, lr}
 8004fca:	b08b      	sub	sp, #44	; 0x2c
 8004fcc:	af04      	add	r7, sp, #16
 8004fce:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");
 8004fd4:	4b2f      	ldr	r3, [pc, #188]	; (8005094 <VL53L0X_device_read_strobe+0xcc>)
 8004fd6:	681c      	ldr	r4, [r3, #0]
 8004fd8:	f002 fd22 	bl	8007a20 <HAL_GetTick>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	461a      	mov	r2, r3
 8004fe0:	4b2d      	ldr	r3, [pc, #180]	; (8005098 <VL53L0X_device_read_strobe+0xd0>)
 8004fe2:	9301      	str	r3, [sp, #4]
 8004fe4:	9200      	str	r2, [sp, #0]
 8004fe6:	4b2d      	ldr	r3, [pc, #180]	; (800509c <VL53L0X_device_read_strobe+0xd4>)
 8004fe8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004fec:	4621      	mov	r1, r4
 8004fee:	2001      	movs	r0, #1
 8004ff0:	f002 fc68 	bl	80078c4 <trace_print_module_function>

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	2183      	movs	r1, #131	; 0x83
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7fc fcf3 	bl	80019e4 <VL53L0X_WrByte>
 8004ffe:	4603      	mov	r3, r0
 8005000:	461a      	mov	r2, r3
 8005002:	7dfb      	ldrb	r3, [r7, #23]
 8005004:	4313      	orrs	r3, r2
 8005006:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8005008:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d11e      	bne.n	800504e <VL53L0X_device_read_strobe+0x86>
		LoopNb = 0;
 8005010:	2300      	movs	r3, #0
 8005012:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8005014:	f107 030f 	add.w	r3, r7, #15
 8005018:	461a      	mov	r2, r3
 800501a:	2183      	movs	r1, #131	; 0x83
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7fc fd63 	bl	8001ae8 <VL53L0X_RdByte>
 8005022:	4603      	mov	r3, r0
 8005024:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8005026:	7bfb      	ldrb	r3, [r7, #15]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10a      	bne.n	8005042 <VL53L0X_device_read_strobe+0x7a>
 800502c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d106      	bne.n	8005042 <VL53L0X_device_read_strobe+0x7a>
					break;

			LoopNb = LoopNb + 1;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	3301      	adds	r3, #1
 8005038:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005040:	d3e8      	bcc.n	8005014 <VL53L0X_device_read_strobe+0x4c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005048:	d301      	bcc.n	800504e <VL53L0X_device_read_strobe+0x86>
			Status = VL53L0X_ERROR_TIME_OUT;
 800504a:	23f9      	movs	r3, #249	; 0xf9
 800504c:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800504e:	2201      	movs	r2, #1
 8005050:	2183      	movs	r1, #131	; 0x83
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7fc fcc6 	bl	80019e4 <VL53L0X_WrByte>
 8005058:	4603      	mov	r3, r0
 800505a:	461a      	mov	r2, r3
 800505c:	7dfb      	ldrb	r3, [r7, #23]
 800505e:	4313      	orrs	r3, r2
 8005060:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
 8005062:	4b0c      	ldr	r3, [pc, #48]	; (8005094 <VL53L0X_device_read_strobe+0xcc>)
 8005064:	681c      	ldr	r4, [r3, #0]
 8005066:	f002 fcdb 	bl	8007a20 <HAL_GetTick>
 800506a:	4603      	mov	r3, r0
 800506c:	461a      	mov	r2, r3
 800506e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005072:	9302      	str	r3, [sp, #8]
 8005074:	4b08      	ldr	r3, [pc, #32]	; (8005098 <VL53L0X_device_read_strobe+0xd0>)
 8005076:	9301      	str	r3, [sp, #4]
 8005078:	9200      	str	r2, [sp, #0]
 800507a:	4b09      	ldr	r3, [pc, #36]	; (80050a0 <VL53L0X_device_read_strobe+0xd8>)
 800507c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005080:	4621      	mov	r1, r4
 8005082:	2001      	movs	r0, #1
 8005084:	f002 fc1e 	bl	80078c4 <trace_print_module_function>
	return Status;
 8005088:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800508c:	4618      	mov	r0, r3
 800508e:	371c      	adds	r7, #28
 8005090:	46bd      	mov	sp, r7
 8005092:	bd90      	pop	{r4, r7, pc}
 8005094:	200007c8 	.word	0x200007c8
 8005098:	0800c9f8 	.word	0x0800c9f8
 800509c:	0800c9a8 	.word	0x0800c9a8
 80050a0:	0800c9bc 	.word	0x0800c9bc

080050a4 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80050a4:	b590      	push	{r4, r7, lr}
 80050a6:	b09d      	sub	sp, #116	; 0x74
 80050a8:	af04      	add	r7, sp, #16
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	460b      	mov	r3, r1
 80050ae:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050b0:	2300      	movs	r3, #0
 80050b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 80050b6:	2300      	movs	r3, #0
 80050b8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 80050bc:	2300      	movs	r3, #0
 80050be:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 80050c2:	2300      	movs	r3, #0
 80050c4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 80050c6:	2300      	movs	r3, #0
 80050c8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80050ca:	2300      	movs	r3, #0
 80050cc:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80050ce:	2300      	movs	r3, #0
 80050d0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80050d4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80050d8:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80050da:	2300      	movs	r3, #0
 80050dc:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80050de:	2300      	movs	r3, #0
 80050e0:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80050e2:	2300      	movs	r3, #0
 80050e4:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t NvmRefGoodSpadMap[VL53L0X_REF_SPAD_BUFFER_SIZE];
	int i;


	LOG_FUNCTION_START("");
 80050e6:	4b9b      	ldr	r3, [pc, #620]	; (8005354 <VL53L0X_get_info_from_device+0x2b0>)
 80050e8:	681c      	ldr	r4, [r3, #0]
 80050ea:	f002 fc99 	bl	8007a20 <HAL_GetTick>
 80050ee:	4603      	mov	r3, r0
 80050f0:	461a      	mov	r2, r3
 80050f2:	4b99      	ldr	r3, [pc, #612]	; (8005358 <VL53L0X_get_info_from_device+0x2b4>)
 80050f4:	9301      	str	r3, [sp, #4]
 80050f6:	9200      	str	r2, [sp, #0]
 80050f8:	4b98      	ldr	r3, [pc, #608]	; (800535c <VL53L0X_get_info_from_device+0x2b8>)
 80050fa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80050fe:	4621      	mov	r1, r4
 8005100:	2001      	movs	r0, #1
 8005102:	f002 fbdf 	bl	80078c4 <trace_print_module_function>

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800510c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8005110:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005114:	2b07      	cmp	r3, #7
 8005116:	f000 8410 	beq.w	800593a <VL53L0X_get_info_from_device+0x896>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800511a:	2201      	movs	r2, #1
 800511c:	2180      	movs	r1, #128	; 0x80
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7fc fc60 	bl	80019e4 <VL53L0X_WrByte>
 8005124:	4603      	mov	r3, r0
 8005126:	461a      	mov	r2, r3
 8005128:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800512c:	4313      	orrs	r3, r2
 800512e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005132:	2201      	movs	r2, #1
 8005134:	21ff      	movs	r1, #255	; 0xff
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fc fc54 	bl	80019e4 <VL53L0X_WrByte>
 800513c:	4603      	mov	r3, r0
 800513e:	461a      	mov	r2, r3
 8005140:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005144:	4313      	orrs	r3, r2
 8005146:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800514a:	2200      	movs	r2, #0
 800514c:	2100      	movs	r1, #0
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7fc fc48 	bl	80019e4 <VL53L0X_WrByte>
 8005154:	4603      	mov	r3, r0
 8005156:	461a      	mov	r2, r3
 8005158:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800515c:	4313      	orrs	r3, r2
 800515e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8005162:	2206      	movs	r2, #6
 8005164:	21ff      	movs	r1, #255	; 0xff
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7fc fc3c 	bl	80019e4 <VL53L0X_WrByte>
 800516c:	4603      	mov	r3, r0
 800516e:	461a      	mov	r2, r3
 8005170:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005174:	4313      	orrs	r3, r2
 8005176:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800517a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800517e:	461a      	mov	r2, r3
 8005180:	2183      	movs	r1, #131	; 0x83
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7fc fcb0 	bl	8001ae8 <VL53L0X_RdByte>
 8005188:	4603      	mov	r3, r0
 800518a:	461a      	mov	r2, r3
 800518c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005190:	4313      	orrs	r3, r2
 8005192:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8005196:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800519a:	f043 0304 	orr.w	r3, r3, #4
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	461a      	mov	r2, r3
 80051a2:	2183      	movs	r1, #131	; 0x83
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7fc fc1d 	bl	80019e4 <VL53L0X_WrByte>
 80051aa:	4603      	mov	r3, r0
 80051ac:	461a      	mov	r2, r3
 80051ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 80051b8:	2207      	movs	r2, #7
 80051ba:	21ff      	movs	r1, #255	; 0xff
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f7fc fc11 	bl	80019e4 <VL53L0X_WrByte>
 80051c2:	4603      	mov	r3, r0
 80051c4:	461a      	mov	r2, r3
 80051c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 80051d0:	2201      	movs	r2, #1
 80051d2:	2181      	movs	r1, #129	; 0x81
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7fc fc05 	bl	80019e4 <VL53L0X_WrByte>
 80051da:	4603      	mov	r3, r0
 80051dc:	461a      	mov	r2, r3
 80051de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7fc fd1b 	bl	8001c24 <VL53L0X_PollingDelay>
 80051ee:	4603      	mov	r3, r0
 80051f0:	461a      	mov	r2, r3
 80051f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80051fc:	2201      	movs	r2, #1
 80051fe:	2180      	movs	r1, #128	; 0x80
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7fc fbef 	bl	80019e4 <VL53L0X_WrByte>
 8005206:	4603      	mov	r3, r0
 8005208:	461a      	mov	r2, r3
 800520a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800520e:	4313      	orrs	r3, r2
 8005210:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8005214:	78fb      	ldrb	r3, [r7, #3]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 80a0 	beq.w	8005360 <VL53L0X_get_info_from_device+0x2bc>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8005220:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005224:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005228:	2b00      	cmp	r3, #0
 800522a:	f040 8099 	bne.w	8005360 <VL53L0X_get_info_from_device+0x2bc>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800522e:	226b      	movs	r2, #107	; 0x6b
 8005230:	2194      	movs	r1, #148	; 0x94
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fc fbd6 	bl	80019e4 <VL53L0X_WrByte>
 8005238:	4603      	mov	r3, r0
 800523a:	461a      	mov	r2, r3
 800523c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005240:	4313      	orrs	r3, r2
 8005242:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7ff febe 	bl	8004fc8 <VL53L0X_device_read_strobe>
 800524c:	4603      	mov	r3, r0
 800524e:	461a      	mov	r2, r3
 8005250:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005254:	4313      	orrs	r3, r2
 8005256:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800525a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800525e:	461a      	mov	r2, r3
 8005260:	2190      	movs	r1, #144	; 0x90
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7fc fca2 	bl	8001bac <VL53L0X_RdDWord>
 8005268:	4603      	mov	r3, r0
 800526a:	461a      	mov	r2, r3
 800526c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005270:	4313      	orrs	r3, r2
 8005272:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8005276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005278:	0a1b      	lsrs	r3, r3, #8
 800527a:	b2db      	uxtb	r3, r3
 800527c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005280:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8005284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005286:	0bdb      	lsrs	r3, r3, #15
 8005288:	b2db      	uxtb	r3, r3
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8005292:	2224      	movs	r2, #36	; 0x24
 8005294:	2194      	movs	r1, #148	; 0x94
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fc fba4 	bl	80019e4 <VL53L0X_WrByte>
 800529c:	4603      	mov	r3, r0
 800529e:	461a      	mov	r2, r3
 80052a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052a4:	4313      	orrs	r3, r2
 80052a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff fe8c 	bl	8004fc8 <VL53L0X_device_read_strobe>
 80052b0:	4603      	mov	r3, r0
 80052b2:	461a      	mov	r2, r3
 80052b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052b8:	4313      	orrs	r3, r2
 80052ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80052be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80052c2:	461a      	mov	r2, r3
 80052c4:	2190      	movs	r1, #144	; 0x90
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7fc fc70 	bl	8001bac <VL53L0X_RdDWord>
 80052cc:	4603      	mov	r3, r0
 80052ce:	461a      	mov	r2, r3
 80052d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052d4:	4313      	orrs	r3, r2
 80052d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80052da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052dc:	0e1b      	lsrs	r3, r3, #24
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80052e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e4:	0c1b      	lsrs	r3, r3, #16
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	0a1b      	lsrs	r3, r3, #8
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80052f8:	2225      	movs	r2, #37	; 0x25
 80052fa:	2194      	movs	r1, #148	; 0x94
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7fc fb71 	bl	80019e4 <VL53L0X_WrByte>
 8005302:	4603      	mov	r3, r0
 8005304:	461a      	mov	r2, r3
 8005306:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800530a:	4313      	orrs	r3, r2
 800530c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7ff fe59 	bl	8004fc8 <VL53L0X_device_read_strobe>
 8005316:	4603      	mov	r3, r0
 8005318:	461a      	mov	r2, r3
 800531a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800531e:	4313      	orrs	r3, r2
 8005320:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005324:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005328:	461a      	mov	r2, r3
 800532a:	2190      	movs	r1, #144	; 0x90
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7fc fc3d 	bl	8001bac <VL53L0X_RdDWord>
 8005332:	4603      	mov	r3, r0
 8005334:	461a      	mov	r2, r3
 8005336:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800533a:	4313      	orrs	r3, r2
 800533c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	0e1b      	lsrs	r3, r3, #24
 8005344:	b2db      	uxtb	r3, r3
 8005346:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8005348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534a:	0c1b      	lsrs	r3, r3, #16
 800534c:	b2db      	uxtb	r3, r3
 800534e:	737b      	strb	r3, [r7, #13]
 8005350:	e006      	b.n	8005360 <VL53L0X_get_info_from_device+0x2bc>
 8005352:	bf00      	nop
 8005354:	200007c8 	.word	0x200007c8
 8005358:	0800ca14 	.word	0x0800ca14
 800535c:	0800c9a8 	.word	0x0800c9a8
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8005360:	78fb      	ldrb	r3, [r7, #3]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 8189 	beq.w	800567e <VL53L0X_get_info_from_device+0x5da>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800536c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005370:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8005374:	2b00      	cmp	r3, #0
 8005376:	f040 8182 	bne.w	800567e <VL53L0X_get_info_from_device+0x5da>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800537a:	2202      	movs	r2, #2
 800537c:	2194      	movs	r1, #148	; 0x94
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7fc fb30 	bl	80019e4 <VL53L0X_WrByte>
 8005384:	4603      	mov	r3, r0
 8005386:	461a      	mov	r2, r3
 8005388:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800538c:	4313      	orrs	r3, r2
 800538e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7ff fe18 	bl	8004fc8 <VL53L0X_device_read_strobe>
 8005398:	4603      	mov	r3, r0
 800539a:	461a      	mov	r2, r3
 800539c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80053a6:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80053aa:	461a      	mov	r2, r3
 80053ac:	2190      	movs	r1, #144	; 0x90
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7fc fb9a 	bl	8001ae8 <VL53L0X_RdByte>
 80053b4:	4603      	mov	r3, r0
 80053b6:	461a      	mov	r2, r3
 80053b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053bc:	4313      	orrs	r3, r2
 80053be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80053c2:	227b      	movs	r2, #123	; 0x7b
 80053c4:	2194      	movs	r1, #148	; 0x94
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7fc fb0c 	bl	80019e4 <VL53L0X_WrByte>
 80053cc:	4603      	mov	r3, r0
 80053ce:	461a      	mov	r2, r3
 80053d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7ff fdf4 	bl	8004fc8 <VL53L0X_device_read_strobe>
 80053e0:	4603      	mov	r3, r0
 80053e2:	461a      	mov	r2, r3
 80053e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80053ee:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80053f2:	461a      	mov	r2, r3
 80053f4:	2190      	movs	r1, #144	; 0x90
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7fc fb76 	bl	8001ae8 <VL53L0X_RdByte>
 80053fc:	4603      	mov	r3, r0
 80053fe:	461a      	mov	r2, r3
 8005400:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005404:	4313      	orrs	r3, r2
 8005406:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800540a:	2277      	movs	r2, #119	; 0x77
 800540c:	2194      	movs	r1, #148	; 0x94
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7fc fae8 	bl	80019e4 <VL53L0X_WrByte>
 8005414:	4603      	mov	r3, r0
 8005416:	461a      	mov	r2, r3
 8005418:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800541c:	4313      	orrs	r3, r2
 800541e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff fdd0 	bl	8004fc8 <VL53L0X_device_read_strobe>
 8005428:	4603      	mov	r3, r0
 800542a:	461a      	mov	r2, r3
 800542c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005430:	4313      	orrs	r3, r2
 8005432:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005436:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800543a:	461a      	mov	r2, r3
 800543c:	2190      	movs	r1, #144	; 0x90
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fc fbb4 	bl	8001bac <VL53L0X_RdDWord>
 8005444:	4603      	mov	r3, r0
 8005446:	461a      	mov	r2, r3
 8005448:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800544c:	4313      	orrs	r3, r2
 800544e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8005452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005454:	0e5b      	lsrs	r3, r3, #25
 8005456:	b2db      	uxtb	r3, r3
 8005458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800545c:	b2db      	uxtb	r3, r3
 800545e:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8005460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005462:	0c9b      	lsrs	r3, r3, #18
 8005464:	b2db      	uxtb	r3, r3
 8005466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800546a:	b2db      	uxtb	r3, r3
 800546c:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800546e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005470:	0adb      	lsrs	r3, r3, #11
 8005472:	b2db      	uxtb	r3, r3
 8005474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005478:	b2db      	uxtb	r3, r3
 800547a:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	091b      	lsrs	r3, r3, #4
 8005480:	b2db      	uxtb	r3, r3
 8005482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005486:	b2db      	uxtb	r3, r3
 8005488:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	b2db      	uxtb	r3, r3
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	b2db      	uxtb	r3, r3
 8005492:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8005496:	b2db      	uxtb	r3, r3
 8005498:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800549c:	2278      	movs	r2, #120	; 0x78
 800549e:	2194      	movs	r1, #148	; 0x94
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7fc fa9f 	bl	80019e4 <VL53L0X_WrByte>
 80054a6:	4603      	mov	r3, r0
 80054a8:	461a      	mov	r2, r3
 80054aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054ae:	4313      	orrs	r3, r2
 80054b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7ff fd87 	bl	8004fc8 <VL53L0X_device_read_strobe>
 80054ba:	4603      	mov	r3, r0
 80054bc:	461a      	mov	r2, r3
 80054be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80054c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054cc:	461a      	mov	r2, r3
 80054ce:	2190      	movs	r1, #144	; 0x90
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f7fc fb6b 	bl	8001bac <VL53L0X_RdDWord>
 80054d6:	4603      	mov	r3, r0
 80054d8:	461a      	mov	r2, r3
 80054da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054de:	4313      	orrs	r3, r2
 80054e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 80054e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e6:	0f5b      	lsrs	r3, r3, #29
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ee:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 80054f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054f4:	4413      	add	r3, r2
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80054fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fc:	0d9b      	lsrs	r3, r3, #22
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005504:	b2db      	uxtb	r3, r3
 8005506:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8005508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550a:	0bdb      	lsrs	r3, r3, #15
 800550c:	b2db      	uxtb	r3, r3
 800550e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005512:	b2db      	uxtb	r3, r3
 8005514:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8005516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005518:	0a1b      	lsrs	r3, r3, #8
 800551a:	b2db      	uxtb	r3, r3
 800551c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005520:	b2db      	uxtb	r3, r3
 8005522:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8005524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005526:	085b      	lsrs	r3, r3, #1
 8005528:	b2db      	uxtb	r3, r3
 800552a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800552e:	b2db      	uxtb	r3, r3
 8005530:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	b2db      	uxtb	r3, r3
 8005536:	019b      	lsls	r3, r3, #6
 8005538:	b2db      	uxtb	r3, r3
 800553a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553e:	b2db      	uxtb	r3, r3
 8005540:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8005544:	2279      	movs	r2, #121	; 0x79
 8005546:	2194      	movs	r1, #148	; 0x94
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7fc fa4b 	bl	80019e4 <VL53L0X_WrByte>
 800554e:	4603      	mov	r3, r0
 8005550:	461a      	mov	r2, r3
 8005552:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005556:	4313      	orrs	r3, r2
 8005558:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff fd33 	bl	8004fc8 <VL53L0X_device_read_strobe>
 8005562:	4603      	mov	r3, r0
 8005564:	461a      	mov	r2, r3
 8005566:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800556a:	4313      	orrs	r3, r2
 800556c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005570:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005574:	461a      	mov	r2, r3
 8005576:	2190      	movs	r1, #144	; 0x90
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7fc fb17 	bl	8001bac <VL53L0X_RdDWord>
 800557e:	4603      	mov	r3, r0
 8005580:	461a      	mov	r2, r3
 8005582:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005586:	4313      	orrs	r3, r2
 8005588:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	0e9b      	lsrs	r3, r3, #26
 8005590:	b2db      	uxtb	r3, r3
 8005592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005596:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8005598:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800559c:	4413      	add	r3, r2
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a4:	0cdb      	lsrs	r3, r3, #19
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 80055b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b2:	0b1b      	lsrs	r3, r3, #12
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 80055be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c0:	095b      	lsrs	r3, r3, #5
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 80055cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80055de:	227a      	movs	r2, #122	; 0x7a
 80055e0:	2194      	movs	r1, #148	; 0x94
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7fc f9fe 	bl	80019e4 <VL53L0X_WrByte>
 80055e8:	4603      	mov	r3, r0
 80055ea:	461a      	mov	r2, r3
 80055ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055f0:	4313      	orrs	r3, r2
 80055f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7ff fce6 	bl	8004fc8 <VL53L0X_device_read_strobe>
 80055fc:	4603      	mov	r3, r0
 80055fe:	461a      	mov	r2, r3
 8005600:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005604:	4313      	orrs	r3, r2
 8005606:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800560a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800560e:	461a      	mov	r2, r3
 8005610:	2190      	movs	r1, #144	; 0x90
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7fc faca 	bl	8001bac <VL53L0X_RdDWord>
 8005618:	4603      	mov	r3, r0
 800561a:	461a      	mov	r2, r3
 800561c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005620:	4313      	orrs	r3, r2
 8005622:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8005626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005628:	0f9b      	lsrs	r3, r3, #30
 800562a:	b2db      	uxtb	r3, r3
 800562c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005630:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8005632:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005636:	4413      	add	r3, r2
 8005638:	b2db      	uxtb	r3, r3
 800563a:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	0ddb      	lsrs	r3, r3, #23
 8005640:	b2db      	uxtb	r3, r3
 8005642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005646:	b2db      	uxtb	r3, r3
 8005648:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564c:	0c1b      	lsrs	r3, r3, #16
 800564e:	b2db      	uxtb	r3, r3
 8005650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005654:	b2db      	uxtb	r3, r3
 8005656:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8005658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565a:	0a5b      	lsrs	r3, r3, #9
 800565c:	b2db      	uxtb	r3, r3
 800565e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005662:	b2db      	uxtb	r3, r3
 8005664:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8005668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566a:	089b      	lsrs	r3, r3, #2
 800566c:	b2db      	uxtb	r3, r3
 800566e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005672:	b2db      	uxtb	r3, r3
 8005674:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8005678:	2300      	movs	r3, #0
 800567a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800567e:	78fb      	ldrb	r3, [r7, #3]
 8005680:	f003 0304 	and.w	r3, r3, #4
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 80f1 	beq.w	800586c <VL53L0X_get_info_from_device+0x7c8>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800568a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800568e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8005692:	2b00      	cmp	r3, #0
 8005694:	f040 80ea 	bne.w	800586c <VL53L0X_get_info_from_device+0x7c8>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8005698:	227b      	movs	r2, #123	; 0x7b
 800569a:	2194      	movs	r1, #148	; 0x94
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7fc f9a1 	bl	80019e4 <VL53L0X_WrByte>
 80056a2:	4603      	mov	r3, r0
 80056a4:	461a      	mov	r2, r3
 80056a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7ff fc89 	bl	8004fc8 <VL53L0X_device_read_strobe>
 80056b6:	4603      	mov	r3, r0
 80056b8:	461a      	mov	r2, r3
 80056ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056be:	4313      	orrs	r3, r2
 80056c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80056c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056c8:	461a      	mov	r2, r3
 80056ca:	2190      	movs	r1, #144	; 0x90
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f7fc fa6d 	bl	8001bac <VL53L0X_RdDWord>
 80056d2:	4603      	mov	r3, r0
 80056d4:	461a      	mov	r2, r3
 80056d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056da:	4313      	orrs	r3, r2
 80056dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 80056e0:	227c      	movs	r2, #124	; 0x7c
 80056e2:	2194      	movs	r1, #148	; 0x94
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7fc f97d 	bl	80019e4 <VL53L0X_WrByte>
 80056ea:	4603      	mov	r3, r0
 80056ec:	461a      	mov	r2, r3
 80056ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056f2:	4313      	orrs	r3, r2
 80056f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7ff fc65 	bl	8004fc8 <VL53L0X_device_read_strobe>
 80056fe:	4603      	mov	r3, r0
 8005700:	461a      	mov	r2, r3
 8005702:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005706:	4313      	orrs	r3, r2
 8005708:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800570c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005710:	461a      	mov	r2, r3
 8005712:	2190      	movs	r1, #144	; 0x90
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7fc fa49 	bl	8001bac <VL53L0X_RdDWord>
 800571a:	4603      	mov	r3, r0
 800571c:	461a      	mov	r2, r3
 800571e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005722:	4313      	orrs	r3, r2
 8005724:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8005728:	2273      	movs	r2, #115	; 0x73
 800572a:	2194      	movs	r1, #148	; 0x94
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7fc f959 	bl	80019e4 <VL53L0X_WrByte>
 8005732:	4603      	mov	r3, r0
 8005734:	461a      	mov	r2, r3
 8005736:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800573a:	4313      	orrs	r3, r2
 800573c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7ff fc41 	bl	8004fc8 <VL53L0X_device_read_strobe>
 8005746:	4603      	mov	r3, r0
 8005748:	461a      	mov	r2, r3
 800574a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800574e:	4313      	orrs	r3, r2
 8005750:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005754:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005758:	461a      	mov	r2, r3
 800575a:	2190      	movs	r1, #144	; 0x90
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f7fc fa25 	bl	8001bac <VL53L0X_RdDWord>
 8005762:	4603      	mov	r3, r0
 8005764:	461a      	mov	r2, r3
 8005766:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800576a:	4313      	orrs	r3, r2
 800576c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8005774:	b29b      	uxth	r3, r3
 8005776:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8005778:	2274      	movs	r2, #116	; 0x74
 800577a:	2194      	movs	r1, #148	; 0x94
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7fc f931 	bl	80019e4 <VL53L0X_WrByte>
 8005782:	4603      	mov	r3, r0
 8005784:	461a      	mov	r2, r3
 8005786:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800578a:	4313      	orrs	r3, r2
 800578c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7ff fc19 	bl	8004fc8 <VL53L0X_device_read_strobe>
 8005796:	4603      	mov	r3, r0
 8005798:	461a      	mov	r2, r3
 800579a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800579e:	4313      	orrs	r3, r2
 80057a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80057a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057a8:	461a      	mov	r2, r3
 80057aa:	2190      	movs	r1, #144	; 0x90
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7fc f9fd 	bl	8001bac <VL53L0X_RdDWord>
 80057b2:	4603      	mov	r3, r0
 80057b4:	461a      	mov	r2, r3
 80057b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057ba:	4313      	orrs	r3, r2
 80057bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 80057c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80057c6:	4313      	orrs	r3, r2
 80057c8:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80057ca:	2275      	movs	r2, #117	; 0x75
 80057cc:	2194      	movs	r1, #148	; 0x94
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7fc f908 	bl	80019e4 <VL53L0X_WrByte>
 80057d4:	4603      	mov	r3, r0
 80057d6:	461a      	mov	r2, r3
 80057d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057dc:	4313      	orrs	r3, r2
 80057de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7ff fbf0 	bl	8004fc8 <VL53L0X_device_read_strobe>
 80057e8:	4603      	mov	r3, r0
 80057ea:	461a      	mov	r2, r3
 80057ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80057f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057fa:	461a      	mov	r2, r3
 80057fc:	2190      	movs	r1, #144	; 0x90
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7fc f9d4 	bl	8001bac <VL53L0X_RdDWord>
 8005804:	4603      	mov	r3, r0
 8005806:	461a      	mov	r2, r3
 8005808:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800580c:	4313      	orrs	r3, r2
 800580e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8005812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005814:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8005816:	b29b      	uxth	r3, r3
 8005818:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800581a:	2276      	movs	r2, #118	; 0x76
 800581c:	2194      	movs	r1, #148	; 0x94
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7fc f8e0 	bl	80019e4 <VL53L0X_WrByte>
 8005824:	4603      	mov	r3, r0
 8005826:	461a      	mov	r2, r3
 8005828:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800582c:	4313      	orrs	r3, r2
 800582e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7ff fbc8 	bl	8004fc8 <VL53L0X_device_read_strobe>
 8005838:	4603      	mov	r3, r0
 800583a:	461a      	mov	r2, r3
 800583c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005840:	4313      	orrs	r3, r2
 8005842:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005846:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800584a:	461a      	mov	r2, r3
 800584c:	2190      	movs	r1, #144	; 0x90
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7fc f9ac 	bl	8001bac <VL53L0X_RdDWord>
 8005854:	4603      	mov	r3, r0
 8005856:	461a      	mov	r2, r3
 8005858:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800585c:	4313      	orrs	r3, r2
 800585e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8005866:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005868:	4313      	orrs	r3, r2
 800586a:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800586c:	2200      	movs	r2, #0
 800586e:	2181      	movs	r1, #129	; 0x81
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f7fc f8b7 	bl	80019e4 <VL53L0X_WrByte>
 8005876:	4603      	mov	r3, r0
 8005878:	461a      	mov	r2, r3
 800587a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800587e:	4313      	orrs	r3, r2
 8005880:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8005884:	2206      	movs	r2, #6
 8005886:	21ff      	movs	r1, #255	; 0xff
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7fc f8ab 	bl	80019e4 <VL53L0X_WrByte>
 800588e:	4603      	mov	r3, r0
 8005890:	461a      	mov	r2, r3
 8005892:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005896:	4313      	orrs	r3, r2
 8005898:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800589c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80058a0:	461a      	mov	r2, r3
 80058a2:	2183      	movs	r1, #131	; 0x83
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7fc f91f 	bl	8001ae8 <VL53L0X_RdByte>
 80058aa:	4603      	mov	r3, r0
 80058ac:	461a      	mov	r2, r3
 80058ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 80058b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80058bc:	f023 0304 	bic.w	r3, r3, #4
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	461a      	mov	r2, r3
 80058c4:	2183      	movs	r1, #131	; 0x83
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7fc f88c 	bl	80019e4 <VL53L0X_WrByte>
 80058cc:	4603      	mov	r3, r0
 80058ce:	461a      	mov	r2, r3
 80058d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058d4:	4313      	orrs	r3, r2
 80058d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80058da:	2201      	movs	r2, #1
 80058dc:	21ff      	movs	r1, #255	; 0xff
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7fc f880 	bl	80019e4 <VL53L0X_WrByte>
 80058e4:	4603      	mov	r3, r0
 80058e6:	461a      	mov	r2, r3
 80058e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058ec:	4313      	orrs	r3, r2
 80058ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80058f2:	2201      	movs	r2, #1
 80058f4:	2100      	movs	r1, #0
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7fc f874 	bl	80019e4 <VL53L0X_WrByte>
 80058fc:	4603      	mov	r3, r0
 80058fe:	461a      	mov	r2, r3
 8005900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005904:	4313      	orrs	r3, r2
 8005906:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800590a:	2200      	movs	r2, #0
 800590c:	21ff      	movs	r1, #255	; 0xff
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fc f868 	bl	80019e4 <VL53L0X_WrByte>
 8005914:	4603      	mov	r3, r0
 8005916:	461a      	mov	r2, r3
 8005918:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800591c:	4313      	orrs	r3, r2
 800591e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005922:	2200      	movs	r2, #0
 8005924:	2180      	movs	r1, #128	; 0x80
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7fc f85c 	bl	80019e4 <VL53L0X_WrByte>
 800592c:	4603      	mov	r3, r0
 800592e:	461a      	mov	r2, r3
 8005930:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005934:	4313      	orrs	r3, r2
 8005936:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800593a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800593e:	2b00      	cmp	r3, #0
 8005940:	f040 808f 	bne.w	8005a62 <VL53L0X_get_info_from_device+0x9be>
 8005944:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005948:	2b07      	cmp	r3, #7
 800594a:	f000 808a 	beq.w	8005a62 <VL53L0X_get_info_from_device+0x9be>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800594e:	78fb      	ldrb	r3, [r7, #3]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	d024      	beq.n	80059a2 <VL53L0X_get_info_from_device+0x8fe>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8005958:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800595c:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005960:	2b00      	cmp	r3, #0
 8005962:	d11e      	bne.n	80059a2 <VL53L0X_get_info_from_device+0x8fe>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800596a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8005974:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8005978:	2300      	movs	r3, #0
 800597a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800597c:	e00e      	b.n	800599c <VL53L0X_get_info_from_device+0x8f8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800597e:	f107 0208 	add.w	r2, r7, #8
 8005982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005984:	4413      	add	r3, r2
 8005986:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800598c:	4413      	add	r3, r2
 800598e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8005992:	460a      	mov	r2, r1
 8005994:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8005996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005998:	3301      	adds	r3, #1
 800599a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800599c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800599e:	2b05      	cmp	r3, #5
 80059a0:	dded      	ble.n	800597e <VL53L0X_get_info_from_device+0x8da>
			}
		}

		if (((option & 2) == 2) &&
 80059a2:	78fb      	ldrb	r3, [r7, #3]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d018      	beq.n	80059de <VL53L0X_get_info_from_device+0x93a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80059ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80059b0:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d112      	bne.n	80059de <VL53L0X_get_info_from_device+0x93a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80059b8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80059c2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	33f3      	adds	r3, #243	; 0xf3
 80059d0:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 80059d2:	f107 0310 	add.w	r3, r7, #16
 80059d6:	4619      	mov	r1, r3
 80059d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80059da:	f005 faed 	bl	800afb8 <strcpy>

		}

		if (((option & 4) == 4) &&
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d030      	beq.n	8005a4a <VL53L0X_get_info_from_device+0x9a6>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80059e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80059ec:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d12a      	bne.n	8005a4a <VL53L0X_get_info_from_device+0x9a6>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80059f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80059fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8005a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a06:	025b      	lsls	r3, r3, #9
 8005a08:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a0e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8005a12:	2300      	movs	r3, #0
 8005a14:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8005a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d011      	beq.n	8005a42 <VL53L0X_get_info_from_device+0x99e>
					OffsetFixed1104_mm =
 8005a1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8005a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a2c:	fb02 f303 	mul.w	r3, r2, r3
 8005a30:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8005a32:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8005a36:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005a3a:	425b      	negs	r3, r3
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8005a42:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8005a4a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005a4e:	78fb      	ldrb	r3, [r7, #3]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8005a58:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
 8005a62:	4b0c      	ldr	r3, [pc, #48]	; (8005a94 <VL53L0X_get_info_from_device+0x9f0>)
 8005a64:	681c      	ldr	r4, [r3, #0]
 8005a66:	f001 ffdb 	bl	8007a20 <HAL_GetTick>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8005a72:	9302      	str	r3, [sp, #8]
 8005a74:	4b08      	ldr	r3, [pc, #32]	; (8005a98 <VL53L0X_get_info_from_device+0x9f4>)
 8005a76:	9301      	str	r3, [sp, #4]
 8005a78:	9200      	str	r2, [sp, #0]
 8005a7a:	4b08      	ldr	r3, [pc, #32]	; (8005a9c <VL53L0X_get_info_from_device+0x9f8>)
 8005a7c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005a80:	4621      	mov	r1, r4
 8005a82:	2001      	movs	r0, #1
 8005a84:	f001 ff1e 	bl	80078c4 <trace_print_module_function>
	return Status;
 8005a88:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3764      	adds	r7, #100	; 0x64
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd90      	pop	{r4, r7, pc}
 8005a94:	200007c8 	.word	0x200007c8
 8005a98:	0800ca14 	.word	0x0800ca14
 8005a9c:	0800c9bc 	.word	0x0800c9bc

08005aa0 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8005aa0:	b590      	push	{r4, r7, lr}
 8005aa2:	b08b      	sub	sp, #44	; 0x2c
 8005aa4:	af04      	add	r7, sp, #16
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	70fb      	strb	r3, [r7, #3]
	uint64_t PLL_period_ps;
	uint32_t macro_period_vclks;
	uint32_t macro_period_ps;

	LOG_FUNCTION_START("");
 8005aac:	4b1b      	ldr	r3, [pc, #108]	; (8005b1c <VL53L0X_calc_macro_period_ps+0x7c>)
 8005aae:	681c      	ldr	r4, [r3, #0]
 8005ab0:	f001 ffb6 	bl	8007a20 <HAL_GetTick>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	4b19      	ldr	r3, [pc, #100]	; (8005b20 <VL53L0X_calc_macro_period_ps+0x80>)
 8005aba:	9301      	str	r3, [sp, #4]
 8005abc:	9200      	str	r2, [sp, #0]
 8005abe:	4b19      	ldr	r3, [pc, #100]	; (8005b24 <VL53L0X_calc_macro_period_ps+0x84>)
 8005ac0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	2001      	movs	r0, #1
 8005ac8:	f001 fefc 	bl	80078c4 <trace_print_module_function>

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8005acc:	f240 6277 	movw	r2, #1655	; 0x677
 8005ad0:	f04f 0300 	mov.w	r3, #0
 8005ad4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8005ad8:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8005adc:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8005ade:	78fb      	ldrb	r3, [r7, #3]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	fb02 f303 	mul.w	r3, r2, r3
 8005aec:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
 8005aee:	4b0b      	ldr	r3, [pc, #44]	; (8005b1c <VL53L0X_calc_macro_period_ps+0x7c>)
 8005af0:	681c      	ldr	r4, [r3, #0]
 8005af2:	f001 ff95 	bl	8007a20 <HAL_GetTick>
 8005af6:	4603      	mov	r3, r0
 8005af8:	461a      	mov	r2, r3
 8005afa:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <VL53L0X_calc_macro_period_ps+0x88>)
 8005afc:	9302      	str	r3, [sp, #8]
 8005afe:	4b08      	ldr	r3, [pc, #32]	; (8005b20 <VL53L0X_calc_macro_period_ps+0x80>)
 8005b00:	9301      	str	r3, [sp, #4]
 8005b02:	9200      	str	r2, [sp, #0]
 8005b04:	4b09      	ldr	r3, [pc, #36]	; (8005b2c <VL53L0X_calc_macro_period_ps+0x8c>)
 8005b06:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005b0a:	4621      	mov	r1, r4
 8005b0c:	2001      	movs	r0, #1
 8005b0e:	f001 fed9 	bl	80078c4 <trace_print_module_function>
	return macro_period_ps;
 8005b12:	68bb      	ldr	r3, [r7, #8]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	371c      	adds	r7, #28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd90      	pop	{r4, r7, pc}
 8005b1c:	200007c8 	.word	0x200007c8
 8005b20:	0800ca34 	.word	0x0800ca34
 8005b24:	0800c9a8 	.word	0x0800c9a8
 8005b28:	0800c9cc 	.word	0x0800c9cc
 8005b2c:	0800c9bc 	.word	0x0800c9bc

08005b30 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8005b40:	2300      	movs	r3, #0
 8005b42:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d017      	beq.n	8005b7a <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005b50:	e005      	b.n	8005b5e <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	085b      	lsrs	r3, r3, #1
 8005b56:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8005b58:	89fb      	ldrh	r3, [r7, #14]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1f4      	bne.n	8005b52 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8005b68:	89fb      	ldrh	r3, [r7, #14]
 8005b6a:	021b      	lsls	r3, r3, #8
 8005b6c:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8005b76:	4413      	add	r3, r2
 8005b78:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8005b7a:	8afb      	ldrh	r3, [r7, #22]

}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	371c      	adds	r7, #28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	4603      	mov	r3, r0
 8005b90:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8005b92:	2300      	movs	r3, #0
 8005b94:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005b96:	88fb      	ldrh	r3, [r7, #6]
 8005b98:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8005b9a:	88fa      	ldrh	r2, [r7, #6]
 8005b9c:	0a12      	lsrs	r2, r2, #8
 8005b9e:	b292      	uxth	r2, r2
 8005ba0:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b088      	sub	sp, #32
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005bc6:	79fb      	ldrb	r3, [r7, #7]
 8005bc8:	4619      	mov	r1, r3
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f7ff ff68 	bl	8005aa0 <VL53L0X_calc_macro_period_ps>
 8005bd0:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005bd8:	4a0a      	ldr	r2, [pc, #40]	; (8005c04 <VL53L0X_calc_timeout_mclks+0x50>)
 8005bda:	fba2 2303 	umull	r2, r3, r2, r3
 8005bde:	099b      	lsrs	r3, r3, #6
 8005be0:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005be8:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	085b      	lsrs	r3, r3, #1
 8005bf0:	441a      	add	r2, r3
	timeout_period_mclks =
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf8:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8005bfa:	69fb      	ldr	r3, [r7, #28]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3720      	adds	r7, #32
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	10624dd3 	.word	0x10624dd3

08005c08 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	807b      	strh	r3, [r7, #2]
 8005c14:	4613      	mov	r3, r2
 8005c16:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005c1c:	787b      	ldrb	r3, [r7, #1]
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7ff ff3d 	bl	8005aa0 <VL53L0X_calc_macro_period_ps>
 8005c26:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005c2e:	4a0a      	ldr	r2, [pc, #40]	; (8005c58 <VL53L0X_calc_timeout_us+0x50>)
 8005c30:	fba2 2303 	umull	r2, r3, r2, r3
 8005c34:	099b      	lsrs	r3, r3, #6
 8005c36:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8005c38:	887b      	ldrh	r3, [r7, #2]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	fb02 f303 	mul.w	r3, r2, r3
 8005c40:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8005c44:	4a04      	ldr	r2, [pc, #16]	; (8005c58 <VL53L0X_calc_timeout_us+0x50>)
 8005c46:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4a:	099b      	lsrs	r3, r3, #6
 8005c4c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8005c4e:	697b      	ldr	r3, [r7, #20]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	10624dd3 	.word	0x10624dd3

08005c5c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b08c      	sub	sp, #48	; 0x30
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	460b      	mov	r3, r1
 8005c66:	607a      	str	r2, [r7, #4]
 8005c68:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8005c70:	2300      	movs	r3, #0
 8005c72:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8005c76:	2300      	movs	r3, #0
 8005c78:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8005c82:	7afb      	ldrb	r3, [r7, #11]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d005      	beq.n	8005c94 <get_sequence_step_timeout+0x38>
 8005c88:	7afb      	ldrb	r3, [r7, #11]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d002      	beq.n	8005c94 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8005c8e:	7afb      	ldrb	r3, [r7, #11]
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d128      	bne.n	8005ce6 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005c94:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005c98:	461a      	mov	r2, r3
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f7fc fde5 	bl	800286c <VL53L0X_GetVcselPulsePeriod>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8005ca8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d109      	bne.n	8005cc4 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8005cb0:	f107 0320 	add.w	r3, r7, #32
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	2146      	movs	r1, #70	; 0x46
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f7fb ff15 	bl	8001ae8 <VL53L0X_RdByte>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8005cc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7ff ff5c 	bl	8005b88 <VL53L0X_decode_timeout>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005cd4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005cd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005cda:	4619      	mov	r1, r3
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f7ff ff93 	bl	8005c08 <VL53L0X_calc_timeout_us>
 8005ce2:	62b8      	str	r0, [r7, #40]	; 0x28
 8005ce4:	e092      	b.n	8005e0c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005ce6:	7afb      	ldrb	r3, [r7, #11]
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d135      	bne.n	8005d58 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005cec:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f7fc fdb9 	bl	800286c <VL53L0X_GetVcselPulsePeriod>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005d00:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f040 8081 	bne.w	8005e0c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005d0a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005d0e:	461a      	mov	r2, r3
 8005d10:	2100      	movs	r1, #0
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f7fc fdaa 	bl	800286c <VL53L0X_GetVcselPulsePeriod>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8005d1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d109      	bne.n	8005d3a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8005d26:	f107 031e 	add.w	r3, r7, #30
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	2151      	movs	r1, #81	; 0x51
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f7fb ff04 	bl	8001b3c <VL53L0X_RdWord>
 8005d34:	4603      	mov	r3, r0
 8005d36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005d3a:	8bfb      	ldrh	r3, [r7, #30]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7ff ff23 	bl	8005b88 <VL53L0X_decode_timeout>
 8005d42:	4603      	mov	r3, r0
 8005d44:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005d46:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005d4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f7ff ff5a 	bl	8005c08 <VL53L0X_calc_timeout_us>
 8005d54:	62b8      	str	r0, [r7, #40]	; 0x28
 8005d56:	e059      	b.n	8005e0c <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8005d58:	7afb      	ldrb	r3, [r7, #11]
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d156      	bne.n	8005e0c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005d5e:	f107 0314 	add.w	r3, r7, #20
 8005d62:	4619      	mov	r1, r3
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f7fc ff0d 	bl	8002b84 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8005d6e:	7dfb      	ldrb	r3, [r7, #23]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d01d      	beq.n	8005db0 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005d74:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005d78:	461a      	mov	r2, r3
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f7fc fd75 	bl	800286c <VL53L0X_GetVcselPulsePeriod>
 8005d82:	4603      	mov	r3, r0
 8005d84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8005d88:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10f      	bne.n	8005db0 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8005d90:	f107 031e 	add.w	r3, r7, #30
 8005d94:	461a      	mov	r2, r3
 8005d96:	2151      	movs	r1, #81	; 0x51
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f7fb fecf 	bl	8001b3c <VL53L0X_RdWord>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005da4:	8bfb      	ldrh	r3, [r7, #30]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff feee 	bl	8005b88 <VL53L0X_decode_timeout>
 8005dac:	4603      	mov	r3, r0
 8005dae:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005db0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d109      	bne.n	8005dcc <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005db8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f7fc fd53 	bl	800286c <VL53L0X_GetVcselPulsePeriod>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005dcc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10f      	bne.n	8005df4 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8005dd4:	f107 031c 	add.w	r3, r7, #28
 8005dd8:	461a      	mov	r2, r3
 8005dda:	2171      	movs	r1, #113	; 0x71
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f7fb fead 	bl	8001b3c <VL53L0X_RdWord>
 8005de2:	4603      	mov	r3, r0
 8005de4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005de8:	8bbb      	ldrh	r3, [r7, #28]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7ff fecc 	bl	8005b88 <VL53L0X_decode_timeout>
 8005df0:	4603      	mov	r3, r0
 8005df2:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8005df4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005df6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005dfc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005e00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e02:	4619      	mov	r1, r3
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f7ff feff 	bl	8005c08 <VL53L0X_calc_timeout_us>
 8005e0a:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e10:	601a      	str	r2, [r3, #0]

	return Status;
 8005e12:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3730      	adds	r7, #48	; 0x30
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b08a      	sub	sp, #40	; 0x28
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	60f8      	str	r0, [r7, #12]
 8005e26:	460b      	mov	r3, r1
 8005e28:	607a      	str	r2, [r7, #4]
 8005e2a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8005e32:	7afb      	ldrb	r3, [r7, #11]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d005      	beq.n	8005e44 <set_sequence_step_timeout+0x26>
 8005e38:	7afb      	ldrb	r3, [r7, #11]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d002      	beq.n	8005e44 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8005e3e:	7afb      	ldrb	r3, [r7, #11]
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d138      	bne.n	8005eb6 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005e44:	f107 031b 	add.w	r3, r7, #27
 8005e48:	461a      	mov	r2, r3
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f7fc fd0d 	bl	800286c <VL53L0X_GetVcselPulsePeriod>
 8005e52:	4603      	mov	r3, r0
 8005e54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8005e58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d11a      	bne.n	8005e96 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8005e60:	7efb      	ldrb	r3, [r7, #27]
 8005e62:	461a      	mov	r2, r3
 8005e64:	6879      	ldr	r1, [r7, #4]
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f7ff fea4 	bl	8005bb4 <VL53L0X_calc_timeout_mclks>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8005e70:	8bbb      	ldrh	r3, [r7, #28]
 8005e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e76:	d903      	bls.n	8005e80 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8005e78:	23ff      	movs	r3, #255	; 0xff
 8005e7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005e7e:	e004      	b.n	8005e8a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8005e80:	8bbb      	ldrh	r3, [r7, #28]
 8005e82:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8005e84:	3b01      	subs	r3, #1
 8005e86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005e8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005e96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f040 80ab 	bne.w	8005ff6 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8005ea0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	2146      	movs	r1, #70	; 0x46
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f7fb fd9b 	bl	80019e4 <VL53L0X_WrByte>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8005eb4:	e09f      	b.n	8005ff6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005eb6:	7afb      	ldrb	r3, [r7, #11]
 8005eb8:	2b03      	cmp	r3, #3
 8005eba:	d135      	bne.n	8005f28 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8005ebc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d11b      	bne.n	8005efc <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005ec4:	f107 031b 	add.w	r3, r7, #27
 8005ec8:	461a      	mov	r2, r3
 8005eca:	2100      	movs	r1, #0
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f7fc fccd 	bl	800286c <VL53L0X_GetVcselPulsePeriod>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8005ed8:	7efb      	ldrb	r3, [r7, #27]
 8005eda:	461a      	mov	r2, r3
 8005edc:	6879      	ldr	r1, [r7, #4]
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f7ff fe68 	bl	8005bb4 <VL53L0X_calc_timeout_mclks>
 8005ee4:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8005ee6:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8005ee8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7ff fe20 	bl	8005b30 <VL53L0X_encode_timeout>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005ef4:	8b3a      	ldrh	r2, [r7, #24]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8005efc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d108      	bne.n	8005f16 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8005f04:	8b3b      	ldrh	r3, [r7, #24]
 8005f06:	461a      	mov	r2, r3
 8005f08:	2151      	movs	r1, #81	; 0x51
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f7fb fd8e 	bl	8001a2c <VL53L0X_WrWord>
 8005f10:	4603      	mov	r3, r0
 8005f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8005f16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d16b      	bne.n	8005ff6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8005f26:	e066      	b.n	8005ff6 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8005f28:	7afb      	ldrb	r3, [r7, #11]
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d160      	bne.n	8005ff0 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8005f2e:	f107 0310 	add.w	r3, r7, #16
 8005f32:	4619      	mov	r1, r3
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f7fc fe25 	bl	8002b84 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8005f3e:	7cfb      	ldrb	r3, [r7, #19]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d01d      	beq.n	8005f80 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005f44:	f107 031b 	add.w	r3, r7, #27
 8005f48:	461a      	mov	r2, r3
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f7fc fc8d 	bl	800286c <VL53L0X_GetVcselPulsePeriod>
 8005f52:	4603      	mov	r3, r0
 8005f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8005f58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10f      	bne.n	8005f80 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8005f60:	f107 0318 	add.w	r3, r7, #24
 8005f64:	461a      	mov	r2, r3
 8005f66:	2151      	movs	r1, #81	; 0x51
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f7fb fde7 	bl	8001b3c <VL53L0X_RdWord>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8005f74:	8b3b      	ldrh	r3, [r7, #24]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7ff fe06 	bl	8005b88 <VL53L0X_decode_timeout>
 8005f7c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8005f7e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8005f80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d109      	bne.n	8005f9c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005f88:	f107 031b 	add.w	r3, r7, #27
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	2101      	movs	r1, #1
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f7fc fc6b 	bl	800286c <VL53L0X_GetVcselPulsePeriod>
 8005f96:	4603      	mov	r3, r0
 8005f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8005f9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d128      	bne.n	8005ff6 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8005fa4:	7efb      	ldrb	r3, [r7, #27]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f7ff fe02 	bl	8005bb4 <VL53L0X_calc_timeout_mclks>
 8005fb0:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8005fb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fb4:	6a3a      	ldr	r2, [r7, #32]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8005fba:	6a38      	ldr	r0, [r7, #32]
 8005fbc:	f7ff fdb8 	bl	8005b30 <VL53L0X_encode_timeout>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8005fc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d108      	bne.n	8005fde <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8005fcc:	8bfb      	ldrh	r3, [r7, #30]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	2171      	movs	r1, #113	; 0x71
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f7fb fd2a 	bl	8001a2c <VL53L0X_WrWord>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8005fde:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d107      	bne.n	8005ff6 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8005fee:	e002      	b.n	8005ff6 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005ff0:	23fc      	movs	r3, #252	; 0xfc
 8005ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8005ff6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3728      	adds	r7, #40	; 0x28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b08a      	sub	sp, #40	; 0x28
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	460b      	mov	r3, r1
 800600c:	70fb      	strb	r3, [r7, #3]
 800600e:	4613      	mov	r3, r2
 8006010:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006012:	2300      	movs	r3, #0
 8006014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8006018:	230c      	movs	r3, #12
 800601a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800601e:	2312      	movs	r3, #18
 8006020:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8006024:	2308      	movs	r3, #8
 8006026:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800602a:	230e      	movs	r3, #14
 800602c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8006030:	2300      	movs	r3, #0
 8006032:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8006034:	78bb      	ldrb	r3, [r7, #2]
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006040:	23fc      	movs	r3, #252	; 0xfc
 8006042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006046:	e020      	b.n	800608a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8006048:	78fb      	ldrb	r3, [r7, #3]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10d      	bne.n	800606a <VL53L0X_set_vcsel_pulse_period+0x68>
 800604e:	78ba      	ldrb	r2, [r7, #2]
 8006050:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006054:	429a      	cmp	r2, r3
 8006056:	d304      	bcc.n	8006062 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8006058:	78ba      	ldrb	r2, [r7, #2]
 800605a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800605e:	429a      	cmp	r2, r3
 8006060:	d903      	bls.n	800606a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006062:	23fc      	movs	r3, #252	; 0xfc
 8006064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006068:	e00f      	b.n	800608a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800606a:	78fb      	ldrb	r3, [r7, #3]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d10c      	bne.n	800608a <VL53L0X_set_vcsel_pulse_period+0x88>
 8006070:	78ba      	ldrb	r2, [r7, #2]
 8006072:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006076:	429a      	cmp	r2, r3
 8006078:	d304      	bcc.n	8006084 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800607a:	78ba      	ldrb	r2, [r7, #2]
 800607c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006080:	429a      	cmp	r2, r3
 8006082:	d902      	bls.n	800608a <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006084:	23fc      	movs	r3, #252	; 0xfc
 8006086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800608a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800608e:	2b00      	cmp	r3, #0
 8006090:	d002      	beq.n	8006098 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8006092:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006096:	e239      	b.n	800650c <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d150      	bne.n	8006140 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800609e:	78bb      	ldrb	r3, [r7, #2]
 80060a0:	2b0c      	cmp	r3, #12
 80060a2:	d110      	bne.n	80060c6 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 80060a4:	2218      	movs	r2, #24
 80060a6:	2157      	movs	r1, #87	; 0x57
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7fb fc9b 	bl	80019e4 <VL53L0X_WrByte>
 80060ae:	4603      	mov	r3, r0
 80060b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80060b4:	2208      	movs	r2, #8
 80060b6:	2156      	movs	r1, #86	; 0x56
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7fb fc93 	bl	80019e4 <VL53L0X_WrByte>
 80060be:	4603      	mov	r3, r0
 80060c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80060c4:	e17f      	b.n	80063c6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80060c6:	78bb      	ldrb	r3, [r7, #2]
 80060c8:	2b0e      	cmp	r3, #14
 80060ca:	d110      	bne.n	80060ee <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80060cc:	2230      	movs	r2, #48	; 0x30
 80060ce:	2157      	movs	r1, #87	; 0x57
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7fb fc87 	bl	80019e4 <VL53L0X_WrByte>
 80060d6:	4603      	mov	r3, r0
 80060d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80060dc:	2208      	movs	r2, #8
 80060de:	2156      	movs	r1, #86	; 0x56
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7fb fc7f 	bl	80019e4 <VL53L0X_WrByte>
 80060e6:	4603      	mov	r3, r0
 80060e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80060ec:	e16b      	b.n	80063c6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 80060ee:	78bb      	ldrb	r3, [r7, #2]
 80060f0:	2b10      	cmp	r3, #16
 80060f2:	d110      	bne.n	8006116 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 80060f4:	2240      	movs	r2, #64	; 0x40
 80060f6:	2157      	movs	r1, #87	; 0x57
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7fb fc73 	bl	80019e4 <VL53L0X_WrByte>
 80060fe:	4603      	mov	r3, r0
 8006100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8006104:	2208      	movs	r2, #8
 8006106:	2156      	movs	r1, #86	; 0x56
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7fb fc6b 	bl	80019e4 <VL53L0X_WrByte>
 800610e:	4603      	mov	r3, r0
 8006110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006114:	e157      	b.n	80063c6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8006116:	78bb      	ldrb	r3, [r7, #2]
 8006118:	2b12      	cmp	r3, #18
 800611a:	f040 8154 	bne.w	80063c6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800611e:	2250      	movs	r2, #80	; 0x50
 8006120:	2157      	movs	r1, #87	; 0x57
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7fb fc5e 	bl	80019e4 <VL53L0X_WrByte>
 8006128:	4603      	mov	r3, r0
 800612a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800612e:	2208      	movs	r2, #8
 8006130:	2156      	movs	r1, #86	; 0x56
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7fb fc56 	bl	80019e4 <VL53L0X_WrByte>
 8006138:	4603      	mov	r3, r0
 800613a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800613e:	e142      	b.n	80063c6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	2b01      	cmp	r3, #1
 8006144:	f040 813f 	bne.w	80063c6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8006148:	78bb      	ldrb	r3, [r7, #2]
 800614a:	2b08      	cmp	r3, #8
 800614c:	d14c      	bne.n	80061e8 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800614e:	2210      	movs	r2, #16
 8006150:	2148      	movs	r1, #72	; 0x48
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7fb fc46 	bl	80019e4 <VL53L0X_WrByte>
 8006158:	4603      	mov	r3, r0
 800615a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800615e:	2208      	movs	r2, #8
 8006160:	2147      	movs	r1, #71	; 0x47
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7fb fc3e 	bl	80019e4 <VL53L0X_WrByte>
 8006168:	4603      	mov	r3, r0
 800616a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800616e:	2202      	movs	r2, #2
 8006170:	2132      	movs	r1, #50	; 0x32
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7fb fc36 	bl	80019e4 <VL53L0X_WrByte>
 8006178:	4603      	mov	r3, r0
 800617a:	461a      	mov	r2, r3
 800617c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006180:	4313      	orrs	r3, r2
 8006182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8006186:	220c      	movs	r2, #12
 8006188:	2130      	movs	r1, #48	; 0x30
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7fb fc2a 	bl	80019e4 <VL53L0X_WrByte>
 8006190:	4603      	mov	r3, r0
 8006192:	461a      	mov	r2, r3
 8006194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006198:	4313      	orrs	r3, r2
 800619a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800619e:	2201      	movs	r2, #1
 80061a0:	21ff      	movs	r1, #255	; 0xff
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7fb fc1e 	bl	80019e4 <VL53L0X_WrByte>
 80061a8:	4603      	mov	r3, r0
 80061aa:	461a      	mov	r2, r3
 80061ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061b0:	4313      	orrs	r3, r2
 80061b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80061b6:	2230      	movs	r2, #48	; 0x30
 80061b8:	2130      	movs	r1, #48	; 0x30
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7fb fc12 	bl	80019e4 <VL53L0X_WrByte>
 80061c0:	4603      	mov	r3, r0
 80061c2:	461a      	mov	r2, r3
 80061c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061c8:	4313      	orrs	r3, r2
 80061ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80061ce:	2200      	movs	r2, #0
 80061d0:	21ff      	movs	r1, #255	; 0xff
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7fb fc06 	bl	80019e4 <VL53L0X_WrByte>
 80061d8:	4603      	mov	r3, r0
 80061da:	461a      	mov	r2, r3
 80061dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061e0:	4313      	orrs	r3, r2
 80061e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80061e6:	e0ee      	b.n	80063c6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80061e8:	78bb      	ldrb	r3, [r7, #2]
 80061ea:	2b0a      	cmp	r3, #10
 80061ec:	d14c      	bne.n	8006288 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 80061ee:	2228      	movs	r2, #40	; 0x28
 80061f0:	2148      	movs	r1, #72	; 0x48
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7fb fbf6 	bl	80019e4 <VL53L0X_WrByte>
 80061f8:	4603      	mov	r3, r0
 80061fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 80061fe:	2208      	movs	r2, #8
 8006200:	2147      	movs	r1, #71	; 0x47
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7fb fbee 	bl	80019e4 <VL53L0X_WrByte>
 8006208:	4603      	mov	r3, r0
 800620a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800620e:	2203      	movs	r2, #3
 8006210:	2132      	movs	r1, #50	; 0x32
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7fb fbe6 	bl	80019e4 <VL53L0X_WrByte>
 8006218:	4603      	mov	r3, r0
 800621a:	461a      	mov	r2, r3
 800621c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006220:	4313      	orrs	r3, r2
 8006222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006226:	2209      	movs	r2, #9
 8006228:	2130      	movs	r1, #48	; 0x30
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7fb fbda 	bl	80019e4 <VL53L0X_WrByte>
 8006230:	4603      	mov	r3, r0
 8006232:	461a      	mov	r2, r3
 8006234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006238:	4313      	orrs	r3, r2
 800623a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800623e:	2201      	movs	r2, #1
 8006240:	21ff      	movs	r1, #255	; 0xff
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7fb fbce 	bl	80019e4 <VL53L0X_WrByte>
 8006248:	4603      	mov	r3, r0
 800624a:	461a      	mov	r2, r3
 800624c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006250:	4313      	orrs	r3, r2
 8006252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006256:	2220      	movs	r2, #32
 8006258:	2130      	movs	r1, #48	; 0x30
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7fb fbc2 	bl	80019e4 <VL53L0X_WrByte>
 8006260:	4603      	mov	r3, r0
 8006262:	461a      	mov	r2, r3
 8006264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006268:	4313      	orrs	r3, r2
 800626a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800626e:	2200      	movs	r2, #0
 8006270:	21ff      	movs	r1, #255	; 0xff
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7fb fbb6 	bl	80019e4 <VL53L0X_WrByte>
 8006278:	4603      	mov	r3, r0
 800627a:	461a      	mov	r2, r3
 800627c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006280:	4313      	orrs	r3, r2
 8006282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006286:	e09e      	b.n	80063c6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8006288:	78bb      	ldrb	r3, [r7, #2]
 800628a:	2b0c      	cmp	r3, #12
 800628c:	d14c      	bne.n	8006328 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800628e:	2238      	movs	r2, #56	; 0x38
 8006290:	2148      	movs	r1, #72	; 0x48
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7fb fba6 	bl	80019e4 <VL53L0X_WrByte>
 8006298:	4603      	mov	r3, r0
 800629a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800629e:	2208      	movs	r2, #8
 80062a0:	2147      	movs	r1, #71	; 0x47
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7fb fb9e 	bl	80019e4 <VL53L0X_WrByte>
 80062a8:	4603      	mov	r3, r0
 80062aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80062ae:	2203      	movs	r2, #3
 80062b0:	2132      	movs	r1, #50	; 0x32
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7fb fb96 	bl	80019e4 <VL53L0X_WrByte>
 80062b8:	4603      	mov	r3, r0
 80062ba:	461a      	mov	r2, r3
 80062bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062c0:	4313      	orrs	r3, r2
 80062c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80062c6:	2208      	movs	r2, #8
 80062c8:	2130      	movs	r1, #48	; 0x30
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7fb fb8a 	bl	80019e4 <VL53L0X_WrByte>
 80062d0:	4603      	mov	r3, r0
 80062d2:	461a      	mov	r2, r3
 80062d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062d8:	4313      	orrs	r3, r2
 80062da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80062de:	2201      	movs	r2, #1
 80062e0:	21ff      	movs	r1, #255	; 0xff
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fb fb7e 	bl	80019e4 <VL53L0X_WrByte>
 80062e8:	4603      	mov	r3, r0
 80062ea:	461a      	mov	r2, r3
 80062ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062f0:	4313      	orrs	r3, r2
 80062f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80062f6:	2220      	movs	r2, #32
 80062f8:	2130      	movs	r1, #48	; 0x30
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7fb fb72 	bl	80019e4 <VL53L0X_WrByte>
 8006300:	4603      	mov	r3, r0
 8006302:	461a      	mov	r2, r3
 8006304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006308:	4313      	orrs	r3, r2
 800630a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800630e:	2200      	movs	r2, #0
 8006310:	21ff      	movs	r1, #255	; 0xff
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7fb fb66 	bl	80019e4 <VL53L0X_WrByte>
 8006318:	4603      	mov	r3, r0
 800631a:	461a      	mov	r2, r3
 800631c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006320:	4313      	orrs	r3, r2
 8006322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006326:	e04e      	b.n	80063c6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006328:	78bb      	ldrb	r3, [r7, #2]
 800632a:	2b0e      	cmp	r3, #14
 800632c:	d14b      	bne.n	80063c6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800632e:	2248      	movs	r2, #72	; 0x48
 8006330:	2148      	movs	r1, #72	; 0x48
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7fb fb56 	bl	80019e4 <VL53L0X_WrByte>
 8006338:	4603      	mov	r3, r0
 800633a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800633e:	2208      	movs	r2, #8
 8006340:	2147      	movs	r1, #71	; 0x47
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7fb fb4e 	bl	80019e4 <VL53L0X_WrByte>
 8006348:	4603      	mov	r3, r0
 800634a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800634e:	2203      	movs	r2, #3
 8006350:	2132      	movs	r1, #50	; 0x32
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7fb fb46 	bl	80019e4 <VL53L0X_WrByte>
 8006358:	4603      	mov	r3, r0
 800635a:	461a      	mov	r2, r3
 800635c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006360:	4313      	orrs	r3, r2
 8006362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006366:	2207      	movs	r2, #7
 8006368:	2130      	movs	r1, #48	; 0x30
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7fb fb3a 	bl	80019e4 <VL53L0X_WrByte>
 8006370:	4603      	mov	r3, r0
 8006372:	461a      	mov	r2, r3
 8006374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006378:	4313      	orrs	r3, r2
 800637a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800637e:	2201      	movs	r2, #1
 8006380:	21ff      	movs	r1, #255	; 0xff
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7fb fb2e 	bl	80019e4 <VL53L0X_WrByte>
 8006388:	4603      	mov	r3, r0
 800638a:	461a      	mov	r2, r3
 800638c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006390:	4313      	orrs	r3, r2
 8006392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006396:	2220      	movs	r2, #32
 8006398:	2130      	movs	r1, #48	; 0x30
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7fb fb22 	bl	80019e4 <VL53L0X_WrByte>
 80063a0:	4603      	mov	r3, r0
 80063a2:	461a      	mov	r2, r3
 80063a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063a8:	4313      	orrs	r3, r2
 80063aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80063ae:	2200      	movs	r2, #0
 80063b0:	21ff      	movs	r1, #255	; 0xff
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7fb fb16 	bl	80019e4 <VL53L0X_WrByte>
 80063b8:	4603      	mov	r3, r0
 80063ba:	461a      	mov	r2, r3
 80063bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063c0:	4313      	orrs	r3, r2
 80063c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80063c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d17f      	bne.n	80064ce <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80063ce:	78bb      	ldrb	r3, [r7, #2]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fe fdb2 	bl	8004f3a <VL53L0X_encode_vcsel_period>
 80063d6:	4603      	mov	r3, r0
 80063d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80063dc:	78fb      	ldrb	r3, [r7, #3]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d045      	beq.n	8006472 <VL53L0X_set_vcsel_pulse_period+0x470>
 80063e6:	e06e      	b.n	80064c6 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80063e8:	f107 0314 	add.w	r3, r7, #20
 80063ec:	461a      	mov	r2, r3
 80063ee:	2103      	movs	r1, #3
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7ff fc33 	bl	8005c5c <get_sequence_step_timeout>
 80063f6:	4603      	mov	r3, r0
 80063f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80063fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006400:	2b00      	cmp	r3, #0
 8006402:	d109      	bne.n	8006418 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8006404:	f107 0310 	add.w	r3, r7, #16
 8006408:	461a      	mov	r2, r3
 800640a:	2102      	movs	r1, #2
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7ff fc25 	bl	8005c5c <get_sequence_step_timeout>
 8006412:	4603      	mov	r3, r0
 8006414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006418:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800641c:	2b00      	cmp	r3, #0
 800641e:	d109      	bne.n	8006434 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8006420:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006424:	461a      	mov	r2, r3
 8006426:	2150      	movs	r1, #80	; 0x50
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7fb fadb 	bl	80019e4 <VL53L0X_WrByte>
 800642e:	4603      	mov	r3, r0
 8006430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8006434:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006438:	2b00      	cmp	r3, #0
 800643a:	d108      	bne.n	800644e <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	461a      	mov	r2, r3
 8006440:	2103      	movs	r1, #3
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7ff fceb 	bl	8005e1e <set_sequence_step_timeout>
 8006448:	4603      	mov	r3, r0
 800644a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800644e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006452:	2b00      	cmp	r3, #0
 8006454:	d108      	bne.n	8006468 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	461a      	mov	r2, r3
 800645a:	2102      	movs	r1, #2
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7ff fcde 	bl	8005e1e <set_sequence_step_timeout>
 8006462:	4603      	mov	r3, r0
 8006464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	78ba      	ldrb	r2, [r7, #2]
 800646c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8006470:	e02e      	b.n	80064d0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8006472:	f107 0318 	add.w	r3, r7, #24
 8006476:	461a      	mov	r2, r3
 8006478:	2104      	movs	r1, #4
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7ff fbee 	bl	8005c5c <get_sequence_step_timeout>
 8006480:	4603      	mov	r3, r0
 8006482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006486:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800648a:	2b00      	cmp	r3, #0
 800648c:	d109      	bne.n	80064a2 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800648e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006492:	461a      	mov	r2, r3
 8006494:	2170      	movs	r1, #112	; 0x70
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7fb faa4 	bl	80019e4 <VL53L0X_WrByte>
 800649c:	4603      	mov	r3, r0
 800649e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80064a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d108      	bne.n	80064bc <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	461a      	mov	r2, r3
 80064ae:	2104      	movs	r1, #4
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7ff fcb4 	bl	8005e1e <set_sequence_step_timeout>
 80064b6:	4603      	mov	r3, r0
 80064b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	78ba      	ldrb	r2, [r7, #2]
 80064c0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80064c4:	e004      	b.n	80064d0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80064c6:	23fc      	movs	r3, #252	; 0xfc
 80064c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80064cc:	e000      	b.n	80064d0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 80064ce:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 80064d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d109      	bne.n	80064ec <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80064de:	69f9      	ldr	r1, [r7, #28]
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7fc f903 	bl	80026ec <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80064e6:	4603      	mov	r3, r0
 80064e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 80064ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d109      	bne.n	8006508 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 80064f4:	f107 010f 	add.w	r1, r7, #15
 80064f8:	2301      	movs	r3, #1
 80064fa:	2200      	movs	r2, #0
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f7fe fc0b 	bl	8004d18 <VL53L0X_perform_phase_calibration>
 8006502:	4603      	mov	r3, r0
 8006504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8006508:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800650c:	4618      	mov	r0, r3
 800650e:	3728      	adds	r7, #40	; 0x28
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	460b      	mov	r3, r1
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006522:	2300      	movs	r3, #0
 8006524:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8006526:	7afb      	ldrb	r3, [r7, #11]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800652c:	2b01      	cmp	r3, #1
 800652e:	d00a      	beq.n	8006546 <VL53L0X_get_vcsel_pulse_period+0x32>
 8006530:	e013      	b.n	800655a <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8006532:	f107 0316 	add.w	r3, r7, #22
 8006536:	461a      	mov	r2, r3
 8006538:	2150      	movs	r1, #80	; 0x50
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f7fb fad4 	bl	8001ae8 <VL53L0X_RdByte>
 8006540:	4603      	mov	r3, r0
 8006542:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8006544:	e00b      	b.n	800655e <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8006546:	f107 0316 	add.w	r3, r7, #22
 800654a:	461a      	mov	r2, r3
 800654c:	2170      	movs	r1, #112	; 0x70
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f7fb faca 	bl	8001ae8 <VL53L0X_RdByte>
 8006554:	4603      	mov	r3, r0
 8006556:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8006558:	e001      	b.n	800655e <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800655a:	23fc      	movs	r3, #252	; 0xfc
 800655c:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800655e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d107      	bne.n	8006576 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8006566:	7dbb      	ldrb	r3, [r7, #22]
 8006568:	4618      	mov	r0, r3
 800656a:	f7fe fcd3 	bl	8004f14 <VL53L0X_decode_vcsel_period>
 800656e:	4603      	mov	r3, r0
 8006570:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	701a      	strb	r2, [r3, #0]

	return Status;
 8006576:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3718      	adds	r7, #24
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006584:	b590      	push	{r4, r7, lr}
 8006586:	b097      	sub	sp, #92	; 0x5c
 8006588:	af04      	add	r7, sp, #16
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800658e:	2300      	movs	r3, #0
 8006590:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8006594:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006598:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800659a:	f240 7376 	movw	r3, #1910	; 0x776
 800659e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80065a0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80065a4:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80065a6:	f44f 7325 	mov.w	r3, #660	; 0x294
 80065aa:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80065ac:	f240 234e 	movw	r3, #590	; 0x24e
 80065b0:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80065b2:	f240 23b2 	movw	r3, #690	; 0x2b2
 80065b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80065b8:	f44f 7325 	mov.w	r3, #660	; 0x294
 80065bc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80065be:	f240 2326 	movw	r3, #550	; 0x226
 80065c2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80065c4:	2300      	movs	r3, #0
 80065c6:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80065c8:	f644 6320 	movw	r3, #20000	; 0x4e20
 80065cc:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80065ce:	2300      	movs	r3, #0
 80065d0:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");
 80065d2:	4b81      	ldr	r3, [pc, #516]	; (80067d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x254>)
 80065d4:	681c      	ldr	r4, [r3, #0]
 80065d6:	f001 fa23 	bl	8007a20 <HAL_GetTick>
 80065da:	4603      	mov	r3, r0
 80065dc:	461a      	mov	r2, r3
 80065de:	4b7f      	ldr	r3, [pc, #508]	; (80067dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x258>)
 80065e0:	9301      	str	r3, [sp, #4]
 80065e2:	9200      	str	r2, [sp, #0]
 80065e4:	4b7e      	ldr	r3, [pc, #504]	; (80067e0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x25c>)
 80065e6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80065ea:	4621      	mov	r1, r4
 80065ec:	2001      	movs	r0, #1
 80065ee:	f001 f969 	bl	80078c4 <trace_print_module_function>

	if (MeasurementTimingBudgetMicroSeconds
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d205      	bcs.n	8006606 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x82>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80065fa:	23fc      	movs	r3, #252	; 0xfc
 80065fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8006600:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006604:	e0e3      	b.n	80067ce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24a>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8006606:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660a:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006612:	f107 0314 	add.w	r3, r7, #20
 8006616:	4619      	mov	r1, r3
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7fc fab3 	bl	8002b84 <VL53L0X_GetSequenceStepEnables>
 800661e:	4603      	mov	r3, r0
 8006620:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8006624:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006628:	2b00      	cmp	r3, #0
 800662a:	d16e      	bne.n	800670a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
		(SchedulerSequenceSteps.TccOn  ||
 800662c:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800662e:	2b00      	cmp	r3, #0
 8006630:	d105      	bne.n	800663e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xba>
		SchedulerSequenceSteps.MsrcOn ||
 8006632:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8006634:	2b00      	cmp	r3, #0
 8006636:	d102      	bne.n	800663e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xba>
		SchedulerSequenceSteps.DssOn)) {
 8006638:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800663a:	2b00      	cmp	r3, #0
 800663c:	d065      	beq.n	800670a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800663e:	f107 0310 	add.w	r3, r7, #16
 8006642:	461a      	mov	r2, r3
 8006644:	2102      	movs	r1, #2
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7ff fb08 	bl	8005c5c <get_sequence_step_timeout>
 800664c:	4603      	mov	r3, r0
 800664e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8006652:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
			return Status;
 800665a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800665e:	e0b6      	b.n	80067ce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24a>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8006660:	7d3b      	ldrb	r3, [r7, #20]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00f      	beq.n	8006686 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x102>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8006666:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8006668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800666a:	4413      	add	r3, r2
 800666c:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800666e:	69fa      	ldr	r2, [r7, #28]
 8006670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006672:	429a      	cmp	r2, r3
 8006674:	d204      	bcs.n	8006680 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xfc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8006676:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	643b      	str	r3, [r7, #64]	; 0x40
 800667e:	e002      	b.n	8006686 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x102>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006680:	23fc      	movs	r3, #252	; 0xfc
 8006682:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8006686:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800668a:	2b00      	cmp	r3, #0
 800668c:	d015      	beq.n	80066ba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x136>
			LOG_FUNCTION_END(Status);
 800668e:	4b52      	ldr	r3, [pc, #328]	; (80067d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x254>)
 8006690:	681c      	ldr	r4, [r3, #0]
 8006692:	f001 f9c5 	bl	8007a20 <HAL_GetTick>
 8006696:	4603      	mov	r3, r0
 8006698:	461a      	mov	r2, r3
 800669a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800669e:	9302      	str	r3, [sp, #8]
 80066a0:	4b4e      	ldr	r3, [pc, #312]	; (80067dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x258>)
 80066a2:	9301      	str	r3, [sp, #4]
 80066a4:	9200      	str	r2, [sp, #0]
 80066a6:	4b4f      	ldr	r3, [pc, #316]	; (80067e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x260>)
 80066a8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80066ac:	4621      	mov	r1, r4
 80066ae:	2001      	movs	r0, #1
 80066b0:	f001 f908 	bl	80078c4 <trace_print_module_function>
			return Status;
 80066b4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80066b8:	e089      	b.n	80067ce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24a>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 80066ba:	7dbb      	ldrb	r3, [r7, #22]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d011      	beq.n	80066e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x160>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c4:	4413      	add	r3, r2
 80066c6:	005b      	lsls	r3, r3, #1
 80066c8:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80066ca:	69fa      	ldr	r2, [r7, #28]
 80066cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d204      	bcs.n	80066dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x158>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80066d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	643b      	str	r3, [r7, #64]	; 0x40
 80066da:	e016      	b.n	800670a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80066dc:	23fc      	movs	r3, #252	; 0xfc
 80066de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80066e2:	e012      	b.n	800670a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80066e4:	7d7b      	ldrb	r3, [r7, #21]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00f      	beq.n	800670a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066ee:	4413      	add	r3, r2
 80066f0:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80066f2:	69fa      	ldr	r2, [r7, #28]
 80066f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d204      	bcs.n	8006704 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x180>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80066fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	643b      	str	r3, [r7, #64]	; 0x40
 8006702:	e002      	b.n	800670a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006704:	23fc      	movs	r3, #252	; 0xfc
 8006706:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800670a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800670e:	2b00      	cmp	r3, #0
 8006710:	d015      	beq.n	800673e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1ba>
		LOG_FUNCTION_END(Status);
 8006712:	4b31      	ldr	r3, [pc, #196]	; (80067d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x254>)
 8006714:	681c      	ldr	r4, [r3, #0]
 8006716:	f001 f983 	bl	8007a20 <HAL_GetTick>
 800671a:	4603      	mov	r3, r0
 800671c:	461a      	mov	r2, r3
 800671e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006722:	9302      	str	r3, [sp, #8]
 8006724:	4b2d      	ldr	r3, [pc, #180]	; (80067dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x258>)
 8006726:	9301      	str	r3, [sp, #4]
 8006728:	9200      	str	r2, [sp, #0]
 800672a:	4b2e      	ldr	r3, [pc, #184]	; (80067e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x260>)
 800672c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006730:	4621      	mov	r1, r4
 8006732:	2001      	movs	r0, #1
 8006734:	f001 f8c6 	bl	80078c4 <trace_print_module_function>
		return Status;
 8006738:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800673c:	e047      	b.n	80067ce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24a>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800673e:	7dfb      	ldrb	r3, [r7, #23]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d019      	beq.n	8006778 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1f4>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8006744:	f107 030c 	add.w	r3, r7, #12
 8006748:	461a      	mov	r2, r3
 800674a:	2103      	movs	r1, #3
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff fa85 	bl	8005c5c <get_sequence_step_timeout>
 8006752:	4603      	mov	r3, r0
 8006754:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800675c:	4413      	add	r3, r2
 800675e:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006760:	69fa      	ldr	r2, [r7, #28]
 8006762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006764:	429a      	cmp	r2, r3
 8006766:	d204      	bcs.n	8006772 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1ee>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8006768:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	643b      	str	r3, [r7, #64]	; 0x40
 8006770:	e002      	b.n	8006778 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1f4>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006772:	23fc      	movs	r3, #252	; 0xfc
 8006774:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8006778:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800677c:	2b00      	cmp	r3, #0
 800677e:	d111      	bne.n	80067a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x220>
		SchedulerSequenceSteps.FinalRangeOn) {
 8006780:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00e      	beq.n	80067a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x220>

		FinalRangeTimingBudgetMicroSeconds -=
 8006786:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800678e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006790:	2104      	movs	r1, #4
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7ff fb43 	bl	8005e1e <set_sequence_step_timeout>
 8006798:	4603      	mov	r3, r0
 800679a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
 80067a4:	4b0c      	ldr	r3, [pc, #48]	; (80067d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x254>)
 80067a6:	681c      	ldr	r4, [r3, #0]
 80067a8:	f001 f93a 	bl	8007a20 <HAL_GetTick>
 80067ac:	4603      	mov	r3, r0
 80067ae:	461a      	mov	r2, r3
 80067b0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80067b4:	9302      	str	r3, [sp, #8]
 80067b6:	4b09      	ldr	r3, [pc, #36]	; (80067dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x258>)
 80067b8:	9301      	str	r3, [sp, #4]
 80067ba:	9200      	str	r2, [sp, #0]
 80067bc:	4b09      	ldr	r3, [pc, #36]	; (80067e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x260>)
 80067be:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80067c2:	4621      	mov	r1, r4
 80067c4:	2001      	movs	r0, #1
 80067c6:	f001 f87d 	bl	80078c4 <trace_print_module_function>

	return Status;
 80067ca:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	374c      	adds	r7, #76	; 0x4c
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd90      	pop	{r4, r7, pc}
 80067d6:	bf00      	nop
 80067d8:	200007c8 	.word	0x200007c8
 80067dc:	0800ca54 	.word	0x0800ca54
 80067e0:	0800c9a8 	.word	0x0800c9a8
 80067e4:	0800c9bc 	.word	0x0800c9bc

080067e8 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80067e8:	b590      	push	{r4, r7, lr}
 80067ea:	b095      	sub	sp, #84	; 0x54
 80067ec:	af04      	add	r7, sp, #16
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067f2:	2300      	movs	r3, #0
 80067f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80067f8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80067fc:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80067fe:	f240 7376 	movw	r3, #1910	; 0x776
 8006802:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8006804:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006808:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800680a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800680e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8006810:	f240 234e 	movw	r3, #590	; 0x24e
 8006814:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8006816:	f240 23b2 	movw	r3, #690	; 0x2b2
 800681a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800681c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006820:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8006822:	f240 2326 	movw	r3, #550	; 0x226
 8006826:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8006828:	2300      	movs	r3, #0
 800682a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");
 800682c:	4b62      	ldr	r3, [pc, #392]	; (80069b8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d0>)
 800682e:	681c      	ldr	r4, [r3, #0]
 8006830:	f001 f8f6 	bl	8007a20 <HAL_GetTick>
 8006834:	4603      	mov	r3, r0
 8006836:	461a      	mov	r2, r3
 8006838:	4b60      	ldr	r3, [pc, #384]	; (80069bc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d4>)
 800683a:	9301      	str	r3, [sp, #4]
 800683c:	9200      	str	r2, [sp, #0]
 800683e:	4b60      	ldr	r3, [pc, #384]	; (80069c0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d8>)
 8006840:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006844:	4621      	mov	r1, r4
 8006846:	2001      	movs	r0, #1
 8006848:	f001 f83c 	bl	80078c4 <trace_print_module_function>

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800684c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800684e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006850:	441a      	add	r2, r3
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006856:	f107 0318 	add.w	r3, r7, #24
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7fc f991 	bl	8002b84 <VL53L0X_GetSequenceStepEnables>
 8006862:	4603      	mov	r3, r0
 8006864:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8006868:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800686c:	2b00      	cmp	r3, #0
 800686e:	d015      	beq.n	800689c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb4>
		LOG_FUNCTION_END(Status);
 8006870:	4b51      	ldr	r3, [pc, #324]	; (80069b8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d0>)
 8006872:	681c      	ldr	r4, [r3, #0]
 8006874:	f001 f8d4 	bl	8007a20 <HAL_GetTick>
 8006878:	4603      	mov	r3, r0
 800687a:	461a      	mov	r2, r3
 800687c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006880:	9302      	str	r3, [sp, #8]
 8006882:	4b4e      	ldr	r3, [pc, #312]	; (80069bc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d4>)
 8006884:	9301      	str	r3, [sp, #4]
 8006886:	9200      	str	r2, [sp, #0]
 8006888:	4b4e      	ldr	r3, [pc, #312]	; (80069c4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1dc>)
 800688a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800688e:	4621      	mov	r1, r4
 8006890:	2001      	movs	r0, #1
 8006892:	f001 f817 	bl	80078c4 <trace_print_module_function>
		return Status;
 8006896:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800689a:	e088      	b.n	80069ae <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c6>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800689c:	7e3b      	ldrb	r3, [r7, #24]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d105      	bne.n	80068ae <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
		SchedulerSequenceSteps.MsrcOn ||
 80068a2:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d102      	bne.n	80068ae <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
		SchedulerSequenceSteps.DssOn) {
 80068a8:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d030      	beq.n	8006910 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>

		Status = get_sequence_step_timeout(Dev,
 80068ae:	f107 0310 	add.w	r3, r7, #16
 80068b2:	461a      	mov	r2, r3
 80068b4:	2102      	movs	r1, #2
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7ff f9d0 	bl	8005c5c <get_sequence_step_timeout>
 80068bc:	4603      	mov	r3, r0
 80068be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80068c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d122      	bne.n	8006910 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>
			if (SchedulerSequenceSteps.TccOn) {
 80068ca:	7e3b      	ldrb	r3, [r7, #24]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d007      	beq.n	80068e0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xf8>
				*pMeasurementTimingBudgetMicroSeconds +=
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80068d4:	6939      	ldr	r1, [r7, #16]
 80068d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d8:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80068da:	441a      	add	r2, r3
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80068e0:	7ebb      	ldrb	r3, [r7, #26]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d009      	beq.n	80068fa <VL53L0X_get_measurement_timing_budget_micro_seconds+0x112>
				*pMeasurementTimingBudgetMicroSeconds +=
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80068ea:	6939      	ldr	r1, [r7, #16]
 80068ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ee:	440b      	add	r3, r1
 80068f0:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80068f2:	441a      	add	r2, r3
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	e00a      	b.n	8006910 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80068fa:	7e7b      	ldrb	r3, [r7, #25]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d007      	beq.n	8006910 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8006904:	6939      	ldr	r1, [r7, #16]
 8006906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006908:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800690a:	441a      	add	r2, r3
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006910:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006914:	2b00      	cmp	r3, #0
 8006916:	d114      	bne.n	8006942 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8006918:	7efb      	ldrb	r3, [r7, #27]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d011      	beq.n	8006942 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
			Status = get_sequence_step_timeout(Dev,
 800691e:	f107 030c 	add.w	r3, r7, #12
 8006922:	461a      	mov	r2, r3
 8006924:	2103      	movs	r1, #3
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7ff f998 	bl	8005c5c <get_sequence_step_timeout>
 800692c:	4603      	mov	r3, r0
 800692e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8006936:	68f9      	ldr	r1, [r7, #12]
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800693c:	441a      	add	r2, r3
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006942:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006946:	2b00      	cmp	r3, #0
 8006948:	d114      	bne.n	8006974 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x18c>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800694a:	7f3b      	ldrb	r3, [r7, #28]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d011      	beq.n	8006974 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x18c>
			Status = get_sequence_step_timeout(Dev,
 8006950:	f107 0314 	add.w	r3, r7, #20
 8006954:	461a      	mov	r2, r3
 8006956:	2104      	movs	r1, #4
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7ff f97f 	bl	8005c5c <get_sequence_step_timeout>
 800695e:	4603      	mov	r3, r0
 8006960:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8006968:	6979      	ldr	r1, [r7, #20]
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800696e:	441a      	add	r2, r3
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006974:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006978:	2b00      	cmp	r3, #0
 800697a:	d103      	bne.n	8006984 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x19c>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
 8006984:	4b0c      	ldr	r3, [pc, #48]	; (80069b8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d0>)
 8006986:	681c      	ldr	r4, [r3, #0]
 8006988:	f001 f84a 	bl	8007a20 <HAL_GetTick>
 800698c:	4603      	mov	r3, r0
 800698e:	461a      	mov	r2, r3
 8006990:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006994:	9302      	str	r3, [sp, #8]
 8006996:	4b09      	ldr	r3, [pc, #36]	; (80069bc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d4>)
 8006998:	9301      	str	r3, [sp, #4]
 800699a:	9200      	str	r2, [sp, #0]
 800699c:	4b09      	ldr	r3, [pc, #36]	; (80069c4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1dc>)
 800699e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80069a2:	4621      	mov	r1, r4
 80069a4:	2001      	movs	r0, #1
 80069a6:	f000 ff8d 	bl	80078c4 <trace_print_module_function>
	return Status;
 80069aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3744      	adds	r7, #68	; 0x44
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd90      	pop	{r4, r7, pc}
 80069b6:	bf00      	nop
 80069b8:	200007c8 	.word	0x200007c8
 80069bc:	0800ca88 	.word	0x0800ca88
 80069c0:	0800c9a8 	.word	0x0800c9a8
 80069c4:	0800c9bc 	.word	0x0800c9bc

080069c8 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80069c8:	b590      	push	{r4, r7, lr}
 80069ca:	b08d      	sub	sp, #52	; 0x34
 80069cc:	af04      	add	r7, sp, #16
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069d2:	2300      	movs	r3, #0
 80069d4:	77fb      	strb	r3, [r7, #31]
	uint8_t NumberOfWrites;
	uint8_t Address;
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");
 80069d6:	4b7f      	ldr	r3, [pc, #508]	; (8006bd4 <VL53L0X_load_tuning_settings+0x20c>)
 80069d8:	681c      	ldr	r4, [r3, #0]
 80069da:	f001 f821 	bl	8007a20 <HAL_GetTick>
 80069de:	4603      	mov	r3, r0
 80069e0:	461a      	mov	r2, r3
 80069e2:	4b7d      	ldr	r3, [pc, #500]	; (8006bd8 <VL53L0X_load_tuning_settings+0x210>)
 80069e4:	9301      	str	r3, [sp, #4]
 80069e6:	9200      	str	r2, [sp, #0]
 80069e8:	4b7c      	ldr	r3, [pc, #496]	; (8006bdc <VL53L0X_load_tuning_settings+0x214>)
 80069ea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80069ee:	4621      	mov	r1, r4
 80069f0:	2001      	movs	r0, #1
 80069f2:	f000 ff67 	bl	80078c4 <trace_print_module_function>

	Index = 0;
 80069f6:	2300      	movs	r3, #0
 80069f8:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80069fa:	e0c6      	b.n	8006b8a <VL53L0X_load_tuning_settings+0x1c2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	4413      	add	r3, r2
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	74fb      	strb	r3, [r7, #19]
		Index++;
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8006a0c:	7cfb      	ldrb	r3, [r7, #19]
 8006a0e:	2bff      	cmp	r3, #255	; 0xff
 8006a10:	f040 808d 	bne.w	8006b2e <VL53L0X_load_tuning_settings+0x166>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	4413      	add	r3, r2
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	747b      	strb	r3, [r7, #17]
			Index++;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	3301      	adds	r3, #1
 8006a22:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8006a24:	7c7b      	ldrb	r3, [r7, #17]
 8006a26:	2b03      	cmp	r3, #3
 8006a28:	d87e      	bhi.n	8006b28 <VL53L0X_load_tuning_settings+0x160>
 8006a2a:	a201      	add	r2, pc, #4	; (adr r2, 8006a30 <VL53L0X_load_tuning_settings+0x68>)
 8006a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a30:	08006a41 	.word	0x08006a41
 8006a34:	08006a7b 	.word	0x08006a7b
 8006a38:	08006ab5 	.word	0x08006ab5
 8006a3c:	08006aef 	.word	0x08006aef
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	4413      	add	r3, r2
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	743b      	strb	r3, [r7, #16]
				Index++;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	4413      	add	r3, r2
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006a60:	7c3b      	ldrb	r3, [r7, #16]
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	021b      	lsls	r3, r3, #8
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	4413      	add	r3, r2
 8006a6e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	89ba      	ldrh	r2, [r7, #12]
 8006a74:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8006a78:	e087      	b.n	8006b8a <VL53L0X_load_tuning_settings+0x1c2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	4413      	add	r3, r2
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	743b      	strb	r3, [r7, #16]
				Index++;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	3301      	adds	r3, #1
 8006a88:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	4413      	add	r3, r2
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	3301      	adds	r3, #1
 8006a98:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006a9a:	7c3b      	ldrb	r3, [r7, #16]
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	021b      	lsls	r3, r3, #8
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	4413      	add	r3, r2
 8006aa8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	89ba      	ldrh	r2, [r7, #12]
 8006aae:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8006ab2:	e06a      	b.n	8006b8a <VL53L0X_load_tuning_settings+0x1c2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	4413      	add	r3, r2
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	743b      	strb	r3, [r7, #16]
				Index++;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	4413      	add	r3, r2
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006ad4:	7c3b      	ldrb	r3, [r7, #16]
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	021b      	lsls	r3, r3, #8
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	4413      	add	r3, r2
 8006ae2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	89ba      	ldrh	r2, [r7, #12]
 8006ae8:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8006aec:	e04d      	b.n	8006b8a <VL53L0X_load_tuning_settings+0x1c2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	4413      	add	r3, r2
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	743b      	strb	r3, [r7, #16]
				Index++;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	3301      	adds	r3, #1
 8006afc:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	4413      	add	r3, r2
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006b0e:	7c3b      	ldrb	r3, [r7, #16]
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	021b      	lsls	r3, r3, #8
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	4413      	add	r3, r2
 8006b1c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	89ba      	ldrh	r2, [r7, #12]
 8006b22:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8006b26:	e030      	b.n	8006b8a <VL53L0X_load_tuning_settings+0x1c2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006b28:	23fc      	movs	r3, #252	; 0xfc
 8006b2a:	77fb      	strb	r3, [r7, #31]
 8006b2c:	e02d      	b.n	8006b8a <VL53L0X_load_tuning_settings+0x1c2>
			}

		} else if (NumberOfWrites <= 4) {
 8006b2e:	7cfb      	ldrb	r3, [r7, #19]
 8006b30:	2b04      	cmp	r3, #4
 8006b32:	d828      	bhi.n	8006b86 <VL53L0X_load_tuning_settings+0x1be>
			Address = *(pTuningSettingBuffer + Index);
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	4413      	add	r3, r2
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	74bb      	strb	r3, [r7, #18]
			Index++;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	3301      	adds	r3, #1
 8006b42:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8006b44:	2300      	movs	r3, #0
 8006b46:	61bb      	str	r3, [r7, #24]
 8006b48:	e00f      	b.n	8006b6a <VL53L0X_load_tuning_settings+0x1a2>
				localBuffer[i] = *(pTuningSettingBuffer +
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	683a      	ldr	r2, [r7, #0]
 8006b4e:	4413      	add	r3, r2
 8006b50:	7819      	ldrb	r1, [r3, #0]
 8006b52:	f107 0208 	add.w	r2, r7, #8
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	4413      	add	r3, r2
 8006b5a:	460a      	mov	r2, r1
 8006b5c:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	3301      	adds	r3, #1
 8006b62:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	3301      	adds	r3, #1
 8006b68:	61bb      	str	r3, [r7, #24]
 8006b6a:	7cfb      	ldrb	r3, [r7, #19]
 8006b6c:	69ba      	ldr	r2, [r7, #24]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	dbeb      	blt.n	8006b4a <VL53L0X_load_tuning_settings+0x182>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8006b72:	7cfb      	ldrb	r3, [r7, #19]
 8006b74:	f107 0208 	add.w	r2, r7, #8
 8006b78:	7cb9      	ldrb	r1, [r7, #18]
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7fa fed6 	bl	800192c <VL53L0X_WriteMulti>
 8006b80:	4603      	mov	r3, r0
 8006b82:	77fb      	strb	r3, [r7, #31]
 8006b84:	e001      	b.n	8006b8a <VL53L0X_load_tuning_settings+0x1c2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006b86:	23fc      	movs	r3, #252	; 0xfc
 8006b88:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	4413      	add	r3, r2
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d004      	beq.n	8006ba0 <VL53L0X_load_tuning_settings+0x1d8>
 8006b96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f43f af2e 	beq.w	80069fc <VL53L0X_load_tuning_settings+0x34>
		}
	}

	LOG_FUNCTION_END(Status);
 8006ba0:	4b0c      	ldr	r3, [pc, #48]	; (8006bd4 <VL53L0X_load_tuning_settings+0x20c>)
 8006ba2:	681c      	ldr	r4, [r3, #0]
 8006ba4:	f000 ff3c 	bl	8007a20 <HAL_GetTick>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	461a      	mov	r2, r3
 8006bac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006bb0:	9302      	str	r3, [sp, #8]
 8006bb2:	4b09      	ldr	r3, [pc, #36]	; (8006bd8 <VL53L0X_load_tuning_settings+0x210>)
 8006bb4:	9301      	str	r3, [sp, #4]
 8006bb6:	9200      	str	r2, [sp, #0]
 8006bb8:	4b09      	ldr	r3, [pc, #36]	; (8006be0 <VL53L0X_load_tuning_settings+0x218>)
 8006bba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	2001      	movs	r0, #1
 8006bc2:	f000 fe7f 	bl	80078c4 <trace_print_module_function>
	return Status;
 8006bc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3724      	adds	r7, #36	; 0x24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd90      	pop	{r4, r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	200007c8 	.word	0x200007c8
 8006bd8:	0800cabc 	.word	0x0800cabc
 8006bdc:	0800c9a8 	.word	0x0800c9a8
 8006be0:	0800c9bc 	.word	0x0800c9bc

08006be4 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b088      	sub	sp, #32
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8006bfa:	f107 0313 	add.w	r3, r7, #19
 8006bfe:	4619      	mov	r1, r3
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f7fc f8a3 	bl	8002d4c <VL53L0X_GetXTalkCompensationEnable>
 8006c06:	4603      	mov	r3, r0
 8006c08:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8006c0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d111      	bne.n	8006c36 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8006c12:	7cfb      	ldrb	r3, [r7, #19]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00e      	beq.n	8006c36 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	8a9b      	ldrh	r3, [r3, #20]
 8006c22:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	fb02 f303 	mul.w	r3, r2, r3
 8006c2a:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	3380      	adds	r3, #128	; 0x80
 8006c30:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8006c36:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3720      	adds	r7, #32
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
	...

08006c44 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8006c44:	b590      	push	{r4, r7, lr}
 8006c46:	b089      	sub	sp, #36	; 0x24
 8006c48:	af02      	add	r7, sp, #8
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c50:	2300      	movs	r3, #0
 8006c52:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");
 8006c54:	4b16      	ldr	r3, [pc, #88]	; (8006cb0 <VL53L0X_get_total_signal_rate+0x6c>)
 8006c56:	681c      	ldr	r4, [r3, #0]
 8006c58:	f000 fee2 	bl	8007a20 <HAL_GetTick>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	461a      	mov	r2, r3
 8006c60:	4b14      	ldr	r3, [pc, #80]	; (8006cb4 <VL53L0X_get_total_signal_rate+0x70>)
 8006c62:	9301      	str	r3, [sp, #4]
 8006c64:	9200      	str	r2, [sp, #0]
 8006c66:	4b14      	ldr	r3, [pc, #80]	; (8006cb8 <VL53L0X_get_total_signal_rate+0x74>)
 8006c68:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006c6c:	4621      	mov	r1, r4
 8006c6e:	2001      	movs	r0, #1
 8006c70:	f000 fe28 	bl	80078c4 <trace_print_module_function>

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8006c7c:	f107 0310 	add.w	r3, r7, #16
 8006c80:	461a      	mov	r2, r3
 8006c82:	68b9      	ldr	r1, [r7, #8]
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f7ff ffad 	bl	8006be4 <VL53L0X_get_total_xtalk_rate>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8006c8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d105      	bne.n	8006ca2 <VL53L0X_get_total_signal_rate+0x5e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	441a      	add	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	601a      	str	r2, [r3, #0]

	return Status;
 8006ca2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	371c      	adds	r7, #28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd90      	pop	{r4, r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	200007c8 	.word	0x200007c8
 8006cb4:	0800cadc 	.word	0x0800cadc
 8006cb8:	0800c9a8 	.word	0x0800c9a8

08006cbc <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8006cbc:	b590      	push	{r4, r7, lr}
 8006cbe:	b09f      	sub	sp, #124	; 0x7c
 8006cc0:	af04      	add	r7, sp, #16
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
 8006cc8:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8006cca:	2312      	movs	r3, #18
 8006ccc:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8006cce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006cd2:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8006cd4:	2342      	movs	r3, #66	; 0x42
 8006cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8006cd8:	2306      	movs	r3, #6
 8006cda:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8006cdc:	2307      	movs	r3, #7
 8006cde:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");
 8006ce6:	4b94      	ldr	r3, [pc, #592]	; (8006f38 <VL53L0X_calc_dmax+0x27c>)
 8006ce8:	681c      	ldr	r4, [r3, #0]
 8006cea:	f000 fe99 	bl	8007a20 <HAL_GetTick>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	4b92      	ldr	r3, [pc, #584]	; (8006f3c <VL53L0X_calc_dmax+0x280>)
 8006cf4:	9301      	str	r3, [sp, #4]
 8006cf6:	9200      	str	r2, [sp, #0]
 8006cf8:	4b91      	ldr	r3, [pc, #580]	; (8006f40 <VL53L0X_calc_dmax+0x284>)
 8006cfa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006cfe:	4621      	mov	r1, r4
 8006d00:	2001      	movs	r0, #1
 8006d02:	f000 fddf 	bl	80078c4 <trace_print_module_function>

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8006d0c:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8006d14:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8006d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d1a:	fb02 f303 	mul.w	r3, r2, r3
 8006d1e:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8006d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d22:	3380      	adds	r3, #128	; 0x80
 8006d24:	0a1b      	lsrs	r3, r3, #8
 8006d26:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8006d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d2c:	fb02 f303 	mul.w	r3, r2, r3
 8006d30:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8006d32:	2300      	movs	r3, #0
 8006d34:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d01a      	beq.n	8006d72 <VL53L0X_calc_dmax+0xb6>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	029b      	lsls	r3, r3, #10
 8006d40:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8006d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d48:	4413      	add	r3, r2
 8006d4a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8006d4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d54:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8006d56:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006d58:	4613      	mov	r3, r2
 8006d5a:	005b      	lsls	r3, r3, #1
 8006d5c:	4413      	add	r3, r2
 8006d5e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8006d60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d62:	fb03 f303 	mul.w	r3, r3, r3
 8006d66:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8006d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d6a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006d6e:	0c1b      	lsrs	r3, r3, #16
 8006d70:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d76:	fb02 f303 	mul.w	r3, r2, r3
 8006d7a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8006d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006d82:	0c1b      	lsrs	r3, r3, #16
 8006d84:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8006d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d88:	fb03 f303 	mul.w	r3, r3, r3
 8006d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8006d8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d90:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006d94:	0c1b      	lsrs	r3, r3, #16
 8006d96:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8006d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d9a:	085a      	lsrs	r2, r3, #1
 8006d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9e:	441a      	add	r2, r3
 8006da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da6:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8006da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006daa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dac:	fb02 f303 	mul.w	r3, r2, r3
 8006db0:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8006db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006db8:	d302      	bcc.n	8006dc0 <VL53L0X_calc_dmax+0x104>
		minSignalNeeded_p3 = 0xfff00000;
 8006dba:	4b62      	ldr	r3, [pc, #392]	; (8006f44 <VL53L0X_calc_dmax+0x288>)
 8006dbc:	663b      	str	r3, [r7, #96]	; 0x60
 8006dbe:	e015      	b.n	8006dec <VL53L0X_calc_dmax+0x130>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8006dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dc2:	085a      	lsrs	r2, r3, #1
 8006dc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006dc6:	441a      	add	r2, r3
 8006dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dce:	67fb      	str	r3, [r7, #124]	; 0x7c
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8006dd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dd4:	fb02 f303 	mul.w	r3, r2, r3
 8006dd8:	67fb      	str	r3, [r7, #124]	; 0x7c

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8006dda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ddc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006de0:	0c1b      	lsrs	r3, r3, #16
 8006de2:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8006de4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006de6:	fb03 f303 	mul.w	r3, r3, r3
 8006dea:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8006dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dee:	039b      	lsls	r3, r3, #14
 8006df0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006df4:	4a54      	ldr	r2, [pc, #336]	; (8006f48 <VL53L0X_calc_dmax+0x28c>)
 8006df6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfa:	099b      	lsrs	r3, r3, #6
 8006dfc:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e00:	fb03 f303 	mul.w	r3, r3, r3
 8006e04:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8006e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e08:	fb03 f303 	mul.w	r3, r3, r3
 8006e0c:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	3308      	adds	r3, #8
 8006e12:	091b      	lsrs	r3, r3, #4
 8006e14:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8006e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e18:	6a3b      	ldr	r3, [r7, #32]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8006e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e20:	4613      	mov	r3, r2
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	4413      	add	r3, r2
 8006e26:	011b      	lsls	r3, r3, #4
 8006e28:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006e30:	0b9b      	lsrs	r3, r3, #14
 8006e32:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8006e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e38:	4413      	add	r3, r2
 8006e3a:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8006e3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e40:	085b      	lsrs	r3, r3, #1
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	4413      	add	r3, r2
 8006e46:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8006e48:	69ba      	ldr	r2, [r7, #24]
 8006e4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e52:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	039b      	lsls	r3, r3, #14
 8006e58:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	085b      	lsrs	r3, r3, #1
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	4413      	add	r3, r2
 8006e62:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8006e64:	69ba      	ldr	r2, [r7, #24]
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e6c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006e72:	fb02 f303 	mul.w	r3, r2, r3
 8006e76:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006e7e:	4a32      	ldr	r2, [pc, #200]	; (8006f48 <VL53L0X_calc_dmax+0x28c>)
 8006e80:	fba2 2303 	umull	r2, r3, r2, r3
 8006e84:	099b      	lsrs	r3, r3, #6
 8006e86:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	011b      	lsls	r3, r3, #4
 8006e8c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006e94:	4a2c      	ldr	r2, [pc, #176]	; (8006f48 <VL53L0X_calc_dmax+0x28c>)
 8006e96:	fba2 2303 	umull	r2, r3, r2, r3
 8006e9a:	099b      	lsrs	r3, r3, #6
 8006e9c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8006e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ea0:	3380      	adds	r3, #128	; 0x80
 8006ea2:	0a1b      	lsrs	r3, r3, #8
 8006ea4:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d008      	beq.n	8006ebe <VL53L0X_calc_dmax+0x202>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	085a      	lsrs	r2, r3, #1
 8006eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb2:	441a      	add	r2, r3
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eba:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ebc:	e001      	b.n	8006ec2 <VL53L0X_calc_dmax+0x206>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8006ec2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006ec4:	f7fe f84c 	bl	8004f60 <VL53L0X_isqrt>
 8006ec8:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d008      	beq.n	8006ee2 <VL53L0X_calc_dmax+0x226>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	085a      	lsrs	r2, r3, #1
 8006ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed6:	441a      	add	r2, r3
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ede:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ee0:	e001      	b.n	8006ee6 <VL53L0X_calc_dmax+0x22a>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8006ee6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006ee8:	f7fe f83a 	bl	8004f60 <VL53L0X_isqrt>
 8006eec:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8006eee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d903      	bls.n	8006f06 <VL53L0X_calc_dmax+0x24a>
		*pdmax_mm = dmaxAmbient;
 8006efe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f04:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
 8006f06:	4b0c      	ldr	r3, [pc, #48]	; (8006f38 <VL53L0X_calc_dmax+0x27c>)
 8006f08:	681c      	ldr	r4, [r3, #0]
 8006f0a:	f000 fd89 	bl	8007a20 <HAL_GetTick>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	461a      	mov	r2, r3
 8006f12:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 8006f16:	9302      	str	r3, [sp, #8]
 8006f18:	4b08      	ldr	r3, [pc, #32]	; (8006f3c <VL53L0X_calc_dmax+0x280>)
 8006f1a:	9301      	str	r3, [sp, #4]
 8006f1c:	9200      	str	r2, [sp, #0]
 8006f1e:	4b0b      	ldr	r3, [pc, #44]	; (8006f4c <VL53L0X_calc_dmax+0x290>)
 8006f20:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006f24:	4621      	mov	r1, r4
 8006f26:	2001      	movs	r0, #1
 8006f28:	f000 fccc 	bl	80078c4 <trace_print_module_function>

	return Status;
 8006f2c:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	376c      	adds	r7, #108	; 0x6c
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd90      	pop	{r4, r7, pc}
 8006f38:	200007c8 	.word	0x200007c8
 8006f3c:	0800cafc 	.word	0x0800cafc
 8006f40:	0800c9a8 	.word	0x0800c9a8
 8006f44:	fff00000 	.word	0xfff00000
 8006f48:	10624dd3 	.word	0x10624dd3
 8006f4c:	0800c9bc 	.word	0x0800c9bc

08006f50 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8006f50:	b590      	push	{r4, r7, lr}
 8006f52:	b0b5      	sub	sp, #212	; 0xd4
 8006f54:	af04      	add	r7, sp, #16
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
 8006f5c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8006f5e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006f62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8006f66:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006f6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8006f6e:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8006f72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8006f76:	f241 235c 	movw	r3, #4700	; 0x125c
 8006f7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8006f7e:	4baf      	ldr	r3, [pc, #700]	; (800723c <VL53L0X_calc_sigma_estimate+0x2ec>)
 8006f80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8006f84:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8006f88:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8006f8a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8006f8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f96:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8006f98:	4ba9      	ldr	r3, [pc, #676]	; (8007240 <VL53L0X_calc_sigma_estimate+0x2f0>)
 8006f9a:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8006f9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fa0:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8006fa2:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8006fa6:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8006fa8:	f240 6377 	movw	r3, #1655	; 0x677
 8006fac:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * @{
	 *
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");
 8006fb4:	4ba3      	ldr	r3, [pc, #652]	; (8007244 <VL53L0X_calc_sigma_estimate+0x2f4>)
 8006fb6:	681c      	ldr	r4, [r3, #0]
 8006fb8:	f000 fd32 	bl	8007a20 <HAL_GetTick>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	4ba1      	ldr	r3, [pc, #644]	; (8007248 <VL53L0X_calc_sigma_estimate+0x2f8>)
 8006fc2:	9301      	str	r3, [sp, #4]
 8006fc4:	9200      	str	r2, [sp, #0]
 8006fc6:	4ba1      	ldr	r3, [pc, #644]	; (800724c <VL53L0X_calc_sigma_estimate+0x2fc>)
 8006fc8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006fcc:	4621      	mov	r1, r4
 8006fce:	2001      	movs	r0, #1
 8006fd0:	f000 fc78 	bl	80078c4 <trace_print_module_function>

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6a1b      	ldr	r3, [r3, #32]
 8006fd8:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006fe2:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8006fe6:	0c1b      	lsrs	r3, r3, #16
 8006fe8:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8006ff0:	f107 0310 	add.w	r3, r7, #16
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	68b9      	ldr	r1, [r7, #8]
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f7ff fe23 	bl	8006c44 <VL53L0X_get_total_signal_rate>
 8006ffe:	4603      	mov	r3, r0
 8007000:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8007004:	f107 0314 	add.w	r3, r7, #20
 8007008:	461a      	mov	r2, r3
 800700a:	68b9      	ldr	r1, [r7, #8]
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f7ff fde9 	bl	8006be4 <VL53L0X_get_total_xtalk_rate>
 8007012:	4603      	mov	r3, r0
 8007014:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800701e:	fb02 f303 	mul.w	r3, r2, r3
 8007022:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8007024:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007026:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800702a:	0c1b      	lsrs	r3, r3, #16
 800702c:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007034:	fb02 f303 	mul.w	r3, r2, r3
 8007038:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800703c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007042:	429a      	cmp	r2, r3
 8007044:	d902      	bls.n	800704c <VL53L0X_calc_sigma_estimate+0xfc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8007046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007048:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800704c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007050:	2b00      	cmp	r3, #0
 8007052:	d168      	bne.n	8007126 <VL53L0X_calc_sigma_estimate+0x1d6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800705a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8007064:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007068:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800706c:	461a      	mov	r2, r3
 800706e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f7fe fd9e 	bl	8005bb4 <VL53L0X_calc_timeout_mclks>
 8007078:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007080:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800708a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800708e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007092:	461a      	mov	r2, r3
 8007094:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f7fe fd8b 	bl	8005bb4 <VL53L0X_calc_timeout_mclks>
 800709e:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 80070a0:	2303      	movs	r3, #3
 80070a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 80070a6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80070aa:	2b08      	cmp	r3, #8
 80070ac:	d102      	bne.n	80070b4 <VL53L0X_calc_sigma_estimate+0x164>
			vcselWidth = 2;
 80070ae:	2302      	movs	r3, #2
 80070b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80070b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070b8:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 80070ba:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80070be:	fb02 f303 	mul.w	r3, r2, r3
 80070c2:	02db      	lsls	r3, r3, #11
 80070c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80070c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80070cc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80070d0:	4a5f      	ldr	r2, [pc, #380]	; (8007250 <VL53L0X_calc_sigma_estimate+0x300>)
 80070d2:	fba2 2303 	umull	r2, r3, r2, r3
 80070d6:	099b      	lsrs	r3, r3, #6
 80070d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 80070dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80070e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070e2:	fb02 f303 	mul.w	r3, r2, r3
 80070e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80070ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80070ee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80070f2:	4a57      	ldr	r2, [pc, #348]	; (8007250 <VL53L0X_calc_sigma_estimate+0x300>)
 80070f4:	fba2 2303 	umull	r2, r3, r2, r3
 80070f8:	099b      	lsrs	r3, r3, #6
 80070fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	3380      	adds	r3, #128	; 0x80
 8007102:	0a1b      	lsrs	r3, r3, #8
 8007104:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800710c:	fb02 f303 	mul.w	r3, r2, r3
 8007110:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8007114:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007118:	3380      	adds	r3, #128	; 0x80
 800711a:	0a1b      	lsrs	r3, r3, #8
 800711c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	021b      	lsls	r3, r3, #8
 8007124:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8007126:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800712a:	2b00      	cmp	r3, #0
 800712c:	d015      	beq.n	800715a <VL53L0X_calc_sigma_estimate+0x20a>
		LOG_FUNCTION_END(Status);
 800712e:	4b45      	ldr	r3, [pc, #276]	; (8007244 <VL53L0X_calc_sigma_estimate+0x2f4>)
 8007130:	681c      	ldr	r4, [r3, #0]
 8007132:	f000 fc75 	bl	8007a20 <HAL_GetTick>
 8007136:	4603      	mov	r3, r0
 8007138:	461a      	mov	r2, r3
 800713a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800713e:	9302      	str	r3, [sp, #8]
 8007140:	4b41      	ldr	r3, [pc, #260]	; (8007248 <VL53L0X_calc_sigma_estimate+0x2f8>)
 8007142:	9301      	str	r3, [sp, #4]
 8007144:	9200      	str	r2, [sp, #0]
 8007146:	4b43      	ldr	r3, [pc, #268]	; (8007254 <VL53L0X_calc_sigma_estimate+0x304>)
 8007148:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800714c:	4621      	mov	r1, r4
 800714e:	2001      	movs	r0, #1
 8007150:	f000 fbb8 	bl	80078c4 <trace_print_module_function>
		return Status;
 8007154:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007158:	e178      	b.n	800744c <VL53L0X_calc_sigma_estimate+0x4fc>
	}

	if (peakSignalRate_kcps == 0) {
 800715a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10c      	bne.n	800717a <VL53L0X_calc_sigma_estimate+0x22a>
		*pSigmaEstimate = cSigmaEstMax;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007166:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800716e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2200      	movs	r2, #0
 8007176:	601a      	str	r2, [r3, #0]
 8007178:	e153      	b.n	8007422 <VL53L0X_calc_sigma_estimate+0x4d2>
	} else {
		if (vcselTotalEventsRtn < 1)
 800717a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800717e:	2b00      	cmp	r3, #0
 8007180:	d102      	bne.n	8007188 <VL53L0X_calc_sigma_estimate+0x238>
			vcselTotalEventsRtn = 1;
 8007182:	2301      	movs	r3, #1
 8007184:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8007188:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800718c:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800718e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007190:	041a      	lsls	r2, r3, #16
 8007192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007194:	fbb2 f3f3 	udiv	r3, r2, r3
 8007198:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800719c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80071a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d902      	bls.n	80071ac <VL53L0X_calc_sigma_estimate+0x25c>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 80071a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 80071ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071b0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80071b4:	fb02 f303 	mul.w	r3, r2, r3
 80071b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80071bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80071c0:	4613      	mov	r3, r2
 80071c2:	005b      	lsls	r3, r3, #1
 80071c4:	4413      	add	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7fd fec9 	bl	8004f60 <VL53L0X_isqrt>
 80071ce:	4603      	mov	r3, r0
 80071d0:	005b      	lsls	r3, r3, #1
 80071d2:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	891b      	ldrh	r3, [r3, #8]
 80071d8:	461a      	mov	r2, r3
 80071da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071dc:	fb02 f303 	mul.w	r3, r2, r3
 80071e0:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80071e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071e4:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 80071e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80071ea:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80071ec:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 80071ee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80071f2:	4a17      	ldr	r2, [pc, #92]	; (8007250 <VL53L0X_calc_sigma_estimate+0x300>)
 80071f4:	fba2 2303 	umull	r2, r3, r2, r3
 80071f8:	099b      	lsrs	r3, r3, #6
 80071fa:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 80071fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071fe:	041b      	lsls	r3, r3, #16
 8007200:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007204:	4a12      	ldr	r2, [pc, #72]	; (8007250 <VL53L0X_calc_sigma_estimate+0x300>)
 8007206:	fba2 2303 	umull	r2, r3, r2, r3
 800720a:	099b      	lsrs	r3, r3, #6
 800720c:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800720e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007210:	021b      	lsls	r3, r3, #8
 8007212:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8007214:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007218:	fbb2 f3f3 	udiv	r3, r2, r3
 800721c:	2b00      	cmp	r3, #0
 800721e:	bfb8      	it	lt
 8007220:	425b      	neglt	r3, r3
 8007222:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8007224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007226:	021b      	lsls	r3, r3, #8
 8007228:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	7e1b      	ldrb	r3, [r3, #24]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d012      	beq.n	8007258 <VL53L0X_calc_sigma_estimate+0x308>
			pwMult = 1 << 16;
 8007232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007236:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800723a:	e03a      	b.n	80072b2 <VL53L0X_calc_sigma_estimate+0x362>
 800723c:	028f87ae 	.word	0x028f87ae
 8007240:	0006999a 	.word	0x0006999a
 8007244:	200007c8 	.word	0x200007c8
 8007248:	0800cb10 	.word	0x0800cb10
 800724c:	0800c9a8 	.word	0x0800c9a8
 8007250:	10624dd3 	.word	0x10624dd3
 8007254:	0800c9bc 	.word	0x0800c9bc
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8007258:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800725a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800725e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007262:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8007266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007268:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800726c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007270:	fb02 f303 	mul.w	r3, r2, r3
 8007274:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8007278:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800727c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800727e:	4413      	add	r3, r2
 8007280:	0c1b      	lsrs	r3, r3, #16
 8007282:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8007286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800728a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800728e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8007292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007296:	085b      	lsrs	r3, r3, #1
 8007298:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800729c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072a0:	fb03 f303 	mul.w	r3, r3, r3
 80072a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 80072a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072ac:	0b9b      	lsrs	r3, r3, #14
 80072ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 80072b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072b8:	fb02 f303 	mul.w	r3, r2, r3
 80072bc:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 80072be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80072c4:	0c1b      	lsrs	r3, r3, #16
 80072c6:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 80072c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ca:	fb03 f303 	mul.w	r3, r3, r3
 80072ce:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 80072d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072d4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 80072d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80072dc:	0c1b      	lsrs	r3, r3, #16
 80072de:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80072e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e2:	fb03 f303 	mul.w	r3, r3, r3
 80072e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80072e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ec:	4413      	add	r3, r2
 80072ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80072f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072f2:	f7fd fe35 	bl	8004f60 <VL53L0X_isqrt>
 80072f6:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 80072f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fa:	041b      	lsls	r3, r3, #16
 80072fc:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	3332      	adds	r3, #50	; 0x32
 8007302:	4a54      	ldr	r2, [pc, #336]	; (8007454 <VL53L0X_calc_sigma_estimate+0x504>)
 8007304:	fba2 2303 	umull	r2, r3, r2, r3
 8007308:	095a      	lsrs	r2, r3, #5
 800730a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800730c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007310:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8007314:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007318:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800731c:	fb02 f303 	mul.w	r3, r2, r3
 8007320:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8007324:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007328:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800732c:	3308      	adds	r3, #8
 800732e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8007332:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007336:	4a48      	ldr	r2, [pc, #288]	; (8007458 <VL53L0X_calc_sigma_estimate+0x508>)
 8007338:	fba2 2303 	umull	r2, r3, r2, r3
 800733c:	0b5b      	lsrs	r3, r3, #13
 800733e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8007342:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007346:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007348:	429a      	cmp	r2, r3
 800734a:	d902      	bls.n	8007352 <VL53L0X_calc_sigma_estimate+0x402>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800734c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800734e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8007352:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007356:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800735a:	4413      	add	r3, r2
 800735c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8007360:	4a3e      	ldr	r2, [pc, #248]	; (800745c <VL53L0X_calc_sigma_estimate+0x50c>)
 8007362:	fba2 2303 	umull	r2, r3, r2, r3
 8007366:	099b      	lsrs	r3, r3, #6
 8007368:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800736a:	6a3b      	ldr	r3, [r7, #32]
 800736c:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800736e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007372:	441a      	add	r2, r3
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	fbb2 f3f3 	udiv	r3, r2, r3
 800737a:	4618      	mov	r0, r3
 800737c:	f7fd fdf0 	bl	8004f60 <VL53L0X_isqrt>
 8007380:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	021b      	lsls	r3, r3, #8
 8007386:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800738e:	4a33      	ldr	r2, [pc, #204]	; (800745c <VL53L0X_calc_sigma_estimate+0x50c>)
 8007390:	fba2 2303 	umull	r2, r3, r2, r3
 8007394:	099b      	lsrs	r3, r3, #6
 8007396:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8007398:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800739c:	fb03 f303 	mul.w	r3, r3, r3
 80073a0:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	fb03 f303 	mul.w	r3, r3, r3
 80073a8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 80073aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ae:	4413      	add	r3, r2
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7fd fdd5 	bl	8004f60 <VL53L0X_isqrt>
 80073b6:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073be:	fb02 f303 	mul.w	r3, r2, r3
 80073c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 80073c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d009      	beq.n	80073e0 <VL53L0X_calc_sigma_estimate+0x490>
 80073cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d005      	beq.n	80073e0 <VL53L0X_calc_sigma_estimate+0x490>
 80073d4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80073d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073dc:	429a      	cmp	r2, r3
 80073de:	d903      	bls.n	80073e8 <VL53L0X_calc_sigma_estimate+0x498>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 80073e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80073ee:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 80073fa:	6939      	ldr	r1, [r7, #16]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	9303      	str	r3, [sp, #12]
 8007400:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007404:	9302      	str	r3, [sp, #8]
 8007406:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800740a:	9301      	str	r3, [sp, #4]
 800740c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007414:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f7ff fc50 	bl	8006cbc <VL53L0X_calc_dmax>
 800741c:	4603      	mov	r3, r0
 800741e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			sigmaEstimateP2,
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
 8007422:	4b0f      	ldr	r3, [pc, #60]	; (8007460 <VL53L0X_calc_sigma_estimate+0x510>)
 8007424:	681c      	ldr	r4, [r3, #0]
 8007426:	f000 fafb 	bl	8007a20 <HAL_GetTick>
 800742a:	4603      	mov	r3, r0
 800742c:	461a      	mov	r2, r3
 800742e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007432:	9302      	str	r3, [sp, #8]
 8007434:	4b0b      	ldr	r3, [pc, #44]	; (8007464 <VL53L0X_calc_sigma_estimate+0x514>)
 8007436:	9301      	str	r3, [sp, #4]
 8007438:	9200      	str	r2, [sp, #0]
 800743a:	4b0b      	ldr	r3, [pc, #44]	; (8007468 <VL53L0X_calc_sigma_estimate+0x518>)
 800743c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007440:	4621      	mov	r1, r4
 8007442:	2001      	movs	r0, #1
 8007444:	f000 fa3e 	bl	80078c4 <trace_print_module_function>
	return Status;
 8007448:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800744c:	4618      	mov	r0, r3
 800744e:	37c4      	adds	r7, #196	; 0xc4
 8007450:	46bd      	mov	sp, r7
 8007452:	bd90      	pop	{r4, r7, pc}
 8007454:	51eb851f 	.word	0x51eb851f
 8007458:	d1b71759 	.word	0xd1b71759
 800745c:	10624dd3 	.word	0x10624dd3
 8007460:	200007c8 	.word	0x200007c8
 8007464:	0800cb10 	.word	0x0800cb10
 8007468:	0800c9bc 	.word	0x0800c9bc

0800746c <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800746c:	b590      	push	{r4, r7, lr}
 800746e:	b095      	sub	sp, #84	; 0x54
 8007470:	af04      	add	r7, sp, #16
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	607a      	str	r2, [r7, #4]
 8007476:	461a      	mov	r2, r3
 8007478:	460b      	mov	r3, r1
 800747a:	72fb      	strb	r3, [r7, #11]
 800747c:	4613      	mov	r3, r2
 800747e:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007480:	2300      	movs	r3, #0
 8007482:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8007486:	2300      	movs	r3, #0
 8007488:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800748c:	2300      	movs	r3, #0
 800748e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8007492:	2300      	movs	r3, #0
 8007494:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8007498:	2300      	movs	r3, #0
 800749a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800749e:	2300      	movs	r3, #0
 80074a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 80074a4:	2300      	movs	r3, #0
 80074a6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 80074aa:	2300      	movs	r3, #0
 80074ac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 80074b0:	2300      	movs	r3, #0
 80074b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 80074b6:	2300      	movs	r3, #0
 80074b8:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 80074ba:	2300      	movs	r3, #0
 80074bc:	613b      	str	r3, [r7, #16]
	FixPoint1616_t LastSignalRefMcps;

	LOG_FUNCTION_START("");
 80074be:	4bc6      	ldr	r3, [pc, #792]	; (80077d8 <VL53L0X_get_pal_range_status+0x36c>)
 80074c0:	681c      	ldr	r4, [r3, #0]
 80074c2:	f000 faad 	bl	8007a20 <HAL_GetTick>
 80074c6:	4603      	mov	r3, r0
 80074c8:	461a      	mov	r2, r3
 80074ca:	4bc4      	ldr	r3, [pc, #784]	; (80077dc <VL53L0X_get_pal_range_status+0x370>)
 80074cc:	9301      	str	r3, [sp, #4]
 80074ce:	9200      	str	r2, [sp, #0]
 80074d0:	4bc3      	ldr	r3, [pc, #780]	; (80077e0 <VL53L0X_get_pal_range_status+0x374>)
 80074d2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80074d6:	4621      	mov	r1, r4
 80074d8:	2001      	movs	r0, #1
 80074da:	f000 f9f3 	bl	80078c4 <trace_print_module_function>
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 80074de:	7afb      	ldrb	r3, [r7, #11]
 80074e0:	10db      	asrs	r3, r3, #3
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	f003 030f 	and.w	r3, r3, #15
 80074e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 80074ec:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d017      	beq.n	8007524 <VL53L0X_get_pal_range_status+0xb8>
 80074f4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80074f8:	2b05      	cmp	r3, #5
 80074fa:	d013      	beq.n	8007524 <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 5 ||
 80074fc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007500:	2b07      	cmp	r3, #7
 8007502:	d00f      	beq.n	8007524 <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 7 ||
 8007504:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007508:	2b0c      	cmp	r3, #12
 800750a:	d00b      	beq.n	8007524 <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 12 ||
 800750c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007510:	2b0d      	cmp	r3, #13
 8007512:	d007      	beq.n	8007524 <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 13 ||
 8007514:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007518:	2b0e      	cmp	r3, #14
 800751a:	d003      	beq.n	8007524 <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 14 ||
 800751c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007520:	2b0f      	cmp	r3, #15
 8007522:	d103      	bne.n	800752c <VL53L0X_get_pal_range_status+0xc0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8007524:	2301      	movs	r3, #1
 8007526:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800752a:	e002      	b.n	8007532 <VL53L0X_get_pal_range_status+0xc6>
	} else {
		NoneFlag = 0;
 800752c:	2300      	movs	r3, #0
 800752e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007532:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007536:	2b00      	cmp	r3, #0
 8007538:	d109      	bne.n	800754e <VL53L0X_get_pal_range_status+0xe2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800753a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800753e:	461a      	mov	r2, r3
 8007540:	2100      	movs	r1, #0
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f7fb fd56 	bl	8002ff4 <VL53L0X_GetLimitCheckEnable>
 8007548:	4603      	mov	r3, r0
 800754a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800754e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007552:	2b00      	cmp	r3, #0
 8007554:	d02e      	beq.n	80075b4 <VL53L0X_get_pal_range_status+0x148>
 8007556:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800755a:	2b00      	cmp	r3, #0
 800755c:	d12a      	bne.n	80075b4 <VL53L0X_get_pal_range_status+0x148>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800755e:	f107 0310 	add.w	r3, r7, #16
 8007562:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007566:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f7ff fcf1 	bl	8006f50 <VL53L0X_calc_sigma_estimate>
 800756e:	4603      	mov	r3, r0
 8007570:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8007574:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007578:	2b00      	cmp	r3, #0
 800757a:	d103      	bne.n	8007584 <VL53L0X_get_pal_range_status+0x118>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	b29a      	uxth	r2, r3
 8007580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007582:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8007584:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007588:	2b00      	cmp	r3, #0
 800758a:	d113      	bne.n	80075b4 <VL53L0X_get_pal_range_status+0x148>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800758c:	f107 0320 	add.w	r3, r7, #32
 8007590:	461a      	mov	r2, r3
 8007592:	2100      	movs	r1, #0
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f7fb fe05 	bl	80031a4 <VL53L0X_GetLimitCheckValue>
 800759a:	4603      	mov	r3, r0
 800759c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d006      	beq.n	80075b4 <VL53L0X_get_pal_range_status+0x148>
				(SigmaEstimate > SigmaLimitValue))
 80075a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075a8:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d902      	bls.n	80075b4 <VL53L0X_get_pal_range_status+0x148>
					/* Limit Fail */
					SigmaLimitflag = 1;
 80075ae:	2301      	movs	r3, #1
 80075b0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80075b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d109      	bne.n	80075d0 <VL53L0X_get_pal_range_status+0x164>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80075bc:	f107 0329 	add.w	r3, r7, #41	; 0x29
 80075c0:	461a      	mov	r2, r3
 80075c2:	2102      	movs	r1, #2
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f7fb fd15 	bl	8002ff4 <VL53L0X_GetLimitCheckEnable>
 80075ca:	4603      	mov	r3, r0
 80075cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 80075d0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d044      	beq.n	8007662 <VL53L0X_get_pal_range_status+0x1f6>
 80075d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d140      	bne.n	8007662 <VL53L0X_get_pal_range_status+0x1f6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80075e0:	f107 031c 	add.w	r3, r7, #28
 80075e4:	461a      	mov	r2, r3
 80075e6:	2102      	movs	r1, #2
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f7fb fddb 	bl	80031a4 <VL53L0X_GetLimitCheckValue>
 80075ee:	4603      	mov	r3, r0
 80075f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 80075f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d107      	bne.n	800760c <VL53L0X_get_pal_range_status+0x1a0>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80075fc:	2201      	movs	r2, #1
 80075fe:	21ff      	movs	r1, #255	; 0xff
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f7fa f9ef 	bl	80019e4 <VL53L0X_WrByte>
 8007606:	4603      	mov	r3, r0
 8007608:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800760c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007610:	2b00      	cmp	r3, #0
 8007612:	d109      	bne.n	8007628 <VL53L0X_get_pal_range_status+0x1bc>
			Status = VL53L0X_RdWord(Dev,
 8007614:	f107 0316 	add.w	r3, r7, #22
 8007618:	461a      	mov	r2, r3
 800761a:	21b6      	movs	r1, #182	; 0xb6
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f7fa fa8d 	bl	8001b3c <VL53L0X_RdWord>
 8007622:	4603      	mov	r3, r0
 8007624:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8007628:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800762c:	2b00      	cmp	r3, #0
 800762e:	d107      	bne.n	8007640 <VL53L0X_get_pal_range_status+0x1d4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007630:	2200      	movs	r2, #0
 8007632:	21ff      	movs	r1, #255	; 0xff
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f7fa f9d5 	bl	80019e4 <VL53L0X_WrByte>
 800763a:	4603      	mov	r3, r0
 800763c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8007640:	8afb      	ldrh	r3, [r7, #22]
 8007642:	025b      	lsls	r3, r3, #9
 8007644:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800764a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d006      	beq.n	8007662 <VL53L0X_get_pal_range_status+0x1f6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8007654:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8007656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007658:	429a      	cmp	r2, r3
 800765a:	d902      	bls.n	8007662 <VL53L0X_get_pal_range_status+0x1f6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800765c:	2301      	movs	r3, #1
 800765e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007662:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007666:	2b00      	cmp	r3, #0
 8007668:	d109      	bne.n	800767e <VL53L0X_get_pal_range_status+0x212>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800766a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800766e:	461a      	mov	r2, r3
 8007670:	2103      	movs	r1, #3
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f7fb fcbe 	bl	8002ff4 <VL53L0X_GetLimitCheckEnable>
 8007678:	4603      	mov	r3, r0
 800767a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800767e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007682:	2b00      	cmp	r3, #0
 8007684:	d023      	beq.n	80076ce <VL53L0X_get_pal_range_status+0x262>
 8007686:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800768a:	2b00      	cmp	r3, #0
 800768c:	d11f      	bne.n	80076ce <VL53L0X_get_pal_range_status+0x262>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800768e:	893b      	ldrh	r3, [r7, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d102      	bne.n	800769a <VL53L0X_get_pal_range_status+0x22e>
			SignalRatePerSpad = 0;
 8007694:	2300      	movs	r3, #0
 8007696:	637b      	str	r3, [r7, #52]	; 0x34
 8007698:	e005      	b.n	80076a6 <VL53L0X_get_pal_range_status+0x23a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	021a      	lsls	r2, r3, #8
 800769e:	893b      	ldrh	r3, [r7, #8]
 80076a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a4:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80076a6:	f107 0318 	add.w	r3, r7, #24
 80076aa:	461a      	mov	r2, r3
 80076ac:	2103      	movs	r1, #3
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f7fb fd78 	bl	80031a4 <VL53L0X_GetLimitCheckValue>
 80076b4:	4603      	mov	r3, r0
 80076b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d006      	beq.n	80076ce <VL53L0X_get_pal_range_status+0x262>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 80076c0:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 80076c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d202      	bcs.n	80076ce <VL53L0X_get_pal_range_status+0x262>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 80076c8:	2301      	movs	r3, #1
 80076ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80076ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d14a      	bne.n	800776c <VL53L0X_get_pal_range_status+0x300>
		if (NoneFlag == 1) {
 80076d6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d103      	bne.n	80076e6 <VL53L0X_get_pal_range_status+0x27a>
			*pPalRangeStatus = 255;	 /* NONE */
 80076de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076e0:	22ff      	movs	r2, #255	; 0xff
 80076e2:	701a      	strb	r2, [r3, #0]
 80076e4:	e042      	b.n	800776c <VL53L0X_get_pal_range_status+0x300>
		} else if (DeviceRangeStatusInternal == 1 ||
 80076e6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d007      	beq.n	80076fe <VL53L0X_get_pal_range_status+0x292>
 80076ee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d003      	beq.n	80076fe <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 2 ||
 80076f6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80076fa:	2b03      	cmp	r3, #3
 80076fc:	d103      	bne.n	8007706 <VL53L0X_get_pal_range_status+0x29a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 80076fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007700:	2205      	movs	r2, #5
 8007702:	701a      	strb	r2, [r3, #0]
 8007704:	e032      	b.n	800776c <VL53L0X_get_pal_range_status+0x300>
		} else if (DeviceRangeStatusInternal == 6 ||
 8007706:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800770a:	2b06      	cmp	r3, #6
 800770c:	d003      	beq.n	8007716 <VL53L0X_get_pal_range_status+0x2aa>
 800770e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007712:	2b09      	cmp	r3, #9
 8007714:	d103      	bne.n	800771e <VL53L0X_get_pal_range_status+0x2b2>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8007716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007718:	2204      	movs	r2, #4
 800771a:	701a      	strb	r2, [r3, #0]
 800771c:	e026      	b.n	800776c <VL53L0X_get_pal_range_status+0x300>
		} else if (DeviceRangeStatusInternal == 8 ||
 800771e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007722:	2b08      	cmp	r3, #8
 8007724:	d007      	beq.n	8007736 <VL53L0X_get_pal_range_status+0x2ca>
 8007726:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800772a:	2b0a      	cmp	r3, #10
 800772c:	d003      	beq.n	8007736 <VL53L0X_get_pal_range_status+0x2ca>
					DeviceRangeStatusInternal == 10 ||
 800772e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007732:	2b01      	cmp	r3, #1
 8007734:	d103      	bne.n	800773e <VL53L0X_get_pal_range_status+0x2d2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8007736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007738:	2203      	movs	r2, #3
 800773a:	701a      	strb	r2, [r3, #0]
 800773c:	e016      	b.n	800776c <VL53L0X_get_pal_range_status+0x300>
		} else if (DeviceRangeStatusInternal == 4 ||
 800773e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007742:	2b04      	cmp	r3, #4
 8007744:	d003      	beq.n	800774e <VL53L0X_get_pal_range_status+0x2e2>
 8007746:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800774a:	2b01      	cmp	r3, #1
 800774c:	d103      	bne.n	8007756 <VL53L0X_get_pal_range_status+0x2ea>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800774e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007750:	2202      	movs	r2, #2
 8007752:	701a      	strb	r2, [r3, #0]
 8007754:	e00a      	b.n	800776c <VL53L0X_get_pal_range_status+0x300>
		} else if (SigmaLimitflag == 1) {
 8007756:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800775a:	2b01      	cmp	r3, #1
 800775c:	d103      	bne.n	8007766 <VL53L0X_get_pal_range_status+0x2fa>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800775e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007760:	2201      	movs	r2, #1
 8007762:	701a      	strb	r2, [r3, #0]
 8007764:	e002      	b.n	800776c <VL53L0X_get_pal_range_status+0x300>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8007766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007768:	2200      	movs	r2, #0
 800776a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800776c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d102      	bne.n	800777a <VL53L0X_get_pal_range_status+0x30e>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8007774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007776:	2200      	movs	r2, #0
 8007778:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800777a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800777e:	461a      	mov	r2, r3
 8007780:	2101      	movs	r1, #1
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f7fb fc36 	bl	8002ff4 <VL53L0X_GetLimitCheckEnable>
 8007788:	4603      	mov	r3, r0
 800778a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800778e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007792:	2b00      	cmp	r3, #0
 8007794:	d156      	bne.n	8007844 <VL53L0X_get_pal_range_status+0x3d8>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8007796:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <VL53L0X_get_pal_range_status+0x33a>
 800779e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d103      	bne.n	80077ae <VL53L0X_get_pal_range_status+0x342>
			Temp8 = 1;
 80077a6:	2301      	movs	r3, #1
 80077a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ac:	e002      	b.n	80077b4 <VL53L0X_get_pal_range_status+0x348>
		else
			Temp8 = 0;
 80077ae:	2300      	movs	r3, #0
 80077b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80077ba:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 80077be:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80077c2:	2b04      	cmp	r3, #4
 80077c4:	d003      	beq.n	80077ce <VL53L0X_get_pal_range_status+0x362>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 80077c6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10a      	bne.n	80077e4 <VL53L0X_get_pal_range_status+0x378>
			Temp8 = 1;
 80077ce:	2301      	movs	r3, #1
 80077d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077d4:	e009      	b.n	80077ea <VL53L0X_get_pal_range_status+0x37e>
 80077d6:	bf00      	nop
 80077d8:	200007c8 	.word	0x200007c8
 80077dc:	0800cb2c 	.word	0x0800cb2c
 80077e0:	0800c9a8 	.word	0x0800c9a8
		else
			Temp8 = 0;
 80077e4:	2300      	movs	r3, #0
 80077e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80077f0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 80077f4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d003      	beq.n	8007804 <VL53L0X_get_pal_range_status+0x398>
 80077fc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007800:	2b01      	cmp	r3, #1
 8007802:	d103      	bne.n	800780c <VL53L0X_get_pal_range_status+0x3a0>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8007804:	2301      	movs	r3, #1
 8007806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800780a:	e002      	b.n	8007812 <VL53L0X_get_pal_range_status+0x3a6>
		else
			Temp8 = 0;
 800780c:	2300      	movs	r3, #0
 800780e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007818:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800781c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007820:	2b00      	cmp	r3, #0
 8007822:	d003      	beq.n	800782c <VL53L0X_get_pal_range_status+0x3c0>
 8007824:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007828:	2b01      	cmp	r3, #1
 800782a:	d103      	bne.n	8007834 <VL53L0X_get_pal_range_status+0x3c8>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800782c:	2301      	movs	r3, #1
 800782e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007832:	e002      	b.n	800783a <VL53L0X_get_pal_range_status+0x3ce>
		else
			Temp8 = 0;
 8007834:	2300      	movs	r3, #0
 8007836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007840:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
 8007844:	4b0c      	ldr	r3, [pc, #48]	; (8007878 <VL53L0X_get_pal_range_status+0x40c>)
 8007846:	681c      	ldr	r4, [r3, #0]
 8007848:	f000 f8ea 	bl	8007a20 <HAL_GetTick>
 800784c:	4603      	mov	r3, r0
 800784e:	461a      	mov	r2, r3
 8007850:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007854:	9302      	str	r3, [sp, #8]
 8007856:	4b09      	ldr	r3, [pc, #36]	; (800787c <VL53L0X_get_pal_range_status+0x410>)
 8007858:	9301      	str	r3, [sp, #4]
 800785a:	9200      	str	r2, [sp, #0]
 800785c:	4b08      	ldr	r3, [pc, #32]	; (8007880 <VL53L0X_get_pal_range_status+0x414>)
 800785e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007862:	4621      	mov	r1, r4
 8007864:	2001      	movs	r0, #1
 8007866:	f000 f82d 	bl	80078c4 <trace_print_module_function>
	return Status;
 800786a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800786e:	4618      	mov	r0, r3
 8007870:	3744      	adds	r7, #68	; 0x44
 8007872:	46bd      	mov	sp, r7
 8007874:	bd90      	pop	{r4, r7, pc}
 8007876:	bf00      	nop
 8007878:	200007c8 	.word	0x200007c8
 800787c:	0800cb2c 	.word	0x0800cb2c
 8007880:	0800c9bc 	.word	0x0800c9bc

08007884 <VL53L0X_trace_config>:
uint32_t _trace_modules = TRACE_MODULE_NONE;
uint32_t _trace_functions = TRACE_FUNCTION_NONE;

#if defined(VL53L0X_LOG_ENABLE) && (TRACE_UART==1)
int32_t VL53L0X_trace_config(char *filename, uint32_t modules, uint32_t level, uint32_t functions)
{
 8007884:	b480      	push	{r7}
 8007886:	b087      	sub	sp, #28
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
 8007890:	603b      	str	r3, [r7, #0]
    int STATUS = 0;
 8007892:	2300      	movs	r3, #0
 8007894:	617b      	str	r3, [r7, #20]

    _trace_functions = functions;
 8007896:	4a08      	ldr	r2, [pc, #32]	; (80078b8 <VL53L0X_trace_config+0x34>)
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	6013      	str	r3, [r2, #0]
    _trace_level = level;
 800789c:	4a07      	ldr	r2, [pc, #28]	; (80078bc <VL53L0X_trace_config+0x38>)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6013      	str	r3, [r2, #0]
    _trace_modules = modules;
 80078a2:	4a07      	ldr	r2, [pc, #28]	; (80078c0 <VL53L0X_trace_config+0x3c>)
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	6013      	str	r3, [r2, #0]

    return STATUS;
 80078a8:	697b      	ldr	r3, [r7, #20]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	371c      	adds	r7, #28
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	20000964 	.word	0x20000964
 80078bc:	200007c8 	.word	0x200007c8
 80078c0:	20000960 	.word	0x20000960

080078c4 <trace_print_module_function>:


void trace_print_module_function(uint32_t module, uint32_t level, uint32_t function, const char *format, ...)
{
 80078c4:	b408      	push	{r3}
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b087      	sub	sp, #28
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	60f8      	str	r0, [r7, #12]
 80078ce:	60b9      	str	r1, [r7, #8]
 80078d0:	607a      	str	r2, [r7, #4]
    if ( ((level <=_trace_level) && ((module & _trace_modules) > 0))
 80078d2:	4b0f      	ldr	r3, [pc, #60]	; (8007910 <trace_print_module_function+0x4c>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d805      	bhi.n	80078e8 <trace_print_module_function+0x24>
 80078dc:	4b0d      	ldr	r3, [pc, #52]	; (8007914 <trace_print_module_function+0x50>)
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	4013      	ands	r3, r2
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d105      	bne.n	80078f4 <trace_print_module_function+0x30>
        || ((function & _trace_functions) > 0) )
 80078e8:	4b0b      	ldr	r3, [pc, #44]	; (8007918 <trace_print_module_function+0x54>)
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4013      	ands	r3, r2
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d006      	beq.n	8007902 <trace_print_module_function+0x3e>
    {
    	va_list arg_list;
        va_start(arg_list, format);
 80078f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078f8:	617b      	str	r3, [r7, #20]
        trace_vprintf( format, arg_list);
 80078fa:	6979      	ldr	r1, [r7, #20]
 80078fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078fe:	f7f9 fe6f 	bl	80015e0 <uart_vprintf>
        va_end(arg_list);
    }
}
 8007902:	bf00      	nop
 8007904:	371c      	adds	r7, #28
 8007906:	46bd      	mov	sp, r7
 8007908:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800790c:	b001      	add	sp, #4
 800790e:	4770      	bx	lr
 8007910:	200007c8 	.word	0x200007c8
 8007914:	20000960 	.word	0x20000960
 8007918:	20000964 	.word	0x20000964

0800791c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800791c:	b480      	push	{r7}
 800791e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007920:	4b16      	ldr	r3, [pc, #88]	; (800797c <SystemInit+0x60>)
 8007922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007926:	4a15      	ldr	r2, [pc, #84]	; (800797c <SystemInit+0x60>)
 8007928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800792c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007930:	4b13      	ldr	r3, [pc, #76]	; (8007980 <SystemInit+0x64>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a12      	ldr	r2, [pc, #72]	; (8007980 <SystemInit+0x64>)
 8007936:	f043 0301 	orr.w	r3, r3, #1
 800793a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800793c:	4b10      	ldr	r3, [pc, #64]	; (8007980 <SystemInit+0x64>)
 800793e:	2200      	movs	r2, #0
 8007940:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007942:	4b0f      	ldr	r3, [pc, #60]	; (8007980 <SystemInit+0x64>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a0e      	ldr	r2, [pc, #56]	; (8007980 <SystemInit+0x64>)
 8007948:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800794c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007950:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007952:	4b0b      	ldr	r3, [pc, #44]	; (8007980 <SystemInit+0x64>)
 8007954:	4a0b      	ldr	r2, [pc, #44]	; (8007984 <SystemInit+0x68>)
 8007956:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007958:	4b09      	ldr	r3, [pc, #36]	; (8007980 <SystemInit+0x64>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a08      	ldr	r2, [pc, #32]	; (8007980 <SystemInit+0x64>)
 800795e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007962:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007964:	4b06      	ldr	r3, [pc, #24]	; (8007980 <SystemInit+0x64>)
 8007966:	2200      	movs	r2, #0
 8007968:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800796a:	4b04      	ldr	r3, [pc, #16]	; (800797c <SystemInit+0x60>)
 800796c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007970:	609a      	str	r2, [r3, #8]
#endif
}
 8007972:	bf00      	nop
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr
 800797c:	e000ed00 	.word	0xe000ed00
 8007980:	40023800 	.word	0x40023800
 8007984:	24003010 	.word	0x24003010

08007988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800798c:	4b0e      	ldr	r3, [pc, #56]	; (80079c8 <HAL_Init+0x40>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a0d      	ldr	r2, [pc, #52]	; (80079c8 <HAL_Init+0x40>)
 8007992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007996:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8007998:	4b0b      	ldr	r3, [pc, #44]	; (80079c8 <HAL_Init+0x40>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a0a      	ldr	r2, [pc, #40]	; (80079c8 <HAL_Init+0x40>)
 800799e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80079a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80079a4:	4b08      	ldr	r3, [pc, #32]	; (80079c8 <HAL_Init+0x40>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a07      	ldr	r2, [pc, #28]	; (80079c8 <HAL_Init+0x40>)
 80079aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80079b0:	2003      	movs	r0, #3
 80079b2:	f000 f925 	bl	8007c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80079b6:	200f      	movs	r0, #15
 80079b8:	f000 f808 	bl	80079cc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80079bc:	f7f9 faae 	bl	8000f1c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	40023c00 	.word	0x40023c00

080079cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80079d4:	4b09      	ldr	r3, [pc, #36]	; (80079fc <HAL_InitTick+0x30>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a09      	ldr	r2, [pc, #36]	; (8007a00 <HAL_InitTick+0x34>)
 80079da:	fba2 2303 	umull	r2, r3, r2, r3
 80079de:	099b      	lsrs	r3, r3, #6
 80079e0:	4618      	mov	r0, r3
 80079e2:	f000 f942 	bl	8007c6a <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80079e6:	2200      	movs	r2, #0
 80079e8:	6879      	ldr	r1, [r7, #4]
 80079ea:	f04f 30ff 	mov.w	r0, #4294967295
 80079ee:	f000 f912 	bl	8007c16 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	200007cc 	.word	0x200007cc
 8007a00:	10624dd3 	.word	0x10624dd3

08007a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007a04:	b480      	push	{r7}
 8007a06:	af00      	add	r7, sp, #0
  uwTick++;
 8007a08:	4b04      	ldr	r3, [pc, #16]	; (8007a1c <HAL_IncTick+0x18>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	4a03      	ldr	r2, [pc, #12]	; (8007a1c <HAL_IncTick+0x18>)
 8007a10:	6013      	str	r3, [r2, #0]
}
 8007a12:	bf00      	nop
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	20000b04 	.word	0x20000b04

08007a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007a20:	b480      	push	{r7}
 8007a22:	af00      	add	r7, sp, #0
  return uwTick;
 8007a24:	4b03      	ldr	r3, [pc, #12]	; (8007a34 <HAL_GetTick+0x14>)
 8007a26:	681b      	ldr	r3, [r3, #0]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	20000b04 	.word	0x20000b04

08007a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a40:	2300      	movs	r3, #0
 8007a42:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8007a44:	f7ff ffec 	bl	8007a20 <HAL_GetTick>
 8007a48:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8007a4a:	bf00      	nop
 8007a4c:	f7ff ffe8 	bl	8007a20 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	1ad2      	subs	r2, r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d3f7      	bcc.n	8007a4c <HAL_Delay+0x14>
  {
  }
}
 8007a5c:	bf00      	nop
 8007a5e:	bf00      	nop
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f003 0307 	and.w	r3, r3, #7
 8007a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007a78:	4b0c      	ldr	r3, [pc, #48]	; (8007aac <NVIC_SetPriorityGrouping+0x44>)
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007a84:	4013      	ands	r3, r2
 8007a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007a9a:	4a04      	ldr	r2, [pc, #16]	; (8007aac <NVIC_SetPriorityGrouping+0x44>)
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	60d3      	str	r3, [r2, #12]
}
 8007aa0:	bf00      	nop
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	e000ed00 	.word	0xe000ed00

08007ab0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ab4:	4b04      	ldr	r3, [pc, #16]	; (8007ac8 <NVIC_GetPriorityGrouping+0x18>)
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	0a1b      	lsrs	r3, r3, #8
 8007aba:	f003 0307 	and.w	r3, r3, #7
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr
 8007ac8:	e000ed00 	.word	0xe000ed00

08007acc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8007ad6:	79fb      	ldrb	r3, [r7, #7]
 8007ad8:	f003 021f 	and.w	r2, r3, #31
 8007adc:	4907      	ldr	r1, [pc, #28]	; (8007afc <NVIC_EnableIRQ+0x30>)
 8007ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ae2:	095b      	lsrs	r3, r3, #5
 8007ae4:	2001      	movs	r0, #1
 8007ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8007aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007aee:	bf00      	nop
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	e000e100 	.word	0xe000e100

08007b00 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	4603      	mov	r3, r0
 8007b08:	6039      	str	r1, [r7, #0]
 8007b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8007b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	da0b      	bge.n	8007b2c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	b2da      	uxtb	r2, r3
 8007b18:	490c      	ldr	r1, [pc, #48]	; (8007b4c <NVIC_SetPriority+0x4c>)
 8007b1a:	79fb      	ldrb	r3, [r7, #7]
 8007b1c:	f003 030f 	and.w	r3, r3, #15
 8007b20:	3b04      	subs	r3, #4
 8007b22:	0112      	lsls	r2, r2, #4
 8007b24:	b2d2      	uxtb	r2, r2
 8007b26:	440b      	add	r3, r1
 8007b28:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007b2a:	e009      	b.n	8007b40 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	b2da      	uxtb	r2, r3
 8007b30:	4907      	ldr	r1, [pc, #28]	; (8007b50 <NVIC_SetPriority+0x50>)
 8007b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b36:	0112      	lsls	r2, r2, #4
 8007b38:	b2d2      	uxtb	r2, r2
 8007b3a:	440b      	add	r3, r1
 8007b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	e000ed00 	.word	0xe000ed00
 8007b50:	e000e100 	.word	0xe000e100

08007b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b089      	sub	sp, #36	; 0x24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f003 0307 	and.w	r3, r3, #7
 8007b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	f1c3 0307 	rsb	r3, r3, #7
 8007b6e:	2b04      	cmp	r3, #4
 8007b70:	bf28      	it	cs
 8007b72:	2304      	movcs	r3, #4
 8007b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	3304      	adds	r3, #4
 8007b7a:	2b06      	cmp	r3, #6
 8007b7c:	d902      	bls.n	8007b84 <NVIC_EncodePriority+0x30>
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	3b03      	subs	r3, #3
 8007b82:	e000      	b.n	8007b86 <NVIC_EncodePriority+0x32>
 8007b84:	2300      	movs	r3, #0
 8007b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b88:	f04f 32ff 	mov.w	r2, #4294967295
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b92:	43da      	mvns	r2, r3
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	401a      	ands	r2, r3
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba6:	43d9      	mvns	r1, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bac:	4313      	orrs	r3, r2
         );
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3724      	adds	r7, #36	; 0x24
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
	...

08007bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bcc:	d301      	bcc.n	8007bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e00f      	b.n	8007bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007bd2:	4a0a      	ldr	r2, [pc, #40]	; (8007bfc <SysTick_Config+0x40>)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007bda:	210f      	movs	r1, #15
 8007bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007be0:	f7ff ff8e 	bl	8007b00 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007be4:	4b05      	ldr	r3, [pc, #20]	; (8007bfc <SysTick_Config+0x40>)
 8007be6:	2200      	movs	r2, #0
 8007be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007bea:	4b04      	ldr	r3, [pc, #16]	; (8007bfc <SysTick_Config+0x40>)
 8007bec:	2207      	movs	r2, #7
 8007bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	e000e010 	.word	0xe000e010

08007c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f7ff ff2d 	bl	8007a68 <NVIC_SetPriorityGrouping>
}
 8007c0e:	bf00      	nop
 8007c10:	3708      	adds	r7, #8
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b086      	sub	sp, #24
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	60b9      	str	r1, [r7, #8]
 8007c20:	607a      	str	r2, [r7, #4]
 8007c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007c24:	2300      	movs	r3, #0
 8007c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007c28:	f7ff ff42 	bl	8007ab0 <NVIC_GetPriorityGrouping>
 8007c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	68b9      	ldr	r1, [r7, #8]
 8007c32:	6978      	ldr	r0, [r7, #20]
 8007c34:	f7ff ff8e 	bl	8007b54 <NVIC_EncodePriority>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c3e:	4611      	mov	r1, r2
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7ff ff5d 	bl	8007b00 <NVIC_SetPriority>
}
 8007c46:	bf00      	nop
 8007c48:	3718      	adds	r7, #24
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b082      	sub	sp, #8
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	4603      	mov	r3, r0
 8007c56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7ff ff35 	bl	8007acc <NVIC_EnableIRQ>
}
 8007c62:	bf00      	nop
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b082      	sub	sp, #8
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7ff ffa2 	bl	8007bbc <SysTick_Config>
 8007c78:	4603      	mov	r3, r0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8007c86:	f000 f802 	bl	8007c8e <HAL_SYSTICK_Callback>
}
 8007c8a:	bf00      	nop
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8007c92:	bf00      	nop
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b086      	sub	sp, #24
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007ca8:	f7ff feba 	bl	8007a20 <HAL_GetTick>
 8007cac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d101      	bne.n	8007cb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e095      	b.n	8007de4 <HAL_DMA_Init+0x148>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f022 0201 	bic.w	r2, r2, #1
 8007cd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007cd8:	e00f      	b.n	8007cfa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007cda:	f7ff fea1 	bl	8007a20 <HAL_GetTick>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	1ad3      	subs	r3, r2, r3
 8007ce4:	2b05      	cmp	r3, #5
 8007ce6:	d908      	bls.n	8007cfa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2220      	movs	r2, #32
 8007cec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2203      	movs	r2, #3
 8007cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	e074      	b.n	8007de4 <HAL_DMA_Init+0x148>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1e8      	bne.n	8007cda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007d10:	697a      	ldr	r2, [r7, #20]
 8007d12:	4b36      	ldr	r3, [pc, #216]	; (8007dec <HAL_DMA_Init+0x150>)
 8007d14:	4013      	ands	r3, r2
 8007d16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	685a      	ldr	r2, [r3, #4]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d50:	2b04      	cmp	r3, #4
 8007d52:	d107      	bne.n	8007d64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	697a      	ldr	r2, [r7, #20]
 8007d6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	f023 0307 	bic.w	r3, r3, #7
 8007d7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d80:	697a      	ldr	r2, [r7, #20]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	617b      	str	r3, [r7, #20]

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8a:	2b04      	cmp	r3, #4
 8007d8c:	d113      	bne.n	8007db6 <HAL_DMA_Init+0x11a>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	617b      	str	r3, [r7, #20]
    
    if(DMA_CheckFifoParam(hdma) != HAL_OK)
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fa9f 	bl	80082dc <DMA_CheckFifoParam>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d008      	beq.n	8007db6 <HAL_DMA_Init+0x11a>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2240      	movs	r2, #64	; 0x40
 8007da8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_ERROR; 
 8007db2:	2301      	movs	r3, #1
 8007db4:	e016      	b.n	8007de4 <HAL_DMA_Init+0x148>
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fa56 	bl	8008270 <DMA_CalcBaseAndBitshift>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dcc:	223f      	movs	r2, #63	; 0x3f
 8007dce:	409a      	lsls	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	f010803f 	.word	0xf010803f

08007df0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b086      	sub	sp, #24
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d101      	bne.n	8007e16 <HAL_DMA_Start_IT+0x26>
 8007e12:	2302      	movs	r3, #2
 8007e14:	e048      	b.n	8007ea8 <HAL_DMA_Start_IT+0xb8>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d137      	bne.n	8007e9a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2202      	movs	r2, #2
 8007e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	68b9      	ldr	r1, [r7, #8]
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f000 f9e8 	bl	8008214 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e48:	223f      	movs	r2, #63	; 0x3f
 8007e4a:	409a      	lsls	r2, r3
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f042 0216 	orr.w	r2, r2, #22
 8007e5e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	695a      	ldr	r2, [r3, #20]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e6e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d007      	beq.n	8007e88 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f042 0208 	orr.w	r2, r2, #8
 8007e86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f042 0201 	orr.w	r2, r2, #1
 8007e96:	601a      	str	r2, [r3, #0]
 8007e98:	e005      	b.n	8007ea6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3718      	adds	r7, #24
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d004      	beq.n	8007ece <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2280      	movs	r2, #128	; 0x80
 8007ec8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e00c      	b.n	8007ee8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2205      	movs	r2, #5
 8007ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f022 0201 	bic.w	r2, r2, #1
 8007ee4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007efc:	2300      	movs	r3, #0
 8007efe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007f00:	4b93      	ldr	r3, [pc, #588]	; (8008150 <HAL_DMA_IRQHandler+0x25c>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a93      	ldr	r2, [pc, #588]	; (8008154 <HAL_DMA_IRQHandler+0x260>)
 8007f06:	fba2 2303 	umull	r2, r3, r2, r3
 8007f0a:	0a9b      	lsrs	r3, r3, #10
 8007f0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f1e:	2208      	movs	r2, #8
 8007f20:	409a      	lsls	r2, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	4013      	ands	r3, r2
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d01a      	beq.n	8007f60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 0304 	and.w	r3, r3, #4
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d013      	beq.n	8007f60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f022 0204 	bic.w	r2, r2, #4
 8007f46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f4c:	2208      	movs	r2, #8
 8007f4e:	409a      	lsls	r2, r3
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f58:	f043 0201 	orr.w	r2, r3, #1
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f64:	4a7c      	ldr	r2, [pc, #496]	; (8008158 <HAL_DMA_IRQHandler+0x264>)
 8007f66:	409a      	lsls	r2, r3
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d012      	beq.n	8007f96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00b      	beq.n	8007f96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f82:	4a75      	ldr	r2, [pc, #468]	; (8008158 <HAL_DMA_IRQHandler+0x264>)
 8007f84:	409a      	lsls	r2, r3
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f8e:	f043 0202 	orr.w	r2, r3, #2
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f9a:	4a70      	ldr	r2, [pc, #448]	; (800815c <HAL_DMA_IRQHandler+0x268>)
 8007f9c:	409a      	lsls	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d012      	beq.n	8007fcc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0302 	and.w	r3, r3, #2
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00b      	beq.n	8007fcc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fb8:	4a68      	ldr	r2, [pc, #416]	; (800815c <HAL_DMA_IRQHandler+0x268>)
 8007fba:	409a      	lsls	r2, r3
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc4:	f043 0204 	orr.w	r2, r3, #4
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fd0:	2210      	movs	r2, #16
 8007fd2:	409a      	lsls	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d043      	beq.n	8008064 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 0308 	and.w	r3, r3, #8
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d03c      	beq.n	8008064 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fee:	2210      	movs	r2, #16
 8007ff0:	409a      	lsls	r2, r3
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d018      	beq.n	8008036 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d108      	bne.n	8008024 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008016:	2b00      	cmp	r3, #0
 8008018:	d024      	beq.n	8008064 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	4798      	blx	r3
 8008022:	e01f      	b.n	8008064 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008028:	2b00      	cmp	r3, #0
 800802a:	d01b      	beq.n	8008064 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	4798      	blx	r3
 8008034:	e016      	b.n	8008064 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008040:	2b00      	cmp	r3, #0
 8008042:	d107      	bne.n	8008054 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f022 0208 	bic.w	r2, r2, #8
 8008052:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008058:	2b00      	cmp	r3, #0
 800805a:	d003      	beq.n	8008064 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008068:	2220      	movs	r2, #32
 800806a:	409a      	lsls	r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	4013      	ands	r3, r2
 8008070:	2b00      	cmp	r3, #0
 8008072:	f000 8094 	beq.w	800819e <HAL_DMA_IRQHandler+0x2aa>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 0310 	and.w	r3, r3, #16
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 808c 	beq.w	800819e <HAL_DMA_IRQHandler+0x2aa>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800808a:	2220      	movs	r2, #32
 800808c:	409a      	lsls	r2, r3
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b05      	cmp	r3, #5
 800809c:	d137      	bne.n	800810e <HAL_DMA_IRQHandler+0x21a>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f022 0216 	bic.w	r2, r2, #22
 80080ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	695a      	ldr	r2, [r3, #20]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d103      	bne.n	80080ce <HAL_DMA_IRQHandler+0x1da>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d007      	beq.n	80080de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f022 0208 	bic.w	r2, r2, #8
 80080dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080e2:	223f      	movs	r2, #63	; 0x3f
 80080e4:	409a      	lsls	r2, r3
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f000 8083 	beq.w	800820a <HAL_DMA_IRQHandler+0x316>
        {
          hdma->XferAbortCallback(hdma);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	4798      	blx	r3
        }
        return;
 800810c:	e07d      	b.n	800820a <HAL_DMA_IRQHandler+0x316>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d021      	beq.n	8008160 <HAL_DMA_IRQHandler+0x26c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d108      	bne.n	800813c <HAL_DMA_IRQHandler+0x248>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800812e:	2b00      	cmp	r3, #0
 8008130:	d035      	beq.n	800819e <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	4798      	blx	r3
 800813a:	e030      	b.n	800819e <HAL_DMA_IRQHandler+0x2aa>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008140:	2b00      	cmp	r3, #0
 8008142:	d02c      	beq.n	800819e <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	4798      	blx	r3
 800814c:	e027      	b.n	800819e <HAL_DMA_IRQHandler+0x2aa>
 800814e:	bf00      	nop
 8008150:	200007cc 	.word	0x200007cc
 8008154:	1b4e81b5 	.word	0x1b4e81b5
 8008158:	00800001 	.word	0x00800001
 800815c:	00800004 	.word	0x00800004
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10f      	bne.n	800818e <HAL_DMA_IRQHandler+0x29a>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 0210 	bic.w	r2, r2, #16
 800817c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008192:	2b00      	cmp	r3, #0
 8008194:	d003      	beq.n	800819e <HAL_DMA_IRQHandler+0x2aa>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d032      	beq.n	800820c <HAL_DMA_IRQHandler+0x318>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081aa:	f003 0301 	and.w	r3, r3, #1
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d022      	beq.n	80081f8 <HAL_DMA_IRQHandler+0x304>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2205      	movs	r2, #5
 80081b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f022 0201 	bic.w	r2, r2, #1
 80081c8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	3301      	adds	r3, #1
 80081ce:	60bb      	str	r3, [r7, #8]
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d307      	bcc.n	80081e6 <HAL_DMA_IRQHandler+0x2f2>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0301 	and.w	r3, r3, #1
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d1f2      	bne.n	80081ca <HAL_DMA_IRQHandler+0x2d6>
 80081e4:	e000      	b.n	80081e8 <HAL_DMA_IRQHandler+0x2f4>
          break;
 80081e6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d005      	beq.n	800820c <HAL_DMA_IRQHandler+0x318>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	4798      	blx	r3
 8008208:	e000      	b.n	800820c <HAL_DMA_IRQHandler+0x318>
        return;
 800820a:	bf00      	nop
    }
  }
}
 800820c:	3718      	adds	r7, #24
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop

08008214 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
 8008220:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008230:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	2b40      	cmp	r3, #64	; 0x40
 8008240:	d108      	bne.n	8008254 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008252:	e007      	b.n	8008264 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	60da      	str	r2, [r3, #12]
}
 8008264:	bf00      	nop
 8008266:	3714      	adds	r7, #20
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	b2db      	uxtb	r3, r3
 800827e:	3b10      	subs	r3, #16
 8008280:	4a14      	ldr	r2, [pc, #80]	; (80082d4 <DMA_CalcBaseAndBitshift+0x64>)
 8008282:	fba2 2303 	umull	r2, r3, r2, r3
 8008286:	091b      	lsrs	r3, r3, #4
 8008288:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800828a:	4a13      	ldr	r2, [pc, #76]	; (80082d8 <DMA_CalcBaseAndBitshift+0x68>)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	4413      	add	r3, r2
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	461a      	mov	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2b03      	cmp	r3, #3
 800829c:	d909      	bls.n	80082b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80082a6:	f023 0303 	bic.w	r3, r3, #3
 80082aa:	1d1a      	adds	r2, r3, #4
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	659a      	str	r2, [r3, #88]	; 0x58
 80082b0:	e007      	b.n	80082c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80082ba:	f023 0303 	bic.w	r3, r3, #3
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3714      	adds	r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	aaaaaaab 	.word	0xaaaaaaab
 80082d8:	0800cb4c 	.word	0x0800cb4c

080082dc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	699b      	ldr	r3, [r3, #24]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d128      	bne.n	8008348 <DMA_CheckFifoParam+0x6c>
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	2b03      	cmp	r3, #3
 80082fa:	d863      	bhi.n	80083c4 <DMA_CheckFifoParam+0xe8>
 80082fc:	a201      	add	r2, pc, #4	; (adr r2, 8008304 <DMA_CheckFifoParam+0x28>)
 80082fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008302:	bf00      	nop
 8008304:	08008315 	.word	0x08008315
 8008308:	08008327 	.word	0x08008327
 800830c:	08008337 	.word	0x08008337
 8008310:	080083c5 	.word	0x080083c5
  {
    switch (tmp)
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
        if((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008318:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800831c:	2b00      	cmp	r3, #0
 800831e:	d053      	beq.n	80083c8 <DMA_CheckFifoParam+0xec>
        {
          status = HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008324:	e050      	b.n	80083c8 <DMA_CheckFifoParam+0xec>
      case DMA_FIFO_THRESHOLD_HALFFULL:
        if(hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800832e:	d14d      	bne.n	80083cc <DMA_CheckFifoParam+0xf0>
        {
          status = HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008334:	e04a      	b.n	80083cc <DMA_CheckFifoParam+0xf0>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        if((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800833e:	2b00      	cmp	r3, #0
 8008340:	d046      	beq.n	80083d0 <DMA_CheckFifoParam+0xf4>
        {
          status = HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008346:	e043      	b.n	80083d0 <DMA_CheckFifoParam+0xf4>
        break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008350:	d125      	bne.n	800839e <DMA_CheckFifoParam+0xc2>
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	2b03      	cmp	r3, #3
 8008356:	d83d      	bhi.n	80083d4 <DMA_CheckFifoParam+0xf8>
 8008358:	a201      	add	r2, pc, #4	; (adr r2, 8008360 <DMA_CheckFifoParam+0x84>)
 800835a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835e:	bf00      	nop
 8008360:	08008371 	.word	0x08008371
 8008364:	08008377 	.word	0x08008377
 8008368:	08008389 	.word	0x08008389
 800836c:	0800838f 	.word	0x0800838f
  {
    switch (tmp)
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
        status = HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	73fb      	strb	r3, [r7, #15]
        break;
 8008374:	e035      	b.n	80083e2 <DMA_CheckFifoParam+0x106>
      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d02a      	beq.n	80083d8 <DMA_CheckFifoParam+0xfc>
        {
          status = HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008386:	e027      	b.n	80083d8 <DMA_CheckFifoParam+0xfc>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	73fb      	strb	r3, [r7, #15]
        break;
 800838c:	e029      	b.n	80083e2 <DMA_CheckFifoParam+0x106>
      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008392:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008396:	d121      	bne.n	80083dc <DMA_CheckFifoParam+0x100>
        {
          status = HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	73fb      	strb	r3, [r7, #15]
        }
        break;   
 800839c:	e01e      	b.n	80083dc <DMA_CheckFifoParam+0x100>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d903      	bls.n	80083ac <DMA_CheckFifoParam+0xd0>
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	2b03      	cmp	r3, #3
 80083a8:	d003      	beq.n	80083b2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
        }
		break;
      default:
        break;
 80083aa:	e01a      	b.n	80083e2 <DMA_CheckFifoParam+0x106>
        status = HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	73fb      	strb	r3, [r7, #15]
        break;
 80083b0:	e017      	b.n	80083e2 <DMA_CheckFifoParam+0x106>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d010      	beq.n	80083e0 <DMA_CheckFifoParam+0x104>
          status = HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	73fb      	strb	r3, [r7, #15]
		break;
 80083c2:	e00d      	b.n	80083e0 <DMA_CheckFifoParam+0x104>
        break;
 80083c4:	bf00      	nop
 80083c6:	e00c      	b.n	80083e2 <DMA_CheckFifoParam+0x106>
        break;
 80083c8:	bf00      	nop
 80083ca:	e00a      	b.n	80083e2 <DMA_CheckFifoParam+0x106>
        break;
 80083cc:	bf00      	nop
 80083ce:	e008      	b.n	80083e2 <DMA_CheckFifoParam+0x106>
        break;
 80083d0:	bf00      	nop
 80083d2:	e006      	b.n	80083e2 <DMA_CheckFifoParam+0x106>
        break;
 80083d4:	bf00      	nop
 80083d6:	e004      	b.n	80083e2 <DMA_CheckFifoParam+0x106>
        break;
 80083d8:	bf00      	nop
 80083da:	e002      	b.n	80083e2 <DMA_CheckFifoParam+0x106>
        break;   
 80083dc:	bf00      	nop
 80083de:	e000      	b.n	80083e2 <DMA_CheckFifoParam+0x106>
		break;
 80083e0:	bf00      	nop
    }
  } 
  
  return status; 
 80083e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3714      	adds	r7, #20
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b089      	sub	sp, #36	; 0x24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80083fa:	2300      	movs	r3, #0
 80083fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80083fe:	2300      	movs	r3, #0
 8008400:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008402:	2300      	movs	r3, #0
 8008404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008406:	2300      	movs	r3, #0
 8008408:	61fb      	str	r3, [r7, #28]
 800840a:	e159      	b.n	80086c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 800840c:	2201      	movs	r2, #1
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	fa02 f303 	lsl.w	r3, r2, r3
 8008414:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	4013      	ands	r3, r2
 800841e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	429a      	cmp	r2, r3
 8008426:	f040 8148 	bne.w	80086ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	2b02      	cmp	r3, #2
 8008430:	d003      	beq.n	800843a <HAL_GPIO_Init+0x4a>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	2b12      	cmp	r3, #18
 8008438:	d123      	bne.n	8008482 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	08da      	lsrs	r2, r3, #3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	3208      	adds	r2, #8
 8008442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	f003 0307 	and.w	r3, r3, #7
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	220f      	movs	r2, #15
 8008452:	fa02 f303 	lsl.w	r3, r2, r3
 8008456:	43db      	mvns	r3, r3
 8008458:	69ba      	ldr	r2, [r7, #24]
 800845a:	4013      	ands	r3, r2
 800845c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	691a      	ldr	r2, [r3, #16]
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	f003 0307 	and.w	r3, r3, #7
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	fa02 f303 	lsl.w	r3, r2, r3
 800846e:	69ba      	ldr	r2, [r7, #24]
 8008470:	4313      	orrs	r3, r2
 8008472:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	08da      	lsrs	r2, r3, #3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	3208      	adds	r2, #8
 800847c:	69b9      	ldr	r1, [r7, #24]
 800847e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	005b      	lsls	r3, r3, #1
 800848c:	2203      	movs	r2, #3
 800848e:	fa02 f303 	lsl.w	r3, r2, r3
 8008492:	43db      	mvns	r3, r3
 8008494:	69ba      	ldr	r2, [r7, #24]
 8008496:	4013      	ands	r3, r2
 8008498:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f003 0203 	and.w	r2, r3, #3
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	005b      	lsls	r3, r3, #1
 80084a6:	fa02 f303 	lsl.w	r3, r2, r3
 80084aa:	69ba      	ldr	r2, [r7, #24]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	69ba      	ldr	r2, [r7, #24]
 80084b4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d00b      	beq.n	80084d6 <HAL_GPIO_Init+0xe6>
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d007      	beq.n	80084d6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80084ca:	2b11      	cmp	r3, #17
 80084cc:	d003      	beq.n	80084d6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	2b12      	cmp	r3, #18
 80084d4:	d130      	bne.n	8008538 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	005b      	lsls	r3, r3, #1
 80084e0:	2203      	movs	r2, #3
 80084e2:	fa02 f303 	lsl.w	r3, r2, r3
 80084e6:	43db      	mvns	r3, r3
 80084e8:	69ba      	ldr	r2, [r7, #24]
 80084ea:	4013      	ands	r3, r2
 80084ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	68da      	ldr	r2, [r3, #12]
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	005b      	lsls	r3, r3, #1
 80084f6:	fa02 f303 	lsl.w	r3, r2, r3
 80084fa:	69ba      	ldr	r2, [r7, #24]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	69ba      	ldr	r2, [r7, #24]
 8008504:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800850c:	2201      	movs	r2, #1
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	fa02 f303 	lsl.w	r3, r2, r3
 8008514:	43db      	mvns	r3, r3
 8008516:	69ba      	ldr	r2, [r7, #24]
 8008518:	4013      	ands	r3, r2
 800851a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	091b      	lsrs	r3, r3, #4
 8008522:	f003 0201 	and.w	r2, r3, #1
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	fa02 f303 	lsl.w	r3, r2, r3
 800852c:	69ba      	ldr	r2, [r7, #24]
 800852e:	4313      	orrs	r3, r2
 8008530:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	69ba      	ldr	r2, [r7, #24]
 8008536:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	005b      	lsls	r3, r3, #1
 8008542:	2203      	movs	r2, #3
 8008544:	fa02 f303 	lsl.w	r3, r2, r3
 8008548:	43db      	mvns	r3, r3
 800854a:	69ba      	ldr	r2, [r7, #24]
 800854c:	4013      	ands	r3, r2
 800854e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	689a      	ldr	r2, [r3, #8]
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	005b      	lsls	r3, r3, #1
 8008558:	fa02 f303 	lsl.w	r3, r2, r3
 800855c:	69ba      	ldr	r2, [r7, #24]
 800855e:	4313      	orrs	r3, r2
 8008560:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	69ba      	ldr	r2, [r7, #24]
 8008566:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 80a2 	beq.w	80086ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008576:	2300      	movs	r3, #0
 8008578:	60fb      	str	r3, [r7, #12]
 800857a:	4b57      	ldr	r3, [pc, #348]	; (80086d8 <HAL_GPIO_Init+0x2e8>)
 800857c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800857e:	4a56      	ldr	r2, [pc, #344]	; (80086d8 <HAL_GPIO_Init+0x2e8>)
 8008580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008584:	6453      	str	r3, [r2, #68]	; 0x44
 8008586:	4b54      	ldr	r3, [pc, #336]	; (80086d8 <HAL_GPIO_Init+0x2e8>)
 8008588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800858a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800858e:	60fb      	str	r3, [r7, #12]
 8008590:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008592:	4a52      	ldr	r2, [pc, #328]	; (80086dc <HAL_GPIO_Init+0x2ec>)
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	089b      	lsrs	r3, r3, #2
 8008598:	3302      	adds	r3, #2
 800859a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800859e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	f003 0303 	and.w	r3, r3, #3
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	220f      	movs	r2, #15
 80085aa:	fa02 f303 	lsl.w	r3, r2, r3
 80085ae:	43db      	mvns	r3, r3
 80085b0:	69ba      	ldr	r2, [r7, #24]
 80085b2:	4013      	ands	r3, r2
 80085b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a49      	ldr	r2, [pc, #292]	; (80086e0 <HAL_GPIO_Init+0x2f0>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d019      	beq.n	80085f2 <HAL_GPIO_Init+0x202>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a48      	ldr	r2, [pc, #288]	; (80086e4 <HAL_GPIO_Init+0x2f4>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d013      	beq.n	80085ee <HAL_GPIO_Init+0x1fe>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a47      	ldr	r2, [pc, #284]	; (80086e8 <HAL_GPIO_Init+0x2f8>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d00d      	beq.n	80085ea <HAL_GPIO_Init+0x1fa>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a46      	ldr	r2, [pc, #280]	; (80086ec <HAL_GPIO_Init+0x2fc>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d007      	beq.n	80085e6 <HAL_GPIO_Init+0x1f6>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a45      	ldr	r2, [pc, #276]	; (80086f0 <HAL_GPIO_Init+0x300>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d101      	bne.n	80085e2 <HAL_GPIO_Init+0x1f2>
 80085de:	2304      	movs	r3, #4
 80085e0:	e008      	b.n	80085f4 <HAL_GPIO_Init+0x204>
 80085e2:	2307      	movs	r3, #7
 80085e4:	e006      	b.n	80085f4 <HAL_GPIO_Init+0x204>
 80085e6:	2303      	movs	r3, #3
 80085e8:	e004      	b.n	80085f4 <HAL_GPIO_Init+0x204>
 80085ea:	2302      	movs	r3, #2
 80085ec:	e002      	b.n	80085f4 <HAL_GPIO_Init+0x204>
 80085ee:	2301      	movs	r3, #1
 80085f0:	e000      	b.n	80085f4 <HAL_GPIO_Init+0x204>
 80085f2:	2300      	movs	r3, #0
 80085f4:	69fa      	ldr	r2, [r7, #28]
 80085f6:	f002 0203 	and.w	r2, r2, #3
 80085fa:	0092      	lsls	r2, r2, #2
 80085fc:	4093      	lsls	r3, r2
 80085fe:	69ba      	ldr	r2, [r7, #24]
 8008600:	4313      	orrs	r3, r2
 8008602:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008604:	4935      	ldr	r1, [pc, #212]	; (80086dc <HAL_GPIO_Init+0x2ec>)
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	089b      	lsrs	r3, r3, #2
 800860a:	3302      	adds	r3, #2
 800860c:	69ba      	ldr	r2, [r7, #24]
 800860e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008612:	4b38      	ldr	r3, [pc, #224]	; (80086f4 <HAL_GPIO_Init+0x304>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	43db      	mvns	r3, r3
 800861c:	69ba      	ldr	r2, [r7, #24]
 800861e:	4013      	ands	r3, r2
 8008620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800862a:	2b00      	cmp	r3, #0
 800862c:	d003      	beq.n	8008636 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800862e:	69ba      	ldr	r2, [r7, #24]
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	4313      	orrs	r3, r2
 8008634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008636:	4a2f      	ldr	r2, [pc, #188]	; (80086f4 <HAL_GPIO_Init+0x304>)
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800863c:	4b2d      	ldr	r3, [pc, #180]	; (80086f4 <HAL_GPIO_Init+0x304>)
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	43db      	mvns	r3, r3
 8008646:	69ba      	ldr	r2, [r7, #24]
 8008648:	4013      	ands	r3, r2
 800864a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008654:	2b00      	cmp	r3, #0
 8008656:	d003      	beq.n	8008660 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008658:	69ba      	ldr	r2, [r7, #24]
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	4313      	orrs	r3, r2
 800865e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008660:	4a24      	ldr	r2, [pc, #144]	; (80086f4 <HAL_GPIO_Init+0x304>)
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008666:	4b23      	ldr	r3, [pc, #140]	; (80086f4 <HAL_GPIO_Init+0x304>)
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	43db      	mvns	r3, r3
 8008670:	69ba      	ldr	r2, [r7, #24]
 8008672:	4013      	ands	r3, r2
 8008674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d003      	beq.n	800868a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8008682:	69ba      	ldr	r2, [r7, #24]
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	4313      	orrs	r3, r2
 8008688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800868a:	4a1a      	ldr	r2, [pc, #104]	; (80086f4 <HAL_GPIO_Init+0x304>)
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008690:	4b18      	ldr	r3, [pc, #96]	; (80086f4 <HAL_GPIO_Init+0x304>)
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	43db      	mvns	r3, r3
 800869a:	69ba      	ldr	r2, [r7, #24]
 800869c:	4013      	ands	r3, r2
 800869e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d003      	beq.n	80086b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80086ac:	69ba      	ldr	r2, [r7, #24]
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80086b4:	4a0f      	ldr	r2, [pc, #60]	; (80086f4 <HAL_GPIO_Init+0x304>)
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	3301      	adds	r3, #1
 80086be:	61fb      	str	r3, [r7, #28]
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	2b0f      	cmp	r3, #15
 80086c4:	f67f aea2 	bls.w	800840c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80086c8:	bf00      	nop
 80086ca:	bf00      	nop
 80086cc:	3724      	adds	r7, #36	; 0x24
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	40023800 	.word	0x40023800
 80086dc:	40013800 	.word	0x40013800
 80086e0:	40020000 	.word	0x40020000
 80086e4:	40020400 	.word	0x40020400
 80086e8:	40020800 	.word	0x40020800
 80086ec:	40020c00 	.word	0x40020c00
 80086f0:	40021000 	.word	0x40021000
 80086f4:	40013c00 	.word	0x40013c00

080086f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	460b      	mov	r3, r1
 8008702:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	691a      	ldr	r2, [r3, #16]
 8008708:	887b      	ldrh	r3, [r7, #2]
 800870a:	4013      	ands	r3, r2
 800870c:	2b00      	cmp	r3, #0
 800870e:	d002      	beq.n	8008716 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008710:	2301      	movs	r3, #1
 8008712:	73fb      	strb	r3, [r7, #15]
 8008714:	e001      	b.n	800871a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008716:	2300      	movs	r3, #0
 8008718:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800871a:	7bfb      	ldrb	r3, [r7, #15]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	807b      	strh	r3, [r7, #2]
 8008734:	4613      	mov	r3, r2
 8008736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008738:	787b      	ldrb	r3, [r7, #1]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d003      	beq.n	8008746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800873e:	887a      	ldrh	r2, [r7, #2]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008744:	e003      	b.n	800874e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008746:	887b      	ldrh	r3, [r7, #2]
 8008748:	041a      	lsls	r2, r3, #16
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	619a      	str	r2, [r3, #24]
}
 800874e:	bf00      	nop
 8008750:	370c      	adds	r7, #12
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
	...

0800875c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	4603      	mov	r3, r0
 8008764:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008766:	4b08      	ldr	r3, [pc, #32]	; (8008788 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008768:	695a      	ldr	r2, [r3, #20]
 800876a:	88fb      	ldrh	r3, [r7, #6]
 800876c:	4013      	ands	r3, r2
 800876e:	2b00      	cmp	r3, #0
 8008770:	d006      	beq.n	8008780 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008772:	4a05      	ldr	r2, [pc, #20]	; (8008788 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008774:	88fb      	ldrh	r3, [r7, #6]
 8008776:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008778:	88fb      	ldrh	r3, [r7, #6]
 800877a:	4618      	mov	r0, r3
 800877c:	f7f9 f856 	bl	800182c <HAL_GPIO_EXTI_Callback>
  }
}
 8008780:	bf00      	nop
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	40013c00 	.word	0x40013c00

0800878c <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8008794:	2300      	movs	r3, #0
 8008796:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8008798:	2300      	movs	r3, #0
 800879a:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e0c9      	b.n	800893a <HAL_I2C_Init+0x1ae>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d106      	bne.n	80087c0 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f8c8 	bl	8008950 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2224      	movs	r2, #36	; 0x24
 80087c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f022 0201 	bic.w	r2, r2, #1
 80087d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80087d8:	f001 faac 	bl	8009d34 <HAL_RCC_GetPCLK1Freq>
 80087dc:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	4a58      	ldr	r2, [pc, #352]	; (8008944 <HAL_I2C_Init+0x1b8>)
 80087e2:	fba2 2303 	umull	r2, r3, r2, r3
 80087e6:	0c9b      	lsrs	r3, r3, #18
 80087e8:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	4a54      	ldr	r2, [pc, #336]	; (8008948 <HAL_I2C_Init+0x1bc>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d802      	bhi.n	8008802 <HAL_I2C_Init+0x76>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	3301      	adds	r3, #1
 8008800:	e009      	b.n	8008816 <HAL_I2C_Init+0x8a>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008808:	fb02 f303 	mul.w	r3, r2, r3
 800880c:	4a4f      	ldr	r2, [pc, #316]	; (800894c <HAL_I2C_Init+0x1c0>)
 800880e:	fba2 2303 	umull	r2, r3, r2, r3
 8008812:	099b      	lsrs	r3, r3, #6
 8008814:	3301      	adds	r3, #1
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	6812      	ldr	r2, [r2, #0]
 800881a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	4a49      	ldr	r2, [pc, #292]	; (8008948 <HAL_I2C_Init+0x1bc>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d813      	bhi.n	800884e <HAL_I2C_Init+0xc2>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	005b      	lsls	r3, r3, #1
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008832:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008836:	4013      	ands	r3, r2
 8008838:	2b00      	cmp	r3, #0
 800883a:	d006      	beq.n	800884a <HAL_I2C_Init+0xbe>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	005b      	lsls	r3, r3, #1
 8008842:	68ba      	ldr	r2, [r7, #8]
 8008844:	fbb2 f3f3 	udiv	r3, r2, r3
 8008848:	e045      	b.n	80088d6 <HAL_I2C_Init+0x14a>
 800884a:	2304      	movs	r3, #4
 800884c:	e043      	b.n	80088d6 <HAL_I2C_Init+0x14a>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d10f      	bne.n	8008876 <HAL_I2C_Init+0xea>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	685a      	ldr	r2, [r3, #4]
 800885a:	4613      	mov	r3, r2
 800885c:	005b      	lsls	r3, r3, #1
 800885e:	4413      	add	r3, r2
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	fbb2 f3f3 	udiv	r3, r2, r3
 8008866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800886a:	2b00      	cmp	r3, #0
 800886c:	bf0c      	ite	eq
 800886e:	2301      	moveq	r3, #1
 8008870:	2300      	movne	r3, #0
 8008872:	b2db      	uxtb	r3, r3
 8008874:	e010      	b.n	8008898 <HAL_I2C_Init+0x10c>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	685a      	ldr	r2, [r3, #4]
 800887a:	4613      	mov	r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4413      	add	r3, r2
 8008880:	009a      	lsls	r2, r3, #2
 8008882:	4413      	add	r3, r2
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	fbb2 f3f3 	udiv	r3, r2, r3
 800888a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800888e:	2b00      	cmp	r3, #0
 8008890:	bf0c      	ite	eq
 8008892:	2301      	moveq	r3, #1
 8008894:	2300      	movne	r3, #0
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b00      	cmp	r3, #0
 800889a:	d001      	beq.n	80088a0 <HAL_I2C_Init+0x114>
 800889c:	2301      	movs	r3, #1
 800889e:	e01a      	b.n	80088d6 <HAL_I2C_Init+0x14a>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d10a      	bne.n	80088be <HAL_I2C_Init+0x132>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685a      	ldr	r2, [r3, #4]
 80088ac:	4613      	mov	r3, r2
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	4413      	add	r3, r2
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088bc:	e00b      	b.n	80088d6 <HAL_I2C_Init+0x14a>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	685a      	ldr	r2, [r3, #4]
 80088c2:	4613      	mov	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4413      	add	r3, r2
 80088c8:	009a      	lsls	r2, r3, #2
 80088ca:	4413      	add	r3, r2
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80088d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	6812      	ldr	r2, [r2, #0]
 80088da:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	69d9      	ldr	r1, [r3, #28]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a1a      	ldr	r2, [r3, #32]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	430a      	orrs	r2, r1
 80088ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6919      	ldr	r1, [r3, #16]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	68da      	ldr	r2, [r3, #12]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	430a      	orrs	r2, r1
 80088fa:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6959      	ldr	r1, [r3, #20]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	699a      	ldr	r2, [r3, #24]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	430a      	orrs	r2, r1
 800890a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f042 0201 	orr.w	r2, r2, #1
 800891a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2220      	movs	r2, #32
 8008926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	431bde83 	.word	0x431bde83
 8008948:	000186a0 	.word	0x000186a0
 800894c:	10624dd3 	.word	0x10624dd3

08008950 <HAL_I2C_MspInit>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
 __weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2c);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8008958:	bf00      	nop
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b088      	sub	sp, #32
 8008968:	af02      	add	r7, sp, #8
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	607a      	str	r2, [r7, #4]
 800896e:	461a      	mov	r2, r3
 8008970:	460b      	mov	r3, r1
 8008972:	817b      	strh	r3, [r7, #10]
 8008974:	4613      	mov	r3, r2
 8008976:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8008978:	2300      	movs	r3, #0
 800897a:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800897c:	f7ff f850 	bl	8007a20 <HAL_GetTick>
 8008980:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008988:	b2db      	uxtb	r3, r3
 800898a:	2b20      	cmp	r3, #32
 800898c:	f040 80ed 	bne.w	8008b6a <HAL_I2C_Master_Transmit+0x206>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	2319      	movs	r3, #25
 8008996:	2201      	movs	r2, #1
 8008998:	4976      	ldr	r1, [pc, #472]	; (8008b74 <HAL_I2C_Master_Transmit+0x210>)
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f000 fc6a 	bl	8009274 <I2C_WaitOnFlagUntilTimeout>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d001      	beq.n	80089aa <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 80089a6:	2302      	movs	r3, #2
 80089a8:	e0e0      	b.n	8008b6c <HAL_I2C_Master_Transmit+0x208>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d101      	bne.n	80089b8 <HAL_I2C_Master_Transmit+0x54>
 80089b4:	2302      	movs	r3, #2
 80089b6:	e0d9      	b.n	8008b6c <HAL_I2C_Master_Transmit+0x208>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d007      	beq.n	80089de <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f042 0201 	orr.w	r2, r2, #1
 80089dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089ec:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2221      	movs	r2, #33	; 0x21
 80089f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2210      	movs	r2, #16
 80089fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	893a      	ldrh	r2, [r7, #8]
 8008a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	4a59      	ldr	r2, [pc, #356]	; (8008b78 <HAL_I2C_Master_Transmit+0x214>)
 8008a14:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008a20:	8979      	ldrh	r1, [r7, #10]
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	6a3a      	ldr	r2, [r7, #32]
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f000 fada 	bl	8008fe0 <I2C_MasterRequestWrite>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00f      	beq.n	8008a52 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a36:	2b04      	cmp	r3, #4
 8008a38:	d105      	bne.n	8008a46 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e092      	b.n	8008b6c <HAL_I2C_Master_Transmit+0x208>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	e08c      	b.n	8008b6c <HAL_I2C_Master_Transmit+0x208>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a52:	2300      	movs	r3, #0
 8008a54:	613b      	str	r3, [r7, #16]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	695b      	ldr	r3, [r3, #20]
 8008a5c:	613b      	str	r3, [r7, #16]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	613b      	str	r3, [r7, #16]
 8008a66:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8008a68:	e065      	b.n	8008b36 <HAL_I2C_Master_Transmit+0x1d2>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a6a:	697a      	ldr	r2, [r7, #20]
 8008a6c:	6a39      	ldr	r1, [r7, #32]
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f000 fcbf 	bl	80093f2 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00f      	beq.n	8008a9a <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7e:	2b04      	cmp	r3, #4
 8008a80:	d109      	bne.n	8008a96 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a90:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e06a      	b.n	8008b6c <HAL_I2C_Master_Transmit+0x208>
        }
        else
        {
          return HAL_TIMEOUT;
 8008a96:	2303      	movs	r3, #3
 8008a98:	e068      	b.n	8008b6c <HAL_I2C_Master_Transmit+0x208>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9e:	1c59      	adds	r1, r3, #1
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	6251      	str	r1, [r2, #36]	; 0x24
 8008aa4:	781a      	ldrb	r2, [r3, #0]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	695b      	ldr	r3, [r3, #20]
 8008acc:	f003 0304 	and.w	r3, r3, #4
 8008ad0:	2b04      	cmp	r3, #4
 8008ad2:	d118      	bne.n	8008b06 <HAL_I2C_Master_Transmit+0x1a2>
 8008ad4:	893b      	ldrh	r3, [r7, #8]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d015      	beq.n	8008b06 <HAL_I2C_Master_Transmit+0x1a2>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ade:	1c59      	adds	r1, r3, #1
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	6251      	str	r1, [r2, #36]	; 0x24
 8008ae4:	781a      	ldrb	r2, [r3, #0]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	3b01      	subs	r3, #1
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008afe:	3b01      	subs	r3, #1
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b06:	697a      	ldr	r2, [r7, #20]
 8008b08:	6a39      	ldr	r1, [r7, #32]
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f000 fcae 	bl	800946c <I2C_WaitOnBTFFlagUntilTimeout>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00f      	beq.n	8008b36 <HAL_I2C_Master_Transmit+0x1d2>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1a:	2b04      	cmp	r3, #4
 8008b1c:	d109      	bne.n	8008b32 <HAL_I2C_Master_Transmit+0x1ce>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b2c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e01c      	b.n	8008b6c <HAL_I2C_Master_Transmit+0x208>
        }
        else
        {
          return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e01a      	b.n	8008b6c <HAL_I2C_Master_Transmit+0x208>
    while(hi2c->XferSize > 0U)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d195      	bne.n	8008a6a <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2220      	movs	r2, #32
 8008b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	e000      	b.n	8008b6c <HAL_I2C_Master_Transmit+0x208>
  }
  else
  {
    return HAL_BUSY;
 8008b6a:	2302      	movs	r3, #2
  }
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3718      	adds	r7, #24
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	00100002 	.word	0x00100002
 8008b78:	ffff0000 	.word	0xffff0000

08008b7c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b08c      	sub	sp, #48	; 0x30
 8008b80:	af02      	add	r7, sp, #8
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	607a      	str	r2, [r7, #4]
 8008b86:	461a      	mov	r2, r3
 8008b88:	460b      	mov	r3, r1
 8008b8a:	817b      	strh	r3, [r7, #10]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8008b90:	2300      	movs	r3, #0
 8008b92:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b94:	f7fe ff44 	bl	8007a20 <HAL_GetTick>
 8008b98:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	2b20      	cmp	r3, #32
 8008ba4:	f040 8215 	bne.w	8008fd2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	2319      	movs	r3, #25
 8008bae:	2201      	movs	r2, #1
 8008bb0:	4985      	ldr	r1, [pc, #532]	; (8008dc8 <HAL_I2C_Master_Receive+0x24c>)
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f000 fb5e 	bl	8009274 <I2C_WaitOnFlagUntilTimeout>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d001      	beq.n	8008bc2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8008bbe:	2302      	movs	r3, #2
 8008bc0:	e208      	b.n	8008fd4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d101      	bne.n	8008bd0 <HAL_I2C_Master_Receive+0x54>
 8008bcc:	2302      	movs	r3, #2
 8008bce:	e201      	b.n	8008fd4 <HAL_I2C_Master_Receive+0x458>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 0301 	and.w	r3, r3, #1
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d007      	beq.n	8008bf6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f042 0201 	orr.w	r2, r2, #1
 8008bf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2222      	movs	r2, #34	; 0x22
 8008c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2210      	movs	r2, #16
 8008c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	893a      	ldrh	r2, [r7, #8]
 8008c26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	4a68      	ldr	r2, [pc, #416]	; (8008dcc <HAL_I2C_Master_Receive+0x250>)
 8008c2c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008c38:	8979      	ldrh	r1, [r7, #10]
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f000 fa50 	bl	80090e4 <I2C_MasterRequestRead>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00f      	beq.n	8008c6a <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c4e:	2b04      	cmp	r3, #4
 8008c50:	d105      	bne.n	8008c5e <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e1ba      	b.n	8008fd4 <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8008c66:	2303      	movs	r3, #3
 8008c68:	e1b4      	b.n	8008fd4 <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d113      	bne.n	8008c9a <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c72:	2300      	movs	r3, #0
 8008c74:	623b      	str	r3, [r7, #32]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	695b      	ldr	r3, [r3, #20]
 8008c7c:	623b      	str	r3, [r7, #32]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	623b      	str	r3, [r7, #32]
 8008c86:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c96:	601a      	str	r2, [r3, #0]
 8008c98:	e188      	b.n	8008fac <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d11b      	bne.n	8008cda <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	61fb      	str	r3, [r7, #28]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	695b      	ldr	r3, [r3, #20]
 8008cbc:	61fb      	str	r3, [r7, #28]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	699b      	ldr	r3, [r3, #24]
 8008cc4:	61fb      	str	r3, [r7, #28]
 8008cc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cd6:	601a      	str	r2, [r3, #0]
 8008cd8:	e168      	b.n	8008fac <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d11b      	bne.n	8008d1a <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cf0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d02:	2300      	movs	r3, #0
 8008d04:	61bb      	str	r3, [r7, #24]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	695b      	ldr	r3, [r3, #20]
 8008d0c:	61bb      	str	r3, [r7, #24]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	699b      	ldr	r3, [r3, #24]
 8008d14:	61bb      	str	r3, [r7, #24]
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	e148      	b.n	8008fac <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	617b      	str	r3, [r7, #20]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	695b      	ldr	r3, [r3, #20]
 8008d34:	617b      	str	r3, [r7, #20]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	699b      	ldr	r3, [r3, #24]
 8008d3c:	617b      	str	r3, [r7, #20]
 8008d3e:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8008d40:	e134      	b.n	8008fac <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d46:	2b03      	cmp	r3, #3
 8008d48:	f200 80eb 	bhi.w	8008f22 <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d127      	bne.n	8008da4 <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8008d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f000 fbc4 	bl	80094e6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d007      	beq.n	8008d74 <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d68:	2b20      	cmp	r3, #32
 8008d6a:	d101      	bne.n	8008d70 <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	e131      	b.n	8008fd4 <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e12f      	b.n	8008fd4 <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	6918      	ldr	r0, [r3, #16]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7e:	1c59      	adds	r1, r3, #1
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	6251      	str	r1, [r2, #36]	; 0x24
 8008d84:	b2c2      	uxtb	r2, r0
 8008d86:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008da2:	e103      	b.n	8008fac <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d14a      	bne.n	8008e42 <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db2:	2200      	movs	r2, #0
 8008db4:	4906      	ldr	r1, [pc, #24]	; (8008dd0 <HAL_I2C_Master_Receive+0x254>)
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f000 fa5c 	bl	8009274 <I2C_WaitOnFlagUntilTimeout>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d008      	beq.n	8008dd4 <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e106      	b.n	8008fd4 <HAL_I2C_Master_Receive+0x458>
 8008dc6:	bf00      	nop
 8008dc8:	00100002 	.word	0x00100002
 8008dcc:	ffff0000 	.word	0xffff0000
 8008dd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008de2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	6918      	ldr	r0, [r3, #16]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dee:	1c59      	adds	r1, r3, #1
 8008df0:	68fa      	ldr	r2, [r7, #12]
 8008df2:	6251      	str	r1, [r2, #36]	; 0x24
 8008df4:	b2c2      	uxtb	r2, r0
 8008df6:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	b29a      	uxth	r2, r3
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	6918      	ldr	r0, [r3, #16]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1c:	1c59      	adds	r1, r3, #1
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	6251      	str	r1, [r2, #36]	; 0x24
 8008e22:	b2c2      	uxtb	r2, r0
 8008e24:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	b29a      	uxth	r2, r3
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008e40:	e0b4      	b.n	8008fac <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	9300      	str	r3, [sp, #0]
 8008e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e48:	2200      	movs	r2, #0
 8008e4a:	4964      	ldr	r1, [pc, #400]	; (8008fdc <HAL_I2C_Master_Receive+0x460>)
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f000 fa11 	bl	8009274 <I2C_WaitOnFlagUntilTimeout>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d001      	beq.n	8008e5c <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	e0bb      	b.n	8008fd4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	6918      	ldr	r0, [r3, #16]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e76:	1c59      	adds	r1, r3, #1
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	6251      	str	r1, [r2, #36]	; 0x24
 8008e7c:	b2c2      	uxtb	r2, r0
 8008e7e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e84:	3b01      	subs	r3, #1
 8008e86:	b29a      	uxth	r2, r3
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	3b01      	subs	r3, #1
 8008e94:	b29a      	uxth	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	494e      	ldr	r1, [pc, #312]	; (8008fdc <HAL_I2C_Master_Receive+0x460>)
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f000 f9e5 	bl	8009274 <I2C_WaitOnFlagUntilTimeout>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d001      	beq.n	8008eb4 <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	e08f      	b.n	8008fd4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ec2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	6918      	ldr	r0, [r3, #16]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ece:	1c59      	adds	r1, r3, #1
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	6251      	str	r1, [r2, #36]	; 0x24
 8008ed4:	b2c2      	uxtb	r2, r0
 8008ed6:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008edc:	3b01      	subs	r3, #1
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	3b01      	subs	r3, #1
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	6918      	ldr	r0, [r3, #16]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efc:	1c59      	adds	r1, r3, #1
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	6251      	str	r1, [r2, #36]	; 0x24
 8008f02:	b2c2      	uxtb	r2, r0
 8008f04:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008f20:	e044      	b.n	8008fac <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8008f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f000 fadd 	bl	80094e6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d007      	beq.n	8008f42 <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f36:	2b20      	cmp	r3, #32
 8008f38:	d101      	bne.n	8008f3e <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8008f3a:	2303      	movs	r3, #3
 8008f3c:	e04a      	b.n	8008fd4 <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e048      	b.n	8008fd4 <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	6918      	ldr	r0, [r3, #16]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4c:	1c59      	adds	r1, r3, #1
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	6251      	str	r1, [r2, #36]	; 0x24
 8008f52:	b2c2      	uxtb	r2, r0
 8008f54:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	695b      	ldr	r3, [r3, #20]
 8008f76:	f003 0304 	and.w	r3, r3, #4
 8008f7a:	2b04      	cmp	r3, #4
 8008f7c:	d116      	bne.n	8008fac <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	6918      	ldr	r0, [r3, #16]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f88:	1c59      	adds	r1, r3, #1
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	6251      	str	r1, [r2, #36]	; 0x24
 8008f8e:	b2c2      	uxtb	r2, r0
 8008f90:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f96:	3b01      	subs	r3, #1
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	3b01      	subs	r3, #1
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f47f aec6 	bne.w	8008d42 <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2220      	movs	r2, #32
 8008fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	e000      	b.n	8008fd4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008fd2:	2302      	movs	r3, #2
  }
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3728      	adds	r7, #40	; 0x28
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	00010004 	.word	0x00010004

08008fe0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b088      	sub	sp, #32
 8008fe4:	af02      	add	r7, sp, #8
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	607a      	str	r2, [r7, #4]
 8008fea:	603b      	str	r3, [r7, #0]
 8008fec:	460b      	mov	r3, r1
 8008fee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	2b04      	cmp	r3, #4
 8008ffa:	d006      	beq.n	800900a <I2C_MasterRequestWrite+0x2a>
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d003      	beq.n	800900a <I2C_MasterRequestWrite+0x2a>
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009008:	d108      	bne.n	800901c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009018:	601a      	str	r2, [r3, #0]
 800901a:	e00b      	b.n	8009034 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009020:	2b12      	cmp	r3, #18
 8009022:	d107      	bne.n	8009034 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009032:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	9300      	str	r3, [sp, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f000 f917 	bl	8009274 <I2C_WaitOnFlagUntilTimeout>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d001      	beq.n	8009050 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 800904c:	2303      	movs	r3, #3
 800904e:	e041      	b.n	80090d4 <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009058:	d108      	bne.n	800906c <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800905a:	897b      	ldrh	r3, [r7, #10]
 800905c:	b2db      	uxtb	r3, r3
 800905e:	461a      	mov	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009068:	611a      	str	r2, [r3, #16]
 800906a:	e021      	b.n	80090b0 <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800906c:	897b      	ldrh	r3, [r7, #10]
 800906e:	11db      	asrs	r3, r3, #7
 8009070:	b2db      	uxtb	r3, r3
 8009072:	f003 0306 	and.w	r3, r3, #6
 8009076:	b2db      	uxtb	r3, r3
 8009078:	f063 030f 	orn	r3, r3, #15
 800907c:	b2da      	uxtb	r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	4914      	ldr	r1, [pc, #80]	; (80090dc <I2C_MasterRequestWrite+0xfc>)
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f000 f943 	bl	8009316 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d007      	beq.n	80090a6 <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800909a:	2b04      	cmp	r3, #4
 800909c:	d101      	bne.n	80090a2 <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	e018      	b.n	80090d4 <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 80090a2:	2303      	movs	r3, #3
 80090a4:	e016      	b.n	80090d4 <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80090a6:	897b      	ldrh	r3, [r7, #10]
 80090a8:	b2da      	uxtb	r2, r3
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	490a      	ldr	r1, [pc, #40]	; (80090e0 <I2C_MasterRequestWrite+0x100>)
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f000 f92d 	bl	8009316 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d007      	beq.n	80090d2 <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c6:	2b04      	cmp	r3, #4
 80090c8:	d101      	bne.n	80090ce <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	e002      	b.n	80090d4 <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 80090ce:	2303      	movs	r3, #3
 80090d0:	e000      	b.n	80090d4 <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 80090d2:	2300      	movs	r3, #0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3718      	adds	r7, #24
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	00010008 	.word	0x00010008
 80090e0:	00010002 	.word	0x00010002

080090e4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b088      	sub	sp, #32
 80090e8:	af02      	add	r7, sp, #8
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	607a      	str	r2, [r7, #4]
 80090ee:	603b      	str	r3, [r7, #0]
 80090f0:	460b      	mov	r3, r1
 80090f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009108:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	2b04      	cmp	r3, #4
 800910e:	d006      	beq.n	800911e <I2C_MasterRequestRead+0x3a>
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	2b01      	cmp	r3, #1
 8009114:	d003      	beq.n	800911e <I2C_MasterRequestRead+0x3a>
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800911c:	d108      	bne.n	8009130 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800912c:	601a      	str	r2, [r3, #0]
 800912e:	e00b      	b.n	8009148 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009134:	2b11      	cmp	r3, #17
 8009136:	d107      	bne.n	8009148 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009146:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f000 f88d 	bl	8009274 <I2C_WaitOnFlagUntilTimeout>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d001      	beq.n	8009164 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8009160:	2303      	movs	r3, #3
 8009162:	e07f      	b.n	8009264 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800916c:	d108      	bne.n	8009180 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800916e:	897b      	ldrh	r3, [r7, #10]
 8009170:	b2db      	uxtb	r3, r3
 8009172:	f043 0301 	orr.w	r3, r3, #1
 8009176:	b2da      	uxtb	r2, r3
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	611a      	str	r2, [r3, #16]
 800917e:	e05f      	b.n	8009240 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009180:	897b      	ldrh	r3, [r7, #10]
 8009182:	11db      	asrs	r3, r3, #7
 8009184:	b2db      	uxtb	r3, r3
 8009186:	f003 0306 	and.w	r3, r3, #6
 800918a:	b2db      	uxtb	r3, r3
 800918c:	f063 030f 	orn	r3, r3, #15
 8009190:	b2da      	uxtb	r2, r3
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	4933      	ldr	r1, [pc, #204]	; (800926c <I2C_MasterRequestRead+0x188>)
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f000 f8b9 	bl	8009316 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d007      	beq.n	80091ba <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ae:	2b04      	cmp	r3, #4
 80091b0:	d101      	bne.n	80091b6 <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e056      	b.n	8009264 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80091b6:	2303      	movs	r3, #3
 80091b8:	e054      	b.n	8009264 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80091ba:	897b      	ldrh	r3, [r7, #10]
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	4929      	ldr	r1, [pc, #164]	; (8009270 <I2C_MasterRequestRead+0x18c>)
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f000 f8a3 	bl	8009316 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d007      	beq.n	80091e6 <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091da:	2b04      	cmp	r3, #4
 80091dc:	d101      	bne.n	80091e2 <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	e040      	b.n	8009264 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80091e2:	2303      	movs	r3, #3
 80091e4:	e03e      	b.n	8009264 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091e6:	2300      	movs	r3, #0
 80091e8:	613b      	str	r3, [r7, #16]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	695b      	ldr	r3, [r3, #20]
 80091f0:	613b      	str	r3, [r7, #16]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	699b      	ldr	r3, [r3, #24]
 80091f8:	613b      	str	r3, [r7, #16]
 80091fa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800920a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	f000 f82b 	bl	8009274 <I2C_WaitOnFlagUntilTimeout>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d001      	beq.n	8009228 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 8009224:	2303      	movs	r3, #3
 8009226:	e01d      	b.n	8009264 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009228:	897b      	ldrh	r3, [r7, #10]
 800922a:	11db      	asrs	r3, r3, #7
 800922c:	b2db      	uxtb	r3, r3
 800922e:	f003 0306 	and.w	r3, r3, #6
 8009232:	b2db      	uxtb	r3, r3
 8009234:	f063 030e 	orn	r3, r3, #14
 8009238:	b2da      	uxtb	r2, r3
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	490a      	ldr	r1, [pc, #40]	; (8009270 <I2C_MasterRequestRead+0x18c>)
 8009246:	68f8      	ldr	r0, [r7, #12]
 8009248:	f000 f865 	bl	8009316 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d007      	beq.n	8009262 <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009256:	2b04      	cmp	r3, #4
 8009258:	d101      	bne.n	800925e <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	e002      	b.n	8009264 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 800925e:	2303      	movs	r3, #3
 8009260:	e000      	b.n	8009264 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	3718      	adds	r7, #24
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	00010008 	.word	0x00010008
 8009270:	00010002 	.word	0x00010002

08009274 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	603b      	str	r3, [r7, #0]
 8009280:	4613      	mov	r3, r2
 8009282:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8009284:	e01f      	b.n	80092c6 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800928c:	d01b      	beq.n	80092c6 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d007      	beq.n	80092a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009294:	f7fe fbc4 	bl	8007a20 <HAL_GetTick>
 8009298:	4602      	mov	r2, r0
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	683a      	ldr	r2, [r7, #0]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d210      	bcs.n	80092c6 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2220      	movs	r2, #32
 80092ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80092c2:	2303      	movs	r3, #3
 80092c4:	e023      	b.n	800930e <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	0c1b      	lsrs	r3, r3, #16
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d10d      	bne.n	80092ec <I2C_WaitOnFlagUntilTimeout+0x78>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	43da      	mvns	r2, r3
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	4013      	ands	r3, r2
 80092dc:	b29b      	uxth	r3, r3
 80092de:	2b00      	cmp	r3, #0
 80092e0:	bf0c      	ite	eq
 80092e2:	2301      	moveq	r3, #1
 80092e4:	2300      	movne	r3, #0
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	461a      	mov	r2, r3
 80092ea:	e00c      	b.n	8009306 <I2C_WaitOnFlagUntilTimeout+0x92>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	699b      	ldr	r3, [r3, #24]
 80092f2:	43da      	mvns	r2, r3
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	4013      	ands	r3, r2
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	bf0c      	ite	eq
 80092fe:	2301      	moveq	r3, #1
 8009300:	2300      	movne	r3, #0
 8009302:	b2db      	uxtb	r3, r3
 8009304:	461a      	mov	r2, r3
 8009306:	79fb      	ldrb	r3, [r7, #7]
 8009308:	429a      	cmp	r2, r3
 800930a:	d0bc      	beq.n	8009286 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b084      	sub	sp, #16
 800931a:	af00      	add	r7, sp, #0
 800931c:	60f8      	str	r0, [r7, #12]
 800931e:	60b9      	str	r1, [r7, #8]
 8009320:	607a      	str	r2, [r7, #4]
 8009322:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009324:	e040      	b.n	80093a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	695b      	ldr	r3, [r3, #20]
 800932c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009334:	d11c      	bne.n	8009370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009344:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800934e:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2204      	movs	r2, #4
 8009354:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2200      	movs	r2, #0
 800935a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2220      	movs	r2, #32
 8009360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2200      	movs	r2, #0
 8009368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800936c:	2301      	movs	r3, #1
 800936e:	e03c      	b.n	80093ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009376:	d017      	beq.n	80093a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d007      	beq.n	800938e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 800937e:	f7fe fb4f 	bl	8007a20 <HAL_GetTick>
 8009382:	4602      	mov	r2, r0
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	1ad3      	subs	r3, r2, r3
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	429a      	cmp	r2, r3
 800938c:	d20c      	bcs.n	80093a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2200      	movs	r2, #0
 8009392:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2220      	movs	r2, #32
 8009398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80093a4:	2303      	movs	r3, #3
 80093a6:	e020      	b.n	80093ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	0c1b      	lsrs	r3, r3, #16
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d10c      	bne.n	80093cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	695b      	ldr	r3, [r3, #20]
 80093b8:	43da      	mvns	r2, r3
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	4013      	ands	r3, r2
 80093be:	b29b      	uxth	r3, r3
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	bf14      	ite	ne
 80093c4:	2301      	movne	r3, #1
 80093c6:	2300      	moveq	r3, #0
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	e00b      	b.n	80093e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	699b      	ldr	r3, [r3, #24]
 80093d2:	43da      	mvns	r2, r3
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	4013      	ands	r3, r2
 80093d8:	b29b      	uxth	r3, r3
 80093da:	2b00      	cmp	r3, #0
 80093dc:	bf14      	ite	ne
 80093de:	2301      	movne	r3, #1
 80093e0:	2300      	moveq	r3, #0
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d19e      	bne.n	8009326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b084      	sub	sp, #16
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	60f8      	str	r0, [r7, #12]
 80093fa:	60b9      	str	r1, [r7, #8]
 80093fc:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80093fe:	e029      	b.n	8009454 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f000 f8ba 	bl	800957a <I2C_IsAcknowledgeFailed>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d001      	beq.n	8009410 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	e029      	b.n	8009464 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009416:	d01d      	beq.n	8009454 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d007      	beq.n	800942e <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800941e:	f7fe faff 	bl	8007a20 <HAL_GetTick>
 8009422:	4602      	mov	r2, r0
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	1ad3      	subs	r3, r2, r3
 8009428:	68ba      	ldr	r2, [r7, #8]
 800942a:	429a      	cmp	r2, r3
 800942c:	d212      	bcs.n	8009454 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009432:	f043 0220 	orr.w	r2, r3, #32
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2220      	movs	r2, #32
 8009444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009450:	2303      	movs	r3, #3
 8009452:	e007      	b.n	8009464 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	695b      	ldr	r3, [r3, #20]
 800945a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800945e:	2b80      	cmp	r3, #128	; 0x80
 8009460:	d1ce      	bne.n	8009400 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3710      	adds	r7, #16
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009478:	e029      	b.n	80094ce <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f000 f87d 	bl	800957a <I2C_IsAcknowledgeFailed>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d001      	beq.n	800948a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	e029      	b.n	80094de <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009490:	d01d      	beq.n	80094ce <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d007      	beq.n	80094a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009498:	f7fe fac2 	bl	8007a20 <HAL_GetTick>
 800949c:	4602      	mov	r2, r0
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d212      	bcs.n	80094ce <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ac:	f043 0220 	orr.w	r2, r3, #32
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2200      	movs	r2, #0
 80094b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2220      	movs	r2, #32
 80094be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80094ca:	2303      	movs	r3, #3
 80094cc:	e007      	b.n	80094de <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	695b      	ldr	r3, [r3, #20]
 80094d4:	f003 0304 	and.w	r3, r3, #4
 80094d8:	2b04      	cmp	r3, #4
 80094da:	d1ce      	bne.n	800947a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3710      	adds	r7, #16
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b084      	sub	sp, #16
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	60f8      	str	r0, [r7, #12]
 80094ee:	60b9      	str	r1, [r7, #8]
 80094f0:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80094f2:	e036      	b.n	8009562 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	695b      	ldr	r3, [r3, #20]
 80094fa:	f003 0310 	and.w	r3, r3, #16
 80094fe:	2b10      	cmp	r3, #16
 8009500:	d114      	bne.n	800952c <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f06f 0210 	mvn.w	r2, #16
 800950a:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2200      	movs	r2, #0
 8009510:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2220      	movs	r2, #32
 800951c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	e022      	b.n	8009572 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d007      	beq.n	8009542 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8009532:	f7fe fa75 	bl	8007a20 <HAL_GetTick>
 8009536:	4602      	mov	r2, r0
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	1ad3      	subs	r3, r2, r3
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	429a      	cmp	r2, r3
 8009540:	d20f      	bcs.n	8009562 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009546:	f043 0220 	orr.w	r2, r3, #32
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2220      	movs	r2, #32
 8009552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 800955e:	2303      	movs	r3, #3
 8009560:	e007      	b.n	8009572 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	695b      	ldr	r3, [r3, #20]
 8009568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800956c:	2b40      	cmp	r3, #64	; 0x40
 800956e:	d1c1      	bne.n	80094f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3710      	adds	r7, #16
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800957a:	b480      	push	{r7}
 800957c:	b083      	sub	sp, #12
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	695b      	ldr	r3, [r3, #20]
 8009588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800958c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009590:	d114      	bne.n	80095bc <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800959a:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2204      	movs	r2, #4
 80095a0:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2220      	movs	r2, #32
 80095ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	e000      	b.n	80095be <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	370c      	adds	r7, #12
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
	...

080095cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b08e      	sub	sp, #56	; 0x38
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 uint32_t tickstart = 0U;  
 80095d4:	2300      	movs	r3, #0
 80095d6:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 0301 	and.w	r3, r3, #1
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d050      	beq.n	8009686 <HAL_RCC_OscConfig+0xba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80095e4:	4ba5      	ldr	r3, [pc, #660]	; (800987c <HAL_RCC_OscConfig+0x2b0>)
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	f003 030c 	and.w	r3, r3, #12
 80095ec:	2b04      	cmp	r3, #4
 80095ee:	d00c      	beq.n	800960a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80095f0:	4ba2      	ldr	r3, [pc, #648]	; (800987c <HAL_RCC_OscConfig+0x2b0>)
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80095f8:	2b08      	cmp	r3, #8
 80095fa:	d112      	bne.n	8009622 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80095fc:	4b9f      	ldr	r3, [pc, #636]	; (800987c <HAL_RCC_OscConfig+0x2b0>)
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009604:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009608:	d10b      	bne.n	8009622 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800960a:	4b9c      	ldr	r3, [pc, #624]	; (800987c <HAL_RCC_OscConfig+0x2b0>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009612:	2b00      	cmp	r3, #0
 8009614:	d036      	beq.n	8009684 <HAL_RCC_OscConfig+0xb8>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d132      	bne.n	8009684 <HAL_RCC_OscConfig+0xb8>
      {
        return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e1e0      	b.n	80099e4 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	685a      	ldr	r2, [r3, #4]
 8009626:	4b96      	ldr	r3, [pc, #600]	; (8009880 <HAL_RCC_OscConfig+0x2b4>)
 8009628:	b2d2      	uxtb	r2, r2
 800962a:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d013      	beq.n	800965c <HAL_RCC_OscConfig+0x90>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009634:	f7fe f9f4 	bl	8007a20 <HAL_GetTick>
 8009638:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800963a:	e008      	b.n	800964e <HAL_RCC_OscConfig+0x82>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800963c:	f7fe f9f0 	bl	8007a20 <HAL_GetTick>
 8009640:	4602      	mov	r2, r0
 8009642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009644:	1ad3      	subs	r3, r2, r3
 8009646:	2b64      	cmp	r3, #100	; 0x64
 8009648:	d901      	bls.n	800964e <HAL_RCC_OscConfig+0x82>
          {
            return HAL_TIMEOUT;
 800964a:	2303      	movs	r3, #3
 800964c:	e1ca      	b.n	80099e4 <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800964e:	4b8b      	ldr	r3, [pc, #556]	; (800987c <HAL_RCC_OscConfig+0x2b0>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009656:	2b00      	cmp	r3, #0
 8009658:	d0f0      	beq.n	800963c <HAL_RCC_OscConfig+0x70>
 800965a:	e014      	b.n	8009686 <HAL_RCC_OscConfig+0xba>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800965c:	f7fe f9e0 	bl	8007a20 <HAL_GetTick>
 8009660:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009662:	e008      	b.n	8009676 <HAL_RCC_OscConfig+0xaa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009664:	f7fe f9dc 	bl	8007a20 <HAL_GetTick>
 8009668:	4602      	mov	r2, r0
 800966a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800966c:	1ad3      	subs	r3, r2, r3
 800966e:	2b64      	cmp	r3, #100	; 0x64
 8009670:	d901      	bls.n	8009676 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_TIMEOUT;
 8009672:	2303      	movs	r3, #3
 8009674:	e1b6      	b.n	80099e4 <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009676:	4b81      	ldr	r3, [pc, #516]	; (800987c <HAL_RCC_OscConfig+0x2b0>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800967e:	2b00      	cmp	r3, #0
 8009680:	d1f0      	bne.n	8009664 <HAL_RCC_OscConfig+0x98>
 8009682:	e000      	b.n	8009686 <HAL_RCC_OscConfig+0xba>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f003 0302 	and.w	r3, r3, #2
 800968e:	2b00      	cmp	r3, #0
 8009690:	d077      	beq.n	8009782 <HAL_RCC_OscConfig+0x1b6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009692:	4b7a      	ldr	r3, [pc, #488]	; (800987c <HAL_RCC_OscConfig+0x2b0>)
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f003 030c 	and.w	r3, r3, #12
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00b      	beq.n	80096b6 <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800969e:	4b77      	ldr	r3, [pc, #476]	; (800987c <HAL_RCC_OscConfig+0x2b0>)
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80096a6:	2b08      	cmp	r3, #8
 80096a8:	d126      	bne.n	80096f8 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80096aa:	4b74      	ldr	r3, [pc, #464]	; (800987c <HAL_RCC_OscConfig+0x2b0>)
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d120      	bne.n	80096f8 <HAL_RCC_OscConfig+0x12c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80096b6:	4b71      	ldr	r3, [pc, #452]	; (800987c <HAL_RCC_OscConfig+0x2b0>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 0302 	and.w	r3, r3, #2
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d005      	beq.n	80096ce <HAL_RCC_OscConfig+0x102>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d001      	beq.n	80096ce <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e18a      	b.n	80099e4 <HAL_RCC_OscConfig+0x418>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096ce:	4b6b      	ldr	r3, [pc, #428]	; (800987c <HAL_RCC_OscConfig+0x2b0>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6919      	ldr	r1, [r3, #16]
 80096da:	23f8      	movs	r3, #248	; 0xf8
 80096dc:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e0:	fa93 f3a3 	rbit	r3, r3
 80096e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80096e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e8:	fab3 f383 	clz	r3, r3
 80096ec:	fa01 f303 	lsl.w	r3, r1, r3
 80096f0:	4962      	ldr	r1, [pc, #392]	; (800987c <HAL_RCC_OscConfig+0x2b0>)
 80096f2:	4313      	orrs	r3, r2
 80096f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80096f6:	e044      	b.n	8009782 <HAL_RCC_OscConfig+0x1b6>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d02a      	beq.n	8009756 <HAL_RCC_OscConfig+0x18a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009700:	4b60      	ldr	r3, [pc, #384]	; (8009884 <HAL_RCC_OscConfig+0x2b8>)
 8009702:	2201      	movs	r2, #1
 8009704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009706:	f7fe f98b 	bl	8007a20 <HAL_GetTick>
 800970a:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800970c:	e008      	b.n	8009720 <HAL_RCC_OscConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800970e:	f7fe f987 	bl	8007a20 <HAL_GetTick>
 8009712:	4602      	mov	r2, r0
 8009714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	2b02      	cmp	r3, #2
 800971a:	d901      	bls.n	8009720 <HAL_RCC_OscConfig+0x154>
          {
            return HAL_TIMEOUT;
 800971c:	2303      	movs	r3, #3
 800971e:	e161      	b.n	80099e4 <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009720:	4b56      	ldr	r3, [pc, #344]	; (800987c <HAL_RCC_OscConfig+0x2b0>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f003 0302 	and.w	r3, r3, #2
 8009728:	2b00      	cmp	r3, #0
 800972a:	d0f0      	beq.n	800970e <HAL_RCC_OscConfig+0x142>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800972c:	4b53      	ldr	r3, [pc, #332]	; (800987c <HAL_RCC_OscConfig+0x2b0>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6919      	ldr	r1, [r3, #16]
 8009738:	23f8      	movs	r3, #248	; 0xf8
 800973a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800973c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973e:	fa93 f3a3 	rbit	r3, r3
 8009742:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009746:	fab3 f383 	clz	r3, r3
 800974a:	fa01 f303 	lsl.w	r3, r1, r3
 800974e:	494b      	ldr	r1, [pc, #300]	; (800987c <HAL_RCC_OscConfig+0x2b0>)
 8009750:	4313      	orrs	r3, r2
 8009752:	600b      	str	r3, [r1, #0]
 8009754:	e015      	b.n	8009782 <HAL_RCC_OscConfig+0x1b6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009756:	4b4b      	ldr	r3, [pc, #300]	; (8009884 <HAL_RCC_OscConfig+0x2b8>)
 8009758:	2200      	movs	r2, #0
 800975a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800975c:	f7fe f960 	bl	8007a20 <HAL_GetTick>
 8009760:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009762:	e008      	b.n	8009776 <HAL_RCC_OscConfig+0x1aa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009764:	f7fe f95c 	bl	8007a20 <HAL_GetTick>
 8009768:	4602      	mov	r2, r0
 800976a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	2b02      	cmp	r3, #2
 8009770:	d901      	bls.n	8009776 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009772:	2303      	movs	r3, #3
 8009774:	e136      	b.n	80099e4 <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009776:	4b41      	ldr	r3, [pc, #260]	; (800987c <HAL_RCC_OscConfig+0x2b0>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f003 0302 	and.w	r3, r3, #2
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1f0      	bne.n	8009764 <HAL_RCC_OscConfig+0x198>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 0308 	and.w	r3, r3, #8
 800978a:	2b00      	cmp	r3, #0
 800978c:	d030      	beq.n	80097f0 <HAL_RCC_OscConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	695b      	ldr	r3, [r3, #20]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d016      	beq.n	80097c4 <HAL_RCC_OscConfig+0x1f8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009796:	4b3c      	ldr	r3, [pc, #240]	; (8009888 <HAL_RCC_OscConfig+0x2bc>)
 8009798:	2201      	movs	r2, #1
 800979a:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800979c:	f7fe f940 	bl	8007a20 <HAL_GetTick>
 80097a0:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80097a2:	e008      	b.n	80097b6 <HAL_RCC_OscConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80097a4:	f7fe f93c 	bl	8007a20 <HAL_GetTick>
 80097a8:	4602      	mov	r2, r0
 80097aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ac:	1ad3      	subs	r3, r2, r3
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	d901      	bls.n	80097b6 <HAL_RCC_OscConfig+0x1ea>
        {
          return HAL_TIMEOUT;
 80097b2:	2303      	movs	r3, #3
 80097b4:	e116      	b.n	80099e4 <HAL_RCC_OscConfig+0x418>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80097b6:	4b31      	ldr	r3, [pc, #196]	; (800987c <HAL_RCC_OscConfig+0x2b0>)
 80097b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097ba:	f003 0302 	and.w	r3, r3, #2
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d0f0      	beq.n	80097a4 <HAL_RCC_OscConfig+0x1d8>
 80097c2:	e015      	b.n	80097f0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80097c4:	4b30      	ldr	r3, [pc, #192]	; (8009888 <HAL_RCC_OscConfig+0x2bc>)
 80097c6:	2200      	movs	r2, #0
 80097c8:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097ca:	f7fe f929 	bl	8007a20 <HAL_GetTick>
 80097ce:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80097d0:	e008      	b.n	80097e4 <HAL_RCC_OscConfig+0x218>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80097d2:	f7fe f925 	bl	8007a20 <HAL_GetTick>
 80097d6:	4602      	mov	r2, r0
 80097d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097da:	1ad3      	subs	r3, r2, r3
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d901      	bls.n	80097e4 <HAL_RCC_OscConfig+0x218>
        {
          return HAL_TIMEOUT;
 80097e0:	2303      	movs	r3, #3
 80097e2:	e0ff      	b.n	80099e4 <HAL_RCC_OscConfig+0x418>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80097e4:	4b25      	ldr	r3, [pc, #148]	; (800987c <HAL_RCC_OscConfig+0x2b0>)
 80097e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097e8:	f003 0302 	and.w	r3, r3, #2
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d1f0      	bne.n	80097d2 <HAL_RCC_OscConfig+0x206>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f003 0304 	and.w	r3, r3, #4
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d067      	beq.n	80098cc <HAL_RCC_OscConfig+0x300>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80097fc:	2300      	movs	r3, #0
 80097fe:	60bb      	str	r3, [r7, #8]
 8009800:	4b1e      	ldr	r3, [pc, #120]	; (800987c <HAL_RCC_OscConfig+0x2b0>)
 8009802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009804:	4a1d      	ldr	r2, [pc, #116]	; (800987c <HAL_RCC_OscConfig+0x2b0>)
 8009806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800980a:	6413      	str	r3, [r2, #64]	; 0x40
 800980c:	4b1b      	ldr	r3, [pc, #108]	; (800987c <HAL_RCC_OscConfig+0x2b0>)
 800980e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009814:	60bb      	str	r3, [r7, #8]
 8009816:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009818:	4b1c      	ldr	r3, [pc, #112]	; (800988c <HAL_RCC_OscConfig+0x2c0>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a1b      	ldr	r2, [pc, #108]	; (800988c <HAL_RCC_OscConfig+0x2c0>)
 800981e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009822:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8009824:	f7fe f8fc 	bl	8007a20 <HAL_GetTick>
 8009828:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800982a:	e008      	b.n	800983e <HAL_RCC_OscConfig+0x272>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800982c:	f7fe f8f8 	bl	8007a20 <HAL_GetTick>
 8009830:	4602      	mov	r2, r0
 8009832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009834:	1ad3      	subs	r3, r2, r3
 8009836:	2b02      	cmp	r3, #2
 8009838:	d901      	bls.n	800983e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_TIMEOUT;
 800983a:	2303      	movs	r3, #3
 800983c:	e0d2      	b.n	80099e4 <HAL_RCC_OscConfig+0x418>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800983e:	4b13      	ldr	r3, [pc, #76]	; (800988c <HAL_RCC_OscConfig+0x2c0>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009846:	2b00      	cmp	r3, #0
 8009848:	d0f0      	beq.n	800982c <HAL_RCC_OscConfig+0x260>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	689a      	ldr	r2, [r3, #8]
 800984e:	4b10      	ldr	r3, [pc, #64]	; (8009890 <HAL_RCC_OscConfig+0x2c4>)
 8009850:	b2d2      	uxtb	r2, r2
 8009852:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d022      	beq.n	80098a2 <HAL_RCC_OscConfig+0x2d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800985c:	f7fe f8e0 	bl	8007a20 <HAL_GetTick>
 8009860:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009862:	e017      	b.n	8009894 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009864:	f7fe f8dc 	bl	8007a20 <HAL_GetTick>
 8009868:	4602      	mov	r2, r0
 800986a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800986c:	1ad3      	subs	r3, r2, r3
 800986e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009872:	4293      	cmp	r3, r2
 8009874:	d90e      	bls.n	8009894 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009876:	2303      	movs	r3, #3
 8009878:	e0b4      	b.n	80099e4 <HAL_RCC_OscConfig+0x418>
 800987a:	bf00      	nop
 800987c:	40023800 	.word	0x40023800
 8009880:	40023802 	.word	0x40023802
 8009884:	42470000 	.word	0x42470000
 8009888:	42470e80 	.word	0x42470e80
 800988c:	40007000 	.word	0x40007000
 8009890:	40023870 	.word	0x40023870
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009894:	4b55      	ldr	r3, [pc, #340]	; (80099ec <HAL_RCC_OscConfig+0x420>)
 8009896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009898:	f003 0302 	and.w	r3, r3, #2
 800989c:	2b00      	cmp	r3, #0
 800989e:	d0e1      	beq.n	8009864 <HAL_RCC_OscConfig+0x298>
 80098a0:	e014      	b.n	80098cc <HAL_RCC_OscConfig+0x300>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098a2:	f7fe f8bd 	bl	8007a20 <HAL_GetTick>
 80098a6:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80098a8:	e00a      	b.n	80098c0 <HAL_RCC_OscConfig+0x2f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80098aa:	f7fe f8b9 	bl	8007a20 <HAL_GetTick>
 80098ae:	4602      	mov	r2, r0
 80098b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098b2:	1ad3      	subs	r3, r2, r3
 80098b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d901      	bls.n	80098c0 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 80098bc:	2303      	movs	r3, #3
 80098be:	e091      	b.n	80099e4 <HAL_RCC_OscConfig+0x418>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80098c0:	4b4a      	ldr	r3, [pc, #296]	; (80099ec <HAL_RCC_OscConfig+0x420>)
 80098c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098c4:	f003 0302 	and.w	r3, r3, #2
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1ee      	bne.n	80098aa <HAL_RCC_OscConfig+0x2de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f000 8086 	beq.w	80099e2 <HAL_RCC_OscConfig+0x416>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80098d6:	4b45      	ldr	r3, [pc, #276]	; (80099ec <HAL_RCC_OscConfig+0x420>)
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	f003 030c 	and.w	r3, r3, #12
 80098de:	2b08      	cmp	r3, #8
 80098e0:	d07d      	beq.n	80099de <HAL_RCC_OscConfig+0x412>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	699b      	ldr	r3, [r3, #24]
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d162      	bne.n	80099b0 <HAL_RCC_OscConfig+0x3e4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098ea:	4b41      	ldr	r3, [pc, #260]	; (80099f0 <HAL_RCC_OscConfig+0x424>)
 80098ec:	2200      	movs	r2, #0
 80098ee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098f0:	f7fe f896 	bl	8007a20 <HAL_GetTick>
 80098f4:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098f6:	e008      	b.n	800990a <HAL_RCC_OscConfig+0x33e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098f8:	f7fe f892 	bl	8007a20 <HAL_GetTick>
 80098fc:	4602      	mov	r2, r0
 80098fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009900:	1ad3      	subs	r3, r2, r3
 8009902:	2b02      	cmp	r3, #2
 8009904:	d901      	bls.n	800990a <HAL_RCC_OscConfig+0x33e>
          {
            return HAL_TIMEOUT;
 8009906:	2303      	movs	r3, #3
 8009908:	e06c      	b.n	80099e4 <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800990a:	4b38      	ldr	r3, [pc, #224]	; (80099ec <HAL_RCC_OscConfig+0x420>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1f0      	bne.n	80098f8 <HAL_RCC_OscConfig+0x32c>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	69da      	ldr	r2, [r3, #28]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a1b      	ldr	r3, [r3, #32]
 800991e:	431a      	orrs	r2, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009924:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009928:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	fa93 f3a3 	rbit	r3, r3
 8009930:	60fb      	str	r3, [r7, #12]
  return(result);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	fab3 f383 	clz	r3, r3
 8009938:	fa01 f303 	lsl.w	r3, r1, r3
 800993c:	431a      	orrs	r2, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009942:	085b      	lsrs	r3, r3, #1
 8009944:	1e59      	subs	r1, r3, #1
 8009946:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800994a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	fa93 f3a3 	rbit	r3, r3
 8009952:	617b      	str	r3, [r7, #20]
  return(result);
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	fab3 f383 	clz	r3, r3
 800995a:	fa01 f303 	lsl.w	r3, r1, r3
 800995e:	431a      	orrs	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009964:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8009968:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800996a:	6a3b      	ldr	r3, [r7, #32]
 800996c:	fa93 f3a3 	rbit	r3, r3
 8009970:	61fb      	str	r3, [r7, #28]
  return(result);
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	fab3 f383 	clz	r3, r3
 8009978:	fa01 f303 	lsl.w	r3, r1, r3
 800997c:	491b      	ldr	r1, [pc, #108]	; (80099ec <HAL_RCC_OscConfig+0x420>)
 800997e:	4313      	orrs	r3, r2
 8009980:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009982:	4b1b      	ldr	r3, [pc, #108]	; (80099f0 <HAL_RCC_OscConfig+0x424>)
 8009984:	2201      	movs	r2, #1
 8009986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009988:	f7fe f84a 	bl	8007a20 <HAL_GetTick>
 800998c:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800998e:	e008      	b.n	80099a2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009990:	f7fe f846 	bl	8007a20 <HAL_GetTick>
 8009994:	4602      	mov	r2, r0
 8009996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009998:	1ad3      	subs	r3, r2, r3
 800999a:	2b02      	cmp	r3, #2
 800999c:	d901      	bls.n	80099a2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800999e:	2303      	movs	r3, #3
 80099a0:	e020      	b.n	80099e4 <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80099a2:	4b12      	ldr	r3, [pc, #72]	; (80099ec <HAL_RCC_OscConfig+0x420>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d0f0      	beq.n	8009990 <HAL_RCC_OscConfig+0x3c4>
 80099ae:	e018      	b.n	80099e2 <HAL_RCC_OscConfig+0x416>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099b0:	4b0f      	ldr	r3, [pc, #60]	; (80099f0 <HAL_RCC_OscConfig+0x424>)
 80099b2:	2200      	movs	r2, #0
 80099b4:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099b6:	f7fe f833 	bl	8007a20 <HAL_GetTick>
 80099ba:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099bc:	e008      	b.n	80099d0 <HAL_RCC_OscConfig+0x404>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099be:	f7fe f82f 	bl	8007a20 <HAL_GetTick>
 80099c2:	4602      	mov	r2, r0
 80099c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c6:	1ad3      	subs	r3, r2, r3
 80099c8:	2b02      	cmp	r3, #2
 80099ca:	d901      	bls.n	80099d0 <HAL_RCC_OscConfig+0x404>
          {
            return HAL_TIMEOUT;
 80099cc:	2303      	movs	r3, #3
 80099ce:	e009      	b.n	80099e4 <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099d0:	4b06      	ldr	r3, [pc, #24]	; (80099ec <HAL_RCC_OscConfig+0x420>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1f0      	bne.n	80099be <HAL_RCC_OscConfig+0x3f2>
 80099dc:	e001      	b.n	80099e2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e000      	b.n	80099e4 <HAL_RCC_OscConfig+0x418>
    }
  }
  return HAL_OK;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3738      	adds	r7, #56	; 0x38
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	40023800 	.word	0x40023800
 80099f0:	42470060 	.word	0x42470060

080099f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b086      	sub	sp, #24
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 80099fe:	2300      	movs	r3, #0
 8009a00:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8009a02:	4b81      	ldr	r3, [pc, #516]	; (8009c08 <HAL_RCC_ClockConfig+0x214>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f003 030f 	and.w	r3, r3, #15
 8009a0a:	683a      	ldr	r2, [r7, #0]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d90c      	bls.n	8009a2a <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a10:	4b7d      	ldr	r3, [pc, #500]	; (8009c08 <HAL_RCC_ClockConfig+0x214>)
 8009a12:	683a      	ldr	r2, [r7, #0]
 8009a14:	b2d2      	uxtb	r2, r2
 8009a16:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009a18:	4b7b      	ldr	r3, [pc, #492]	; (8009c08 <HAL_RCC_ClockConfig+0x214>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 030f 	and.w	r3, r3, #15
 8009a20:	683a      	ldr	r2, [r7, #0]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d001      	beq.n	8009a2a <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	e0ea      	b.n	8009c00 <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f003 0302 	and.w	r3, r3, #2
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d008      	beq.n	8009a48 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a36:	4b75      	ldr	r3, [pc, #468]	; (8009c0c <HAL_RCC_ClockConfig+0x218>)
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	4972      	ldr	r1, [pc, #456]	; (8009c0c <HAL_RCC_ClockConfig+0x218>)
 8009a44:	4313      	orrs	r3, r2
 8009a46:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f003 0301 	and.w	r3, r3, #1
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f000 8086 	beq.w	8009b62 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d107      	bne.n	8009a6e <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a5e:	4b6b      	ldr	r3, [pc, #428]	; (8009c0c <HAL_RCC_ClockConfig+0x218>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d119      	bne.n	8009a9e <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e0c8      	b.n	8009c00 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d003      	beq.n	8009a7e <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8009a7a:	2b03      	cmp	r3, #3
 8009a7c:	d107      	bne.n	8009a8e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a7e:	4b63      	ldr	r3, [pc, #396]	; (8009c0c <HAL_RCC_ClockConfig+0x218>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d109      	bne.n	8009a9e <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	e0b8      	b.n	8009c00 <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a8e:	4b5f      	ldr	r3, [pc, #380]	; (8009c0c <HAL_RCC_ClockConfig+0x218>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f003 0302 	and.w	r3, r3, #2
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d101      	bne.n	8009a9e <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	e0b0      	b.n	8009c00 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009a9e:	4b5b      	ldr	r3, [pc, #364]	; (8009c0c <HAL_RCC_ClockConfig+0x218>)
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	f023 0203 	bic.w	r2, r3, #3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	4958      	ldr	r1, [pc, #352]	; (8009c0c <HAL_RCC_ClockConfig+0x218>)
 8009aac:	4313      	orrs	r3, r2
 8009aae:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ab0:	f7fd ffb6 	bl	8007a20 <HAL_GetTick>
 8009ab4:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d112      	bne.n	8009ae4 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009abe:	e00a      	b.n	8009ad6 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ac0:	f7fd ffae 	bl	8007a20 <HAL_GetTick>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d901      	bls.n	8009ad6 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8009ad2:	2303      	movs	r3, #3
 8009ad4:	e094      	b.n	8009c00 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009ad6:	4b4d      	ldr	r3, [pc, #308]	; (8009c0c <HAL_RCC_ClockConfig+0x218>)
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	f003 030c 	and.w	r3, r3, #12
 8009ade:	2b04      	cmp	r3, #4
 8009ae0:	d1ee      	bne.n	8009ac0 <HAL_RCC_ClockConfig+0xcc>
 8009ae2:	e03e      	b.n	8009b62 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	2b02      	cmp	r3, #2
 8009aea:	d112      	bne.n	8009b12 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009aec:	e00a      	b.n	8009b04 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009aee:	f7fd ff97 	bl	8007a20 <HAL_GetTick>
 8009af2:	4602      	mov	r2, r0
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	1ad3      	subs	r3, r2, r3
 8009af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d901      	bls.n	8009b04 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8009b00:	2303      	movs	r3, #3
 8009b02:	e07d      	b.n	8009c00 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009b04:	4b41      	ldr	r3, [pc, #260]	; (8009c0c <HAL_RCC_ClockConfig+0x218>)
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	f003 030c 	and.w	r3, r3, #12
 8009b0c:	2b08      	cmp	r3, #8
 8009b0e:	d1ee      	bne.n	8009aee <HAL_RCC_ClockConfig+0xfa>
 8009b10:	e027      	b.n	8009b62 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	2b03      	cmp	r3, #3
 8009b18:	d11d      	bne.n	8009b56 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8009b1a:	e00a      	b.n	8009b32 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b1c:	f7fd ff80 	bl	8007a20 <HAL_GetTick>
 8009b20:	4602      	mov	r2, r0
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	1ad3      	subs	r3, r2, r3
 8009b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d901      	bls.n	8009b32 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8009b2e:	2303      	movs	r3, #3
 8009b30:	e066      	b.n	8009c00 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8009b32:	4b36      	ldr	r3, [pc, #216]	; (8009c0c <HAL_RCC_ClockConfig+0x218>)
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	f003 030c 	and.w	r3, r3, #12
 8009b3a:	2b0c      	cmp	r3, #12
 8009b3c:	d1ee      	bne.n	8009b1c <HAL_RCC_ClockConfig+0x128>
 8009b3e:	e010      	b.n	8009b62 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b40:	f7fd ff6e 	bl	8007a20 <HAL_GetTick>
 8009b44:	4602      	mov	r2, r0
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	1ad3      	subs	r3, r2, r3
 8009b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d901      	bls.n	8009b56 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8009b52:	2303      	movs	r3, #3
 8009b54:	e054      	b.n	8009c00 <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009b56:	4b2d      	ldr	r3, [pc, #180]	; (8009c0c <HAL_RCC_ClockConfig+0x218>)
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	f003 030c 	and.w	r3, r3, #12
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1ee      	bne.n	8009b40 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8009b62:	4b29      	ldr	r3, [pc, #164]	; (8009c08 <HAL_RCC_ClockConfig+0x214>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f003 030f 	and.w	r3, r3, #15
 8009b6a:	683a      	ldr	r2, [r7, #0]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d20c      	bcs.n	8009b8a <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b70:	4b25      	ldr	r3, [pc, #148]	; (8009c08 <HAL_RCC_ClockConfig+0x214>)
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	b2d2      	uxtb	r2, r2
 8009b76:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009b78:	4b23      	ldr	r3, [pc, #140]	; (8009c08 <HAL_RCC_ClockConfig+0x214>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f003 030f 	and.w	r3, r3, #15
 8009b80:	683a      	ldr	r2, [r7, #0]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d001      	beq.n	8009b8a <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	e03a      	b.n	8009c00 <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f003 0304 	and.w	r3, r3, #4
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d008      	beq.n	8009ba8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009b96:	4b1d      	ldr	r3, [pc, #116]	; (8009c0c <HAL_RCC_ClockConfig+0x218>)
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	491a      	ldr	r1, [pc, #104]	; (8009c0c <HAL_RCC_ClockConfig+0x218>)
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f003 0308 	and.w	r3, r3, #8
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d009      	beq.n	8009bc8 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009bb4:	4b15      	ldr	r3, [pc, #84]	; (8009c0c <HAL_RCC_ClockConfig+0x218>)
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	691b      	ldr	r3, [r3, #16]
 8009bc0:	00db      	lsls	r3, r3, #3
 8009bc2:	4912      	ldr	r1, [pc, #72]	; (8009c0c <HAL_RCC_ClockConfig+0x218>)
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8009bc8:	f000 f826 	bl	8009c18 <HAL_RCC_GetSysClockFreq>
 8009bcc:	4601      	mov	r1, r0
 8009bce:	4b0f      	ldr	r3, [pc, #60]	; (8009c0c <HAL_RCC_ClockConfig+0x218>)
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009bd6:	23f0      	movs	r3, #240	; 0xf0
 8009bd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	fa93 f3a3 	rbit	r3, r3
 8009be0:	60fb      	str	r3, [r7, #12]
  return(result);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	fab3 f383 	clz	r3, r3
 8009be8:	fa22 f303 	lsr.w	r3, r2, r3
 8009bec:	4a08      	ldr	r2, [pc, #32]	; (8009c10 <HAL_RCC_ClockConfig+0x21c>)
 8009bee:	5cd3      	ldrb	r3, [r2, r3]
 8009bf0:	fa21 f303 	lsr.w	r3, r1, r3
 8009bf4:	4a07      	ldr	r2, [pc, #28]	; (8009c14 <HAL_RCC_ClockConfig+0x220>)
 8009bf6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8009bf8:	200f      	movs	r0, #15
 8009bfa:	f7fd fee7 	bl	80079cc <HAL_InitTick>
  
  return HAL_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3718      	adds	r7, #24
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	40023c00 	.word	0x40023c00
 8009c0c:	40023800 	.word	0x40023800
 8009c10:	0800cb54 	.word	0x0800cb54
 8009c14:	200007cc 	.word	0x200007cc

08009c18 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b08b      	sub	sp, #44	; 0x2c
 8009c1c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	61fb      	str	r3, [r7, #28]
 8009c22:	2300      	movs	r3, #0
 8009c24:	627b      	str	r3, [r7, #36]	; 0x24
 8009c26:	2300      	movs	r3, #0
 8009c28:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009c2e:	4b38      	ldr	r3, [pc, #224]	; (8009d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	f003 030c 	and.w	r3, r3, #12
 8009c36:	2b08      	cmp	r3, #8
 8009c38:	d00c      	beq.n	8009c54 <HAL_RCC_GetSysClockFreq+0x3c>
 8009c3a:	2b08      	cmp	r3, #8
 8009c3c:	d85d      	bhi.n	8009cfa <HAL_RCC_GetSysClockFreq+0xe2>
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d002      	beq.n	8009c48 <HAL_RCC_GetSysClockFreq+0x30>
 8009c42:	2b04      	cmp	r3, #4
 8009c44:	d003      	beq.n	8009c4e <HAL_RCC_GetSysClockFreq+0x36>
 8009c46:	e058      	b.n	8009cfa <HAL_RCC_GetSysClockFreq+0xe2>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009c48:	4b32      	ldr	r3, [pc, #200]	; (8009d14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009c4a:	623b      	str	r3, [r7, #32]
       break;
 8009c4c:	e058      	b.n	8009d00 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009c4e:	4b32      	ldr	r3, [pc, #200]	; (8009d18 <HAL_RCC_GetSysClockFreq+0x100>)
 8009c50:	623b      	str	r3, [r7, #32]
      break;
 8009c52:	e055      	b.n	8009d00 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009c54:	4b2e      	ldr	r3, [pc, #184]	; (8009d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c5c:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009c5e:	4b2c      	ldr	r3, [pc, #176]	; (8009d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d017      	beq.n	8009c9a <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8009c6a:	4a2b      	ldr	r2, [pc, #172]	; (8009d18 <HAL_RCC_GetSysClockFreq+0x100>)
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c72:	4b27      	ldr	r3, [pc, #156]	; (8009d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009c74:	6859      	ldr	r1, [r3, #4]
 8009c76:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009c7a:	400b      	ands	r3, r1
 8009c7c:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8009c80:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c82:	6979      	ldr	r1, [r7, #20]
 8009c84:	fa91 f1a1 	rbit	r1, r1
 8009c88:	6139      	str	r1, [r7, #16]
  return(result);
 8009c8a:	6939      	ldr	r1, [r7, #16]
 8009c8c:	fab1 f181 	clz	r1, r1
 8009c90:	40cb      	lsrs	r3, r1
 8009c92:	fb03 f302 	mul.w	r3, r3, r2
 8009c96:	627b      	str	r3, [r7, #36]	; 0x24
 8009c98:	e016      	b.n	8009cc8 <HAL_RCC_GetSysClockFreq+0xb0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8009c9a:	4a1e      	ldr	r2, [pc, #120]	; (8009d14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009ca2:	4b1b      	ldr	r3, [pc, #108]	; (8009d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009ca4:	6859      	ldr	r1, [r3, #4]
 8009ca6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009caa:	400b      	ands	r3, r1
 8009cac:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8009cb0:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cb2:	68f9      	ldr	r1, [r7, #12]
 8009cb4:	fa91 f1a1 	rbit	r1, r1
 8009cb8:	60b9      	str	r1, [r7, #8]
  return(result);
 8009cba:	68b9      	ldr	r1, [r7, #8]
 8009cbc:	fab1 f181 	clz	r1, r1
 8009cc0:	40cb      	lsrs	r3, r1
 8009cc2:	fb03 f302 	mul.w	r3, r3, r2
 8009cc6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8009cc8:	4b11      	ldr	r3, [pc, #68]	; (8009d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009cd0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8009cd4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	fa93 f3a3 	rbit	r3, r3
 8009cdc:	603b      	str	r3, [r7, #0]
  return(result);
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	fab3 f383 	clz	r3, r3
 8009ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ce8:	3301      	adds	r3, #1
 8009cea:	005b      	lsls	r3, r3, #1
 8009cec:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8009cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cf6:	623b      	str	r3, [r7, #32]
      break;
 8009cf8:	e002      	b.n	8009d00 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009cfa:	4b06      	ldr	r3, [pc, #24]	; (8009d14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009cfc:	623b      	str	r3, [r7, #32]
      break;
 8009cfe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009d00:	6a3b      	ldr	r3, [r7, #32]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	372c      	adds	r7, #44	; 0x2c
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	40023800 	.word	0x40023800
 8009d14:	00f42400 	.word	0x00f42400
 8009d18:	017d7840 	.word	0x017d7840

08009d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009d20:	4b03      	ldr	r3, [pc, #12]	; (8009d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8009d22:	681b      	ldr	r3, [r3, #0]
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop
 8009d30:	200007cc 	.word	0x200007cc

08009d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8009d3a:	f7ff ffef 	bl	8009d1c <HAL_RCC_GetHCLKFreq>
 8009d3e:	4601      	mov	r1, r0
 8009d40:	4b0b      	ldr	r3, [pc, #44]	; (8009d70 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009d48:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009d4c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	fa93 f3a3 	rbit	r3, r3
 8009d54:	603b      	str	r3, [r7, #0]
  return(result);
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	fab3 f383 	clz	r3, r3
 8009d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8009d60:	4a04      	ldr	r2, [pc, #16]	; (8009d74 <HAL_RCC_GetPCLK1Freq+0x40>)
 8009d62:	5cd3      	ldrb	r3, [r2, r3]
 8009d64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3708      	adds	r7, #8
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	40023800 	.word	0x40023800
 8009d74:	0800cb54 	.word	0x0800cb54

08009d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8009d7e:	f7ff ffcd 	bl	8009d1c <HAL_RCC_GetHCLKFreq>
 8009d82:	4601      	mov	r1, r0
 8009d84:	4b0b      	ldr	r3, [pc, #44]	; (8009db4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8009d8c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8009d90:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	fa93 f3a3 	rbit	r3, r3
 8009d98:	603b      	str	r3, [r7, #0]
  return(result);
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	fab3 f383 	clz	r3, r3
 8009da0:	fa22 f303 	lsr.w	r3, r2, r3
 8009da4:	4a04      	ldr	r2, [pc, #16]	; (8009db8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8009da6:	5cd3      	ldrb	r3, [r2, r3]
 8009da8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8009dac:	4618      	mov	r0, r3
 8009dae:	3708      	adds	r7, #8
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	40023800 	.word	0x40023800
 8009db8:	0800cb54 	.word	0x0800cb54

08009dbc <HAL_TIM_Base_Start>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2202      	movs	r2, #2
 8009dc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f042 0201 	orr.w	r2, r2, #1
 8009dda:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2201      	movs	r2, #1
 8009de0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	370c      	adds	r7, #12
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr

08009df2 <HAL_TIM_OC_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b082      	sub	sp, #8
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d101      	bne.n	8009e04 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009e00:	2301      	movs	r3, #1
 8009e02:	e01d      	b.n	8009e40 <HAL_TIM_OC_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 
  if(htim->State == HAL_TIM_STATE_RESET)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d106      	bne.n	8009e1e <HAL_TIM_OC_Init+0x2c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f7f7 f88d 	bl	8000f38 <HAL_TIM_OC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2202      	movs	r2, #2
 8009e22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the Output Compare */  
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	4619      	mov	r1, r3
 8009e30:	4610      	mov	r0, r2
 8009e32:	f000 f869 	bl	8009f08 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2201      	movs	r2, #1
 8009e3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3708      	adds	r7, #8
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <HAL_TIM_OC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  
  /* Check input state */
  __HAL_LOCK(htim); 
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d101      	bne.n	8009e62 <HAL_TIM_OC_ConfigChannel+0x1a>
 8009e5e:	2302      	movs	r3, #2
 8009e60:	e04e      	b.n	8009f00 <HAL_TIM_OC_ConfigChannel+0xb8>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2201      	movs	r2, #1
 8009e66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2202      	movs	r2, #2
 8009e6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2b0c      	cmp	r3, #12
 8009e76:	d839      	bhi.n	8009eec <HAL_TIM_OC_ConfigChannel+0xa4>
 8009e78:	a201      	add	r2, pc, #4	; (adr r2, 8009e80 <HAL_TIM_OC_ConfigChannel+0x38>)
 8009e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7e:	bf00      	nop
 8009e80:	08009eb5 	.word	0x08009eb5
 8009e84:	08009eed 	.word	0x08009eed
 8009e88:	08009eed 	.word	0x08009eed
 8009e8c:	08009eed 	.word	0x08009eed
 8009e90:	08009ec3 	.word	0x08009ec3
 8009e94:	08009eed 	.word	0x08009eed
 8009e98:	08009eed 	.word	0x08009eed
 8009e9c:	08009eed 	.word	0x08009eed
 8009ea0:	08009ed1 	.word	0x08009ed1
 8009ea4:	08009eed 	.word	0x08009eed
 8009ea8:	08009eed 	.word	0x08009eed
 8009eac:	08009eed 	.word	0x08009eed
 8009eb0:	08009edf 	.word	0x08009edf
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	68b9      	ldr	r1, [r7, #8]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f000 f916 	bl	800a0ec <TIM_OC1_SetConfig>
    }
    break;
 8009ec0:	e015      	b.n	8009eee <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	68b9      	ldr	r1, [r7, #8]
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f000 f8a1 	bl	800a010 <TIM_OC2_SetConfig>
    }
    break;
 8009ece:	e00e      	b.n	8009eee <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_3:
    {
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	68b9      	ldr	r1, [r7, #8]
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f000 f970 	bl	800a1bc <TIM_OC3_SetConfig>
    }
    break;
 8009edc:	e007      	b.n	8009eee <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	68b9      	ldr	r1, [r7, #8]
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f000 f9d5 	bl	800a294 <TIM_OC4_SetConfig>
    }
    break;
 8009eea:	e000      	b.n	8009eee <HAL_TIM_OC_ConfigChannel+0xa6>
    
    default:
    break;    
 8009eec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim); 
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8009f12:	2300      	movs	r3, #0
 8009f14:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4a35      	ldr	r2, [pc, #212]	; (8009ff4 <TIM_Base_SetConfig+0xec>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d00f      	beq.n	8009f44 <TIM_Base_SetConfig+0x3c>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f2a:	d00b      	beq.n	8009f44 <TIM_Base_SetConfig+0x3c>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4a32      	ldr	r2, [pc, #200]	; (8009ff8 <TIM_Base_SetConfig+0xf0>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d007      	beq.n	8009f44 <TIM_Base_SetConfig+0x3c>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	4a31      	ldr	r2, [pc, #196]	; (8009ffc <TIM_Base_SetConfig+0xf4>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d003      	beq.n	8009f44 <TIM_Base_SetConfig+0x3c>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	4a30      	ldr	r2, [pc, #192]	; (800a000 <TIM_Base_SetConfig+0xf8>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d101      	bne.n	8009f48 <TIM_Base_SetConfig+0x40>
 8009f44:	2301      	movs	r3, #1
 8009f46:	e000      	b.n	8009f4a <TIM_Base_SetConfig+0x42>
 8009f48:	2300      	movs	r3, #0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d008      	beq.n	8009f60 <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a24      	ldr	r2, [pc, #144]	; (8009ff4 <TIM_Base_SetConfig+0xec>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d01b      	beq.n	8009fa0 <TIM_Base_SetConfig+0x98>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f6e:	d017      	beq.n	8009fa0 <TIM_Base_SetConfig+0x98>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a21      	ldr	r2, [pc, #132]	; (8009ff8 <TIM_Base_SetConfig+0xf0>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d013      	beq.n	8009fa0 <TIM_Base_SetConfig+0x98>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a20      	ldr	r2, [pc, #128]	; (8009ffc <TIM_Base_SetConfig+0xf4>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d00f      	beq.n	8009fa0 <TIM_Base_SetConfig+0x98>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4a1f      	ldr	r2, [pc, #124]	; (800a000 <TIM_Base_SetConfig+0xf8>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d00b      	beq.n	8009fa0 <TIM_Base_SetConfig+0x98>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4a1e      	ldr	r2, [pc, #120]	; (800a004 <TIM_Base_SetConfig+0xfc>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d007      	beq.n	8009fa0 <TIM_Base_SetConfig+0x98>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4a1d      	ldr	r2, [pc, #116]	; (800a008 <TIM_Base_SetConfig+0x100>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d003      	beq.n	8009fa0 <TIM_Base_SetConfig+0x98>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4a1c      	ldr	r2, [pc, #112]	; (800a00c <TIM_Base_SetConfig+0x104>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d101      	bne.n	8009fa4 <TIM_Base_SetConfig+0x9c>
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e000      	b.n	8009fa6 <TIM_Base_SetConfig+0x9e>
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d008      	beq.n	8009fbc <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	68fa      	ldr	r2, [r7, #12]
 8009fc0:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	689a      	ldr	r2, [r3, #8]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4a07      	ldr	r2, [pc, #28]	; (8009ff4 <TIM_Base_SetConfig+0xec>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d103      	bne.n	8009fe2 <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	691a      	ldr	r2, [r3, #16]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	615a      	str	r2, [r3, #20]
}
 8009fe8:	bf00      	nop
 8009fea:	3714      	adds	r7, #20
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr
 8009ff4:	40010000 	.word	0x40010000
 8009ff8:	40000400 	.word	0x40000400
 8009ffc:	40000800 	.word	0x40000800
 800a000:	40000c00 	.word	0x40000c00
 800a004:	40014000 	.word	0x40014000
 800a008:	40014400 	.word	0x40014400
 800a00c:	40014800 	.word	0x40014800

0800a010 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a010:	b480      	push	{r7}
 800a012:	b087      	sub	sp, #28
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800a01a:	2300      	movs	r3, #0
 800a01c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800a01e:	2300      	movs	r3, #0
 800a020:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800a022:	2300      	movs	r3, #0
 800a024:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a1b      	ldr	r3, [r3, #32]
 800a02a:	f023 0210 	bic.w	r2, r3, #16
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a1b      	ldr	r3, [r3, #32]
 800a036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	699b      	ldr	r3, [r3, #24]
 800a042:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a04a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a052:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	021b      	lsls	r3, r3, #8
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	4313      	orrs	r3, r2
 800a05e:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	f023 0320 	bic.w	r3, r3, #32
 800a066:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	011b      	lsls	r3, r3, #4
 800a06e:	697a      	ldr	r2, [r7, #20]
 800a070:	4313      	orrs	r3, r2
 800a072:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a1c      	ldr	r2, [pc, #112]	; (800a0e8 <TIM_OC2_SetConfig+0xd8>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d121      	bne.n	800a0c0 <TIM_OC2_SetConfig+0xb0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a082:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	011b      	lsls	r3, r3, #4
 800a08a:	697a      	ldr	r2, [r7, #20]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a096:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a09e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	695b      	ldr	r3, [r3, #20]
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	693a      	ldr	r2, [r7, #16]
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	699b      	ldr	r3, [r3, #24]
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	693a      	ldr	r2, [r7, #16]
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	693a      	ldr	r2, [r7, #16]
 800a0c4:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	685a      	ldr	r2, [r3, #4]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	697a      	ldr	r2, [r7, #20]
 800a0d8:	621a      	str	r2, [r3, #32]
}
 800a0da:	bf00      	nop
 800a0dc:	371c      	adds	r7, #28
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	40010000 	.word	0x40010000

0800a0ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b087      	sub	sp, #28
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 800a0fe:	2300      	movs	r3, #0
 800a100:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6a1b      	ldr	r3, [r3, #32]
 800a106:	f023 0201 	bic.w	r2, r3, #1
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a1b      	ldr	r3, [r3, #32]
 800a112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	699b      	ldr	r3, [r3, #24]
 800a11e:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f023 0303 	bic.w	r3, r3, #3
 800a12e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	68fa      	ldr	r2, [r7, #12]
 800a136:	4313      	orrs	r3, r2
 800a138:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	f023 0302 	bic.w	r3, r3, #2
 800a140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	697a      	ldr	r2, [r7, #20]
 800a148:	4313      	orrs	r3, r2
 800a14a:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4a1a      	ldr	r2, [pc, #104]	; (800a1b8 <TIM_OC1_SetConfig+0xcc>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d11e      	bne.n	800a192 <TIM_OC1_SetConfig+0xa6>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	f023 0308 	bic.w	r3, r3, #8
 800a15a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	697a      	ldr	r2, [r7, #20]
 800a162:	4313      	orrs	r3, r2
 800a164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	f023 0304 	bic.w	r3, r3, #4
 800a16c:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a17c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	695b      	ldr	r3, [r3, #20]
 800a182:	693a      	ldr	r2, [r7, #16]
 800a184:	4313      	orrs	r3, r2
 800a186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	699b      	ldr	r3, [r3, #24]
 800a18c:	693a      	ldr	r2, [r7, #16]
 800a18e:	4313      	orrs	r3, r2
 800a190:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	693a      	ldr	r2, [r7, #16]
 800a196:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	68fa      	ldr	r2, [r7, #12]
 800a19c:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	685a      	ldr	r2, [r3, #4]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	697a      	ldr	r2, [r7, #20]
 800a1aa:	621a      	str	r2, [r3, #32]
} 
 800a1ac:	bf00      	nop
 800a1ae:	371c      	adds	r7, #28
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr
 800a1b8:	40010000 	.word	0x40010000

0800a1bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b087      	sub	sp, #28
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a1b      	ldr	r3, [r3, #32]
 800a1d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a1b      	ldr	r3, [r3, #32]
 800a1e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	69db      	ldr	r3, [r3, #28]
 800a1ee:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f023 0303 	bic.w	r3, r3, #3
 800a1fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	68fa      	ldr	r2, [r7, #12]
 800a206:	4313      	orrs	r3, r2
 800a208:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	021b      	lsls	r3, r3, #8
 800a218:	697a      	ldr	r2, [r7, #20]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4a1b      	ldr	r2, [pc, #108]	; (800a290 <TIM_OC3_SetConfig+0xd4>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d121      	bne.n	800a26a <TIM_OC3_SetConfig+0xae>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a22c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	021b      	lsls	r3, r3, #8
 800a234:	697a      	ldr	r2, [r7, #20]
 800a236:	4313      	orrs	r3, r2
 800a238:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a240:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	695b      	ldr	r3, [r3, #20]
 800a256:	011b      	lsls	r3, r3, #4
 800a258:	693a      	ldr	r2, [r7, #16]
 800a25a:	4313      	orrs	r3, r2
 800a25c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	699b      	ldr	r3, [r3, #24]
 800a262:	011b      	lsls	r3, r3, #4
 800a264:	693a      	ldr	r2, [r7, #16]
 800a266:	4313      	orrs	r3, r2
 800a268:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	693a      	ldr	r2, [r7, #16]
 800a26e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	685a      	ldr	r2, [r3, #4]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	697a      	ldr	r2, [r7, #20]
 800a282:	621a      	str	r2, [r3, #32]
}
 800a284:	bf00      	nop
 800a286:	371c      	adds	r7, #28
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr
 800a290:	40010000 	.word	0x40010000

0800a294 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a294:	b480      	push	{r7}
 800a296:	b087      	sub	sp, #28
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a1b      	ldr	r3, [r3, #32]
 800a2ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a1b      	ldr	r3, [r3, #32]
 800a2ba:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	69db      	ldr	r3, [r3, #28]
 800a2c6:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2ce:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2d6:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	021b      	lsls	r3, r3, #8
 800a2de:	693a      	ldr	r2, [r7, #16]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2ea:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	031b      	lsls	r3, r3, #12
 800a2f2:	68fa      	ldr	r2, [r7, #12]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4a10      	ldr	r2, [pc, #64]	; (800a33c <TIM_OC4_SetConfig+0xa8>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d109      	bne.n	800a314 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a306:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	695b      	ldr	r3, [r3, #20]
 800a30c:	019b      	lsls	r3, r3, #6
 800a30e:	697a      	ldr	r2, [r7, #20]
 800a310:	4313      	orrs	r3, r2
 800a312:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	697a      	ldr	r2, [r7, #20]
 800a318:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	693a      	ldr	r2, [r7, #16]
 800a31e:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	685a      	ldr	r2, [r3, #4]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	68fa      	ldr	r2, [r7, #12]
 800a32c:	621a      	str	r2, [r3, #32]
}
 800a32e:	bf00      	nop
 800a330:	371c      	adds	r7, #28
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr
 800a33a:	bf00      	nop
 800a33c:	40010000 	.word	0x40010000

0800a340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a350:	2b01      	cmp	r3, #1
 800a352:	d101      	bne.n	800a358 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a354:	2302      	movs	r3, #2
 800a356:	e032      	b.n	800a3be <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2202      	movs	r2, #2
 800a364:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	685a      	ldr	r2, [r3, #4]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a376:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	6859      	ldr	r1, [r3, #4]
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	430a      	orrs	r2, r1
 800a388:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	689a      	ldr	r2, [r3, #8]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a398:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	6899      	ldr	r1, [r3, #8]
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	685a      	ldr	r2, [r3, #4]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	430a      	orrs	r2, r1
 800a3aa:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800a3bc:	2300      	movs	r3, #0
} 
 800a3be:	4618      	mov	r0, r3
 800a3c0:	370c      	adds	r7, #12
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr

0800a3ca <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b082      	sub	sp, #8
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d101      	bne.n	800a3dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	e03f      	b.n	800a45c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d106      	bne.n	800a3f6 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f7f7 f9ab 	bl	800174c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2224      	movs	r2, #36	; 0x24
 800a3fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	68da      	ldr	r2, [r3, #12]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a40c:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 fb5c 	bl	800aacc <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	691a      	ldr	r2, [r3, #16]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a422:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	695a      	ldr	r2, [r3, #20]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a432:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	68da      	ldr	r2, [r3, #12]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a442:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2220      	movs	r2, #32
 800a44e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2220      	movs	r2, #32
 800a456:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3708      	adds	r7, #8
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <HAL_UART_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b086      	sub	sp, #24
 800a468:	af00      	add	r7, sp, #0
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	4613      	mov	r3, r2
 800a470:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	2b20      	cmp	r3, #32
 800a47c:	d153      	bne.n	800a526 <HAL_UART_Transmit_DMA+0xc2>
  {
    if((pData == NULL ) || (Size == 0U))
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d002      	beq.n	800a48a <HAL_UART_Transmit_DMA+0x26>
 800a484:	88fb      	ldrh	r3, [r7, #6]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d101      	bne.n	800a48e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e04c      	b.n	800a528 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a494:	2b01      	cmp	r3, #1
 800a496:	d101      	bne.n	800a49c <HAL_UART_Transmit_DMA+0x38>
 800a498:	2302      	movs	r3, #2
 800a49a:	e045      	b.n	800a528 <HAL_UART_Transmit_DMA+0xc4>
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800a4a4:	68ba      	ldr	r2, [r7, #8]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	88fa      	ldrh	r2, [r7, #6]
 800a4ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	88fa      	ldrh	r2, [r7, #6]
 800a4b4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2221      	movs	r2, #33	; 0x21
 800a4c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c8:	4a19      	ldr	r2, [pc, #100]	; (800a530 <HAL_UART_Transmit_DMA+0xcc>)
 800a4ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d0:	4a18      	ldr	r2, [pc, #96]	; (800a534 <HAL_UART_Transmit_DMA+0xd0>)
 800a4d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d8:	4a17      	ldr	r2, [pc, #92]	; (800a538 <HAL_UART_Transmit_DMA+0xd4>)
 800a4da:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
 800a4e4:	f107 0308 	add.w	r3, r7, #8
 800a4e8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	6819      	ldr	r1, [r3, #0]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	3304      	adds	r3, #4
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	88fb      	ldrh	r3, [r7, #6]
 800a4fc:	f7fd fc78 	bl	8007df0 <HAL_DMA_Start_IT>
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a508:	601a      	str	r2, [r3, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	695a      	ldr	r2, [r3, #20]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a520:	615a      	str	r2, [r3, #20]
    
    return HAL_OK;
 800a522:	2300      	movs	r3, #0
 800a524:	e000      	b.n	800a528 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800a526:	2302      	movs	r3, #2
  }
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3718      	adds	r7, #24
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	0800a76d 	.word	0x0800a76d
 800a534:	0800a7bf 	.word	0x0800a7bf
 800a538:	0800a7db 	.word	0x0800a7db

0800a53c <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b088      	sub	sp, #32
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	695b      	ldr	r3, [r3, #20]
 800a55a:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 800a55c:	2300      	movs	r3, #0
 800a55e:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 800a560:	2300      	movs	r3, #0
 800a562:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	f003 030f 	and.w	r3, r3, #15
 800a56a:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d10d      	bne.n	800a58e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	f003 0320 	and.w	r3, r3, #32
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d008      	beq.n	800a58e <HAL_UART_IRQHandler+0x52>
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	f003 0320 	and.w	r3, r3, #32
 800a582:	2b00      	cmp	r3, #0
 800a584:	d003      	beq.n	800a58e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 fa27 	bl	800a9da <UART_Receive_IT>
      return;
 800a58c:	e0cb      	b.n	800a726 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	2b00      	cmp	r3, #0
 800a592:	f000 80ab 	beq.w	800a6ec <HAL_UART_IRQHandler+0x1b0>
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	f003 0301 	and.w	r3, r3, #1
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d105      	bne.n	800a5ac <HAL_UART_IRQHandler+0x70>
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	f000 80a0 	beq.w	800a6ec <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	f003 0301 	and.w	r3, r3, #1
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00a      	beq.n	800a5cc <HAL_UART_IRQHandler+0x90>
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d005      	beq.n	800a5cc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5c4:	f043 0201 	orr.w	r2, r3, #1
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	f003 0304 	and.w	r3, r3, #4
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d00a      	beq.n	800a5ec <HAL_UART_IRQHandler+0xb0>
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	f003 0301 	and.w	r3, r3, #1
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d005      	beq.n	800a5ec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5e4:	f043 0202 	orr.w	r2, r3, #2
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	f003 0302 	and.w	r3, r3, #2
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d00a      	beq.n	800a60c <HAL_UART_IRQHandler+0xd0>
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	f003 0301 	and.w	r3, r3, #1
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d005      	beq.n	800a60c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a604:	f043 0204 	orr.w	r2, r3, #4
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	f003 0308 	and.w	r3, r3, #8
 800a612:	2b00      	cmp	r3, #0
 800a614:	d00a      	beq.n	800a62c <HAL_UART_IRQHandler+0xf0>
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	f003 0301 	and.w	r3, r3, #1
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d005      	beq.n	800a62c <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a624:	f043 0208 	orr.w	r2, r3, #8
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a630:	2b00      	cmp	r3, #0
 800a632:	d077      	beq.n	800a724 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a634:	69fb      	ldr	r3, [r7, #28]
 800a636:	f003 0320 	and.w	r3, r3, #32
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d007      	beq.n	800a64e <HAL_UART_IRQHandler+0x112>
 800a63e:	69bb      	ldr	r3, [r7, #24]
 800a640:	f003 0320 	and.w	r3, r3, #32
 800a644:	2b00      	cmp	r3, #0
 800a646:	d002      	beq.n	800a64e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 f9c6 	bl	800a9da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	695b      	ldr	r3, [r3, #20]
 800a654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a658:	2b00      	cmp	r3, #0
 800a65a:	bf14      	ite	ne
 800a65c:	2301      	movne	r3, #1
 800a65e:	2300      	moveq	r3, #0
 800a660:	b2db      	uxtb	r3, r3
 800a662:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a668:	f003 0308 	and.w	r3, r3, #8
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d102      	bne.n	800a676 <HAL_UART_IRQHandler+0x13a>
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d031      	beq.n	800a6da <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f90f 	bl	800a89a <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	695b      	ldr	r3, [r3, #20]
 800a682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a686:	2b00      	cmp	r3, #0
 800a688:	d023      	beq.n	800a6d2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	695a      	ldr	r2, [r3, #20]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a698:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d013      	beq.n	800a6ca <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6a6:	4a21      	ldr	r2, [pc, #132]	; (800a72c <HAL_UART_IRQHandler+0x1f0>)
 800a6a8:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7fd fbfe 	bl	8007eb0 <HAL_DMA_Abort_IT>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d016      	beq.n	800a6e8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a6c4:	4610      	mov	r0, r2
 800a6c6:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6c8:	e00e      	b.n	800a6e8 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 f844 	bl	800a758 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6d0:	e00a      	b.n	800a6e8 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 f840 	bl	800a758 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6d8:	e006      	b.n	800a6e8 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 f83c 	bl	800a758 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a6e6:	e01d      	b.n	800a724 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6e8:	bf00      	nop
    return;
 800a6ea:	e01b      	b.n	800a724 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d008      	beq.n	800a708 <HAL_UART_IRQHandler+0x1cc>
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d003      	beq.n	800a708 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 f8fc 	bl	800a8fe <UART_Transmit_IT>
    return;
 800a706:	e00e      	b.n	800a726 <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d009      	beq.n	800a726 <HAL_UART_IRQHandler+0x1ea>
 800a712:	69bb      	ldr	r3, [r7, #24]
 800a714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d004      	beq.n	800a726 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 f944 	bl	800a9aa <UART_EndTransmit_IT>
    return;
 800a722:	e000      	b.n	800a726 <HAL_UART_IRQHandler+0x1ea>
    return;
 800a724:	bf00      	nop
  }
}
 800a726:	3720      	adds	r7, #32
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	0800a8d7 	.word	0x0800a8d7

0800a730 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 800a738:	bf00      	nop
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a74c:	bf00      	nop
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 800a760:	bf00      	nop
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <UART_DMATransmitCplt>:
  * @brief  DMA UART transmit process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a778:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a784:	2b00      	cmp	r3, #0
 800a786:	d113      	bne.n	800a7b0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	695a      	ldr	r2, [r3, #20]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a79c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	68da      	ldr	r2, [r3, #12]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7ac:	60da      	str	r2, [r3, #12]
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }
}
 800a7ae:	e002      	b.n	800a7b6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f7f6 ff05 	bl	80015c0 <HAL_UART_TxCpltCallback>
}
 800a7b6:	bf00      	nop
 800a7b8:	3710      	adds	r7, #16
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <UART_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b084      	sub	sp, #16
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ca:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 800a7cc:	68f8      	ldr	r0, [r7, #12]
 800a7ce:	f7ff ffaf 	bl	800a730 <HAL_UART_TxHalfCpltCallback>
}
 800a7d2:	bf00      	nop
 800a7d4:	3710      	adds	r7, #16
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b084      	sub	sp, #16
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ea:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	695b      	ldr	r3, [r3, #20]
 800a7f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	bf14      	ite	ne
 800a7fa:	2301      	movne	r3, #1
 800a7fc:	2300      	moveq	r3, #0
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a808:	b2db      	uxtb	r3, r3
 800a80a:	2b21      	cmp	r3, #33	; 0x21
 800a80c:	d108      	bne.n	800a820 <UART_DMAError+0x46>
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d005      	beq.n	800a820 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	2200      	movs	r2, #0
 800a818:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a81a:	68b8      	ldr	r0, [r7, #8]
 800a81c:	f000 f827 	bl	800a86e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	695b      	ldr	r3, [r3, #20]
 800a826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	bf14      	ite	ne
 800a82e:	2301      	movne	r3, #1
 800a830:	2300      	moveq	r3, #0
 800a832:	b2db      	uxtb	r3, r3
 800a834:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	2b22      	cmp	r3, #34	; 0x22
 800a840:	d108      	bne.n	800a854 <UART_DMAError+0x7a>
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d005      	beq.n	800a854 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	2200      	movs	r2, #0
 800a84c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a84e:	68b8      	ldr	r0, [r7, #8]
 800a850:	f000 f823 	bl	800a89a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a858:	f043 0210 	orr.w	r2, r3, #16
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800a860:	68b8      	ldr	r0, [r7, #8]
 800a862:	f7ff ff79 	bl	800a758 <HAL_UART_ErrorCallback>
}
 800a866:	bf00      	nop
 800a868:	3710      	adds	r7, #16
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a86e:	b480      	push	{r7}
 800a870:	b083      	sub	sp, #12
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	68da      	ldr	r2, [r3, #12]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a884:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2220      	movs	r2, #32
 800a88a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800a88e:	bf00      	nop
 800a890:	370c      	adds	r7, #12
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr

0800a89a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a89a:	b480      	push	{r7}
 800a89c:	b083      	sub	sp, #12
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	68da      	ldr	r2, [r3, #12]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a8b0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	695a      	ldr	r2, [r3, #20]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f022 0201 	bic.w	r2, r2, #1
 800a8c0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2220      	movs	r2, #32
 800a8c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a8ca:	bf00      	nop
 800a8cc:	370c      	adds	r7, #12
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr

0800a8d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b084      	sub	sp, #16
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 800a8f0:	68f8      	ldr	r0, [r7, #12]
 800a8f2:	f7ff ff31 	bl	800a758 <HAL_UART_ErrorCallback>
}
 800a8f6:	bf00      	nop
 800a8f8:	3710      	adds	r7, #16
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a8fe:	b480      	push	{r7}
 800a900:	b085      	sub	sp, #20
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	2b21      	cmp	r3, #33	; 0x21
 800a910:	d144      	bne.n	800a99c <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a91a:	d11a      	bne.n	800a952 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6a1b      	ldr	r3, [r3, #32]
 800a920:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FFU);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	881b      	ldrh	r3, [r3, #0]
 800a926:	461a      	mov	r2, r3
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a930:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	691b      	ldr	r3, [r3, #16]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d105      	bne.n	800a946 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6a1b      	ldr	r3, [r3, #32]
 800a93e:	1c9a      	adds	r2, r3, #2
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	621a      	str	r2, [r3, #32]
 800a944:	e00e      	b.n	800a964 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6a1b      	ldr	r3, [r3, #32]
 800a94a:	1c5a      	adds	r2, r3, #1
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	621a      	str	r2, [r3, #32]
 800a950:	e008      	b.n	800a964 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FFU);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6a1b      	ldr	r3, [r3, #32]
 800a956:	1c59      	adds	r1, r3, #1
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	6211      	str	r1, [r2, #32]
 800a95c:	781a      	ldrb	r2, [r3, #0]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a968:	b29b      	uxth	r3, r3
 800a96a:	3b01      	subs	r3, #1
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	4619      	mov	r1, r3
 800a972:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a974:	2b00      	cmp	r3, #0
 800a976:	d10f      	bne.n	800a998 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	68da      	ldr	r2, [r3, #12]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a986:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	68da      	ldr	r2, [r3, #12]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a996:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a998:	2300      	movs	r3, #0
 800a99a:	e000      	b.n	800a99e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a99c:	2302      	movs	r3, #2
  }
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3714      	adds	r7, #20
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr

0800a9aa <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b082      	sub	sp, #8
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	68da      	ldr	r2, [r3, #12]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9c0:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2220      	movs	r2, #32
 800a9c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f7f6 fdf8 	bl	80015c0 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 800a9d0:	2300      	movs	r3, #0
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3708      	adds	r7, #8
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}

0800a9da <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a9da:	b580      	push	{r7, lr}
 800a9dc:	b084      	sub	sp, #16
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	2b22      	cmp	r3, #34	; 0x22
 800a9ec:	d169      	bne.n	800aac2 <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9f6:	d123      	bne.n	800aa40 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9fc:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	691b      	ldr	r3, [r3, #16]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d10e      	bne.n	800aa24 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa12:	b29a      	uxth	r2, r3
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa1c:	1c9a      	adds	r2, r3, #2
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	629a      	str	r2, [r3, #40]	; 0x28
 800aa22:	e029      	b.n	800aa78 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FFU);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	b29a      	uxth	r2, r3
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa38:	1c5a      	adds	r2, r3, #1
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	629a      	str	r2, [r3, #40]	; 0x28
 800aa3e:	e01b      	b.n	800aa78 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	691b      	ldr	r3, [r3, #16]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10a      	bne.n	800aa5e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FFU);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	6858      	ldr	r0, [r3, #4]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa52:	1c59      	adds	r1, r3, #1
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	6291      	str	r1, [r2, #40]	; 0x28
 800aa58:	b2c2      	uxtb	r2, r0
 800aa5a:	701a      	strb	r2, [r3, #0]
 800aa5c:	e00c      	b.n	800aa78 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	b2da      	uxtb	r2, r3
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa6a:	1c58      	adds	r0, r3, #1
 800aa6c:	6879      	ldr	r1, [r7, #4]
 800aa6e:	6288      	str	r0, [r1, #40]	; 0x28
 800aa70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800aa74:	b2d2      	uxtb	r2, r2
 800aa76:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	4619      	mov	r1, r3
 800aa86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d118      	bne.n	800aabe <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	68da      	ldr	r2, [r3, #12]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aa9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	695a      	ldr	r2, [r3, #20]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f022 0201 	bic.w	r2, r2, #1
 800aaaa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2220      	movs	r2, #32
 800aab0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f7ff fe45 	bl	800a744 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800aaba:	2300      	movs	r3, #0
 800aabc:	e002      	b.n	800aac4 <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 800aabe:	2300      	movs	r3, #0
 800aac0:	e000      	b.n	800aac4 <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 800aac2:	2302      	movs	r3, #2
  }
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aacc:	b5b0      	push	{r4, r5, r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800aad4:	2300      	movs	r3, #0
 800aad6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	691b      	ldr	r3, [r3, #16]
 800aade:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800aae6:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	68fa      	ldr	r2, [r7, #12]
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	68fa      	ldr	r2, [r7, #12]
 800aaf8:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ab08:	f023 030c 	bic.w	r3, r3, #12
 800ab0c:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	689a      	ldr	r2, [r3, #8]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	691b      	ldr	r3, [r3, #16]
 800ab16:	431a      	orrs	r2, r3
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	695b      	ldr	r3, [r3, #20]
 800ab1c:	431a      	orrs	r2, r3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	69db      	ldr	r3, [r3, #28]
 800ab22:	4313      	orrs	r3, r2
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	68fa      	ldr	r2, [r7, #12]
 800ab30:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	695b      	ldr	r3, [r3, #20]
 800ab38:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab40:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	699b      	ldr	r3, [r3, #24]
 800ab46:	68fa      	ldr	r2, [r7, #12]
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	69db      	ldr	r3, [r3, #28]
 800ab58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab5c:	f040 80e4 	bne.w	800ad28 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4aab      	ldr	r2, [pc, #684]	; (800ae14 <UART_SetConfig+0x348>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d004      	beq.n	800ab74 <UART_SetConfig+0xa8>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4aaa      	ldr	r2, [pc, #680]	; (800ae18 <UART_SetConfig+0x34c>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d16c      	bne.n	800ac4e <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800ab74:	f7ff f900 	bl	8009d78 <HAL_RCC_GetPCLK2Freq>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	4413      	add	r3, r2
 800ab80:	009a      	lsls	r2, r3, #2
 800ab82:	441a      	add	r2, r3
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	005b      	lsls	r3, r3, #1
 800ab8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab8e:	4aa3      	ldr	r2, [pc, #652]	; (800ae1c <UART_SetConfig+0x350>)
 800ab90:	fba2 2303 	umull	r2, r3, r2, r3
 800ab94:	095b      	lsrs	r3, r3, #5
 800ab96:	011c      	lsls	r4, r3, #4
 800ab98:	f7ff f8ee 	bl	8009d78 <HAL_RCC_GetPCLK2Freq>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	4613      	mov	r3, r2
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	4413      	add	r3, r2
 800aba4:	009a      	lsls	r2, r3, #2
 800aba6:	441a      	add	r2, r3
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	005b      	lsls	r3, r3, #1
 800abae:	fbb2 f5f3 	udiv	r5, r2, r3
 800abb2:	f7ff f8e1 	bl	8009d78 <HAL_RCC_GetPCLK2Freq>
 800abb6:	4602      	mov	r2, r0
 800abb8:	4613      	mov	r3, r2
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	4413      	add	r3, r2
 800abbe:	009a      	lsls	r2, r3, #2
 800abc0:	441a      	add	r2, r3
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	005b      	lsls	r3, r3, #1
 800abc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800abcc:	4a93      	ldr	r2, [pc, #588]	; (800ae1c <UART_SetConfig+0x350>)
 800abce:	fba2 2303 	umull	r2, r3, r2, r3
 800abd2:	095b      	lsrs	r3, r3, #5
 800abd4:	2264      	movs	r2, #100	; 0x64
 800abd6:	fb02 f303 	mul.w	r3, r2, r3
 800abda:	1aeb      	subs	r3, r5, r3
 800abdc:	00db      	lsls	r3, r3, #3
 800abde:	3332      	adds	r3, #50	; 0x32
 800abe0:	4a8e      	ldr	r2, [pc, #568]	; (800ae1c <UART_SetConfig+0x350>)
 800abe2:	fba2 2303 	umull	r2, r3, r2, r3
 800abe6:	095b      	lsrs	r3, r3, #5
 800abe8:	005b      	lsls	r3, r3, #1
 800abea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800abee:	441c      	add	r4, r3
 800abf0:	f7ff f8c2 	bl	8009d78 <HAL_RCC_GetPCLK2Freq>
 800abf4:	4602      	mov	r2, r0
 800abf6:	4613      	mov	r3, r2
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	4413      	add	r3, r2
 800abfc:	009a      	lsls	r2, r3, #2
 800abfe:	441a      	add	r2, r3
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	005b      	lsls	r3, r3, #1
 800ac06:	fbb2 f5f3 	udiv	r5, r2, r3
 800ac0a:	f7ff f8b5 	bl	8009d78 <HAL_RCC_GetPCLK2Freq>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	4613      	mov	r3, r2
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	4413      	add	r3, r2
 800ac16:	009a      	lsls	r2, r3, #2
 800ac18:	441a      	add	r2, r3
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	005b      	lsls	r3, r3, #1
 800ac20:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac24:	4a7d      	ldr	r2, [pc, #500]	; (800ae1c <UART_SetConfig+0x350>)
 800ac26:	fba2 2303 	umull	r2, r3, r2, r3
 800ac2a:	095b      	lsrs	r3, r3, #5
 800ac2c:	2264      	movs	r2, #100	; 0x64
 800ac2e:	fb02 f303 	mul.w	r3, r2, r3
 800ac32:	1aeb      	subs	r3, r5, r3
 800ac34:	00db      	lsls	r3, r3, #3
 800ac36:	3332      	adds	r3, #50	; 0x32
 800ac38:	4a78      	ldr	r2, [pc, #480]	; (800ae1c <UART_SetConfig+0x350>)
 800ac3a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac3e:	095b      	lsrs	r3, r3, #5
 800ac40:	f003 0207 	and.w	r2, r3, #7
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4422      	add	r2, r4
 800ac4a:	609a      	str	r2, [r3, #8]
 800ac4c:	e154      	b.n	800aef8 <UART_SetConfig+0x42c>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800ac4e:	f7ff f871 	bl	8009d34 <HAL_RCC_GetPCLK1Freq>
 800ac52:	4602      	mov	r2, r0
 800ac54:	4613      	mov	r3, r2
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	4413      	add	r3, r2
 800ac5a:	009a      	lsls	r2, r3, #2
 800ac5c:	441a      	add	r2, r3
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	005b      	lsls	r3, r3, #1
 800ac64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac68:	4a6c      	ldr	r2, [pc, #432]	; (800ae1c <UART_SetConfig+0x350>)
 800ac6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac6e:	095b      	lsrs	r3, r3, #5
 800ac70:	011c      	lsls	r4, r3, #4
 800ac72:	f7ff f85f 	bl	8009d34 <HAL_RCC_GetPCLK1Freq>
 800ac76:	4602      	mov	r2, r0
 800ac78:	4613      	mov	r3, r2
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	4413      	add	r3, r2
 800ac7e:	009a      	lsls	r2, r3, #2
 800ac80:	441a      	add	r2, r3
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	005b      	lsls	r3, r3, #1
 800ac88:	fbb2 f5f3 	udiv	r5, r2, r3
 800ac8c:	f7ff f852 	bl	8009d34 <HAL_RCC_GetPCLK1Freq>
 800ac90:	4602      	mov	r2, r0
 800ac92:	4613      	mov	r3, r2
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4413      	add	r3, r2
 800ac98:	009a      	lsls	r2, r3, #2
 800ac9a:	441a      	add	r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	005b      	lsls	r3, r3, #1
 800aca2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aca6:	4a5d      	ldr	r2, [pc, #372]	; (800ae1c <UART_SetConfig+0x350>)
 800aca8:	fba2 2303 	umull	r2, r3, r2, r3
 800acac:	095b      	lsrs	r3, r3, #5
 800acae:	2264      	movs	r2, #100	; 0x64
 800acb0:	fb02 f303 	mul.w	r3, r2, r3
 800acb4:	1aeb      	subs	r3, r5, r3
 800acb6:	00db      	lsls	r3, r3, #3
 800acb8:	3332      	adds	r3, #50	; 0x32
 800acba:	4a58      	ldr	r2, [pc, #352]	; (800ae1c <UART_SetConfig+0x350>)
 800acbc:	fba2 2303 	umull	r2, r3, r2, r3
 800acc0:	095b      	lsrs	r3, r3, #5
 800acc2:	005b      	lsls	r3, r3, #1
 800acc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800acc8:	441c      	add	r4, r3
 800acca:	f7ff f833 	bl	8009d34 <HAL_RCC_GetPCLK1Freq>
 800acce:	4602      	mov	r2, r0
 800acd0:	4613      	mov	r3, r2
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	4413      	add	r3, r2
 800acd6:	009a      	lsls	r2, r3, #2
 800acd8:	441a      	add	r2, r3
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	005b      	lsls	r3, r3, #1
 800ace0:	fbb2 f5f3 	udiv	r5, r2, r3
 800ace4:	f7ff f826 	bl	8009d34 <HAL_RCC_GetPCLK1Freq>
 800ace8:	4602      	mov	r2, r0
 800acea:	4613      	mov	r3, r2
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	4413      	add	r3, r2
 800acf0:	009a      	lsls	r2, r3, #2
 800acf2:	441a      	add	r2, r3
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	005b      	lsls	r3, r3, #1
 800acfa:	fbb2 f3f3 	udiv	r3, r2, r3
 800acfe:	4a47      	ldr	r2, [pc, #284]	; (800ae1c <UART_SetConfig+0x350>)
 800ad00:	fba2 2303 	umull	r2, r3, r2, r3
 800ad04:	095b      	lsrs	r3, r3, #5
 800ad06:	2264      	movs	r2, #100	; 0x64
 800ad08:	fb02 f303 	mul.w	r3, r2, r3
 800ad0c:	1aeb      	subs	r3, r5, r3
 800ad0e:	00db      	lsls	r3, r3, #3
 800ad10:	3332      	adds	r3, #50	; 0x32
 800ad12:	4a42      	ldr	r2, [pc, #264]	; (800ae1c <UART_SetConfig+0x350>)
 800ad14:	fba2 2303 	umull	r2, r3, r2, r3
 800ad18:	095b      	lsrs	r3, r3, #5
 800ad1a:	f003 0207 	and.w	r2, r3, #7
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4422      	add	r2, r4
 800ad24:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800ad26:	e0e7      	b.n	800aef8 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a39      	ldr	r2, [pc, #228]	; (800ae14 <UART_SetConfig+0x348>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d004      	beq.n	800ad3c <UART_SetConfig+0x270>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a38      	ldr	r2, [pc, #224]	; (800ae18 <UART_SetConfig+0x34c>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d171      	bne.n	800ae20 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800ad3c:	f7ff f81c 	bl	8009d78 <HAL_RCC_GetPCLK2Freq>
 800ad40:	4602      	mov	r2, r0
 800ad42:	4613      	mov	r3, r2
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	4413      	add	r3, r2
 800ad48:	009a      	lsls	r2, r3, #2
 800ad4a:	441a      	add	r2, r3
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad56:	4a31      	ldr	r2, [pc, #196]	; (800ae1c <UART_SetConfig+0x350>)
 800ad58:	fba2 2303 	umull	r2, r3, r2, r3
 800ad5c:	095b      	lsrs	r3, r3, #5
 800ad5e:	011c      	lsls	r4, r3, #4
 800ad60:	f7ff f80a 	bl	8009d78 <HAL_RCC_GetPCLK2Freq>
 800ad64:	4602      	mov	r2, r0
 800ad66:	4613      	mov	r3, r2
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	4413      	add	r3, r2
 800ad6c:	009a      	lsls	r2, r3, #2
 800ad6e:	441a      	add	r2, r3
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	009b      	lsls	r3, r3, #2
 800ad76:	fbb2 f5f3 	udiv	r5, r2, r3
 800ad7a:	f7fe fffd 	bl	8009d78 <HAL_RCC_GetPCLK2Freq>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	4613      	mov	r3, r2
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	4413      	add	r3, r2
 800ad86:	009a      	lsls	r2, r3, #2
 800ad88:	441a      	add	r2, r3
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad94:	4a21      	ldr	r2, [pc, #132]	; (800ae1c <UART_SetConfig+0x350>)
 800ad96:	fba2 2303 	umull	r2, r3, r2, r3
 800ad9a:	095b      	lsrs	r3, r3, #5
 800ad9c:	2264      	movs	r2, #100	; 0x64
 800ad9e:	fb02 f303 	mul.w	r3, r2, r3
 800ada2:	1aeb      	subs	r3, r5, r3
 800ada4:	011b      	lsls	r3, r3, #4
 800ada6:	3332      	adds	r3, #50	; 0x32
 800ada8:	4a1c      	ldr	r2, [pc, #112]	; (800ae1c <UART_SetConfig+0x350>)
 800adaa:	fba2 2303 	umull	r2, r3, r2, r3
 800adae:	095b      	lsrs	r3, r3, #5
 800adb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800adb4:	441c      	add	r4, r3
 800adb6:	f7fe ffdf 	bl	8009d78 <HAL_RCC_GetPCLK2Freq>
 800adba:	4602      	mov	r2, r0
 800adbc:	4613      	mov	r3, r2
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	4413      	add	r3, r2
 800adc2:	009a      	lsls	r2, r3, #2
 800adc4:	441a      	add	r2, r3
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	fbb2 f5f3 	udiv	r5, r2, r3
 800add0:	f7fe ffd2 	bl	8009d78 <HAL_RCC_GetPCLK2Freq>
 800add4:	4602      	mov	r2, r0
 800add6:	4613      	mov	r3, r2
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	4413      	add	r3, r2
 800addc:	009a      	lsls	r2, r3, #2
 800adde:	441a      	add	r2, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	fbb2 f3f3 	udiv	r3, r2, r3
 800adea:	4a0c      	ldr	r2, [pc, #48]	; (800ae1c <UART_SetConfig+0x350>)
 800adec:	fba2 2303 	umull	r2, r3, r2, r3
 800adf0:	095b      	lsrs	r3, r3, #5
 800adf2:	2264      	movs	r2, #100	; 0x64
 800adf4:	fb02 f303 	mul.w	r3, r2, r3
 800adf8:	1aeb      	subs	r3, r5, r3
 800adfa:	011b      	lsls	r3, r3, #4
 800adfc:	3332      	adds	r3, #50	; 0x32
 800adfe:	4a07      	ldr	r2, [pc, #28]	; (800ae1c <UART_SetConfig+0x350>)
 800ae00:	fba2 2303 	umull	r2, r3, r2, r3
 800ae04:	095b      	lsrs	r3, r3, #5
 800ae06:	f003 020f 	and.w	r2, r3, #15
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4422      	add	r2, r4
 800ae10:	609a      	str	r2, [r3, #8]
 800ae12:	e071      	b.n	800aef8 <UART_SetConfig+0x42c>
 800ae14:	40011000 	.word	0x40011000
 800ae18:	40011400 	.word	0x40011400
 800ae1c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800ae20:	f7fe ff88 	bl	8009d34 <HAL_RCC_GetPCLK1Freq>
 800ae24:	4602      	mov	r2, r0
 800ae26:	4613      	mov	r3, r2
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	4413      	add	r3, r2
 800ae2c:	009a      	lsls	r2, r3, #2
 800ae2e:	441a      	add	r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae3a:	4a31      	ldr	r2, [pc, #196]	; (800af00 <UART_SetConfig+0x434>)
 800ae3c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae40:	095b      	lsrs	r3, r3, #5
 800ae42:	011c      	lsls	r4, r3, #4
 800ae44:	f7fe ff76 	bl	8009d34 <HAL_RCC_GetPCLK1Freq>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	4613      	mov	r3, r2
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	4413      	add	r3, r2
 800ae50:	009a      	lsls	r2, r3, #2
 800ae52:	441a      	add	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	fbb2 f5f3 	udiv	r5, r2, r3
 800ae5e:	f7fe ff69 	bl	8009d34 <HAL_RCC_GetPCLK1Freq>
 800ae62:	4602      	mov	r2, r0
 800ae64:	4613      	mov	r3, r2
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	4413      	add	r3, r2
 800ae6a:	009a      	lsls	r2, r3, #2
 800ae6c:	441a      	add	r2, r3
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae78:	4a21      	ldr	r2, [pc, #132]	; (800af00 <UART_SetConfig+0x434>)
 800ae7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae7e:	095b      	lsrs	r3, r3, #5
 800ae80:	2264      	movs	r2, #100	; 0x64
 800ae82:	fb02 f303 	mul.w	r3, r2, r3
 800ae86:	1aeb      	subs	r3, r5, r3
 800ae88:	011b      	lsls	r3, r3, #4
 800ae8a:	3332      	adds	r3, #50	; 0x32
 800ae8c:	4a1c      	ldr	r2, [pc, #112]	; (800af00 <UART_SetConfig+0x434>)
 800ae8e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae92:	095b      	lsrs	r3, r3, #5
 800ae94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae98:	441c      	add	r4, r3
 800ae9a:	f7fe ff4b 	bl	8009d34 <HAL_RCC_GetPCLK1Freq>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	4613      	mov	r3, r2
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	4413      	add	r3, r2
 800aea6:	009a      	lsls	r2, r3, #2
 800aea8:	441a      	add	r2, r3
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	fbb2 f5f3 	udiv	r5, r2, r3
 800aeb4:	f7fe ff3e 	bl	8009d34 <HAL_RCC_GetPCLK1Freq>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	4613      	mov	r3, r2
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	4413      	add	r3, r2
 800aec0:	009a      	lsls	r2, r3, #2
 800aec2:	441a      	add	r2, r3
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	fbb2 f3f3 	udiv	r3, r2, r3
 800aece:	4a0c      	ldr	r2, [pc, #48]	; (800af00 <UART_SetConfig+0x434>)
 800aed0:	fba2 2303 	umull	r2, r3, r2, r3
 800aed4:	095b      	lsrs	r3, r3, #5
 800aed6:	2264      	movs	r2, #100	; 0x64
 800aed8:	fb02 f303 	mul.w	r3, r2, r3
 800aedc:	1aeb      	subs	r3, r5, r3
 800aede:	011b      	lsls	r3, r3, #4
 800aee0:	3332      	adds	r3, #50	; 0x32
 800aee2:	4a07      	ldr	r2, [pc, #28]	; (800af00 <UART_SetConfig+0x434>)
 800aee4:	fba2 2303 	umull	r2, r3, r2, r3
 800aee8:	095b      	lsrs	r3, r3, #5
 800aeea:	f003 020f 	and.w	r2, r3, #15
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4422      	add	r2, r4
 800aef4:	609a      	str	r2, [r3, #8]
}
 800aef6:	e7ff      	b.n	800aef8 <UART_SetConfig+0x42c>
 800aef8:	bf00      	nop
 800aefa:	3710      	adds	r7, #16
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bdb0      	pop	{r4, r5, r7, pc}
 800af00:	51eb851f 	.word	0x51eb851f

0800af04 <__libc_init_array>:
 800af04:	b570      	push	{r4, r5, r6, lr}
 800af06:	4d0d      	ldr	r5, [pc, #52]	; (800af3c <__libc_init_array+0x38>)
 800af08:	4c0d      	ldr	r4, [pc, #52]	; (800af40 <__libc_init_array+0x3c>)
 800af0a:	1b64      	subs	r4, r4, r5
 800af0c:	10a4      	asrs	r4, r4, #2
 800af0e:	2600      	movs	r6, #0
 800af10:	42a6      	cmp	r6, r4
 800af12:	d109      	bne.n	800af28 <__libc_init_array+0x24>
 800af14:	4d0b      	ldr	r5, [pc, #44]	; (800af44 <__libc_init_array+0x40>)
 800af16:	4c0c      	ldr	r4, [pc, #48]	; (800af48 <__libc_init_array+0x44>)
 800af18:	f000 fc9e 	bl	800b858 <_init>
 800af1c:	1b64      	subs	r4, r4, r5
 800af1e:	10a4      	asrs	r4, r4, #2
 800af20:	2600      	movs	r6, #0
 800af22:	42a6      	cmp	r6, r4
 800af24:	d105      	bne.n	800af32 <__libc_init_array+0x2e>
 800af26:	bd70      	pop	{r4, r5, r6, pc}
 800af28:	f855 3b04 	ldr.w	r3, [r5], #4
 800af2c:	4798      	blx	r3
 800af2e:	3601      	adds	r6, #1
 800af30:	e7ee      	b.n	800af10 <__libc_init_array+0xc>
 800af32:	f855 3b04 	ldr.w	r3, [r5], #4
 800af36:	4798      	blx	r3
 800af38:	3601      	adds	r6, #1
 800af3a:	e7f2      	b.n	800af22 <__libc_init_array+0x1e>
 800af3c:	0800cb98 	.word	0x0800cb98
 800af40:	0800cb98 	.word	0x0800cb98
 800af44:	0800cb98 	.word	0x0800cb98
 800af48:	0800cb9c 	.word	0x0800cb9c

0800af4c <memcpy>:
 800af4c:	440a      	add	r2, r1
 800af4e:	4291      	cmp	r1, r2
 800af50:	f100 33ff 	add.w	r3, r0, #4294967295
 800af54:	d100      	bne.n	800af58 <memcpy+0xc>
 800af56:	4770      	bx	lr
 800af58:	b510      	push	{r4, lr}
 800af5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af62:	4291      	cmp	r1, r2
 800af64:	d1f9      	bne.n	800af5a <memcpy+0xe>
 800af66:	bd10      	pop	{r4, pc}

0800af68 <memset>:
 800af68:	4402      	add	r2, r0
 800af6a:	4603      	mov	r3, r0
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d100      	bne.n	800af72 <memset+0xa>
 800af70:	4770      	bx	lr
 800af72:	f803 1b01 	strb.w	r1, [r3], #1
 800af76:	e7f9      	b.n	800af6c <memset+0x4>

0800af78 <siprintf>:
 800af78:	b40e      	push	{r1, r2, r3}
 800af7a:	b500      	push	{lr}
 800af7c:	b09c      	sub	sp, #112	; 0x70
 800af7e:	ab1d      	add	r3, sp, #116	; 0x74
 800af80:	9002      	str	r0, [sp, #8]
 800af82:	9006      	str	r0, [sp, #24]
 800af84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800af88:	4809      	ldr	r0, [pc, #36]	; (800afb0 <siprintf+0x38>)
 800af8a:	9107      	str	r1, [sp, #28]
 800af8c:	9104      	str	r1, [sp, #16]
 800af8e:	4909      	ldr	r1, [pc, #36]	; (800afb4 <siprintf+0x3c>)
 800af90:	f853 2b04 	ldr.w	r2, [r3], #4
 800af94:	9105      	str	r1, [sp, #20]
 800af96:	6800      	ldr	r0, [r0, #0]
 800af98:	9301      	str	r3, [sp, #4]
 800af9a:	a902      	add	r1, sp, #8
 800af9c:	f000 f8aa 	bl	800b0f4 <_svfiprintf_r>
 800afa0:	9b02      	ldr	r3, [sp, #8]
 800afa2:	2200      	movs	r2, #0
 800afa4:	701a      	strb	r2, [r3, #0]
 800afa6:	b01c      	add	sp, #112	; 0x70
 800afa8:	f85d eb04 	ldr.w	lr, [sp], #4
 800afac:	b003      	add	sp, #12
 800afae:	4770      	bx	lr
 800afb0:	200007d0 	.word	0x200007d0
 800afb4:	ffff0208 	.word	0xffff0208

0800afb8 <strcpy>:
 800afb8:	4603      	mov	r3, r0
 800afba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afbe:	f803 2b01 	strb.w	r2, [r3], #1
 800afc2:	2a00      	cmp	r2, #0
 800afc4:	d1f9      	bne.n	800afba <strcpy+0x2>
 800afc6:	4770      	bx	lr

0800afc8 <_vsniprintf_r>:
 800afc8:	b530      	push	{r4, r5, lr}
 800afca:	1e14      	subs	r4, r2, #0
 800afcc:	4605      	mov	r5, r0
 800afce:	b09b      	sub	sp, #108	; 0x6c
 800afd0:	4618      	mov	r0, r3
 800afd2:	da05      	bge.n	800afe0 <_vsniprintf_r+0x18>
 800afd4:	238b      	movs	r3, #139	; 0x8b
 800afd6:	602b      	str	r3, [r5, #0]
 800afd8:	f04f 30ff 	mov.w	r0, #4294967295
 800afdc:	b01b      	add	sp, #108	; 0x6c
 800afde:	bd30      	pop	{r4, r5, pc}
 800afe0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800afe4:	f8ad 300c 	strh.w	r3, [sp, #12]
 800afe8:	bf14      	ite	ne
 800afea:	f104 33ff 	addne.w	r3, r4, #4294967295
 800afee:	4623      	moveq	r3, r4
 800aff0:	9302      	str	r3, [sp, #8]
 800aff2:	9305      	str	r3, [sp, #20]
 800aff4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aff8:	9100      	str	r1, [sp, #0]
 800affa:	9104      	str	r1, [sp, #16]
 800affc:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b000:	4602      	mov	r2, r0
 800b002:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b004:	4669      	mov	r1, sp
 800b006:	4628      	mov	r0, r5
 800b008:	f000 f874 	bl	800b0f4 <_svfiprintf_r>
 800b00c:	1c43      	adds	r3, r0, #1
 800b00e:	bfbc      	itt	lt
 800b010:	238b      	movlt	r3, #139	; 0x8b
 800b012:	602b      	strlt	r3, [r5, #0]
 800b014:	2c00      	cmp	r4, #0
 800b016:	d0e1      	beq.n	800afdc <_vsniprintf_r+0x14>
 800b018:	9b00      	ldr	r3, [sp, #0]
 800b01a:	2200      	movs	r2, #0
 800b01c:	701a      	strb	r2, [r3, #0]
 800b01e:	e7dd      	b.n	800afdc <_vsniprintf_r+0x14>

0800b020 <vsniprintf>:
 800b020:	b507      	push	{r0, r1, r2, lr}
 800b022:	9300      	str	r3, [sp, #0]
 800b024:	4613      	mov	r3, r2
 800b026:	460a      	mov	r2, r1
 800b028:	4601      	mov	r1, r0
 800b02a:	4803      	ldr	r0, [pc, #12]	; (800b038 <vsniprintf+0x18>)
 800b02c:	6800      	ldr	r0, [r0, #0]
 800b02e:	f7ff ffcb 	bl	800afc8 <_vsniprintf_r>
 800b032:	b003      	add	sp, #12
 800b034:	f85d fb04 	ldr.w	pc, [sp], #4
 800b038:	200007d0 	.word	0x200007d0

0800b03c <__ssputs_r>:
 800b03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b040:	688e      	ldr	r6, [r1, #8]
 800b042:	429e      	cmp	r6, r3
 800b044:	4682      	mov	sl, r0
 800b046:	460c      	mov	r4, r1
 800b048:	4690      	mov	r8, r2
 800b04a:	461f      	mov	r7, r3
 800b04c:	d838      	bhi.n	800b0c0 <__ssputs_r+0x84>
 800b04e:	898a      	ldrh	r2, [r1, #12]
 800b050:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b054:	d032      	beq.n	800b0bc <__ssputs_r+0x80>
 800b056:	6825      	ldr	r5, [r4, #0]
 800b058:	6909      	ldr	r1, [r1, #16]
 800b05a:	eba5 0901 	sub.w	r9, r5, r1
 800b05e:	6965      	ldr	r5, [r4, #20]
 800b060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b064:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b068:	3301      	adds	r3, #1
 800b06a:	444b      	add	r3, r9
 800b06c:	106d      	asrs	r5, r5, #1
 800b06e:	429d      	cmp	r5, r3
 800b070:	bf38      	it	cc
 800b072:	461d      	movcc	r5, r3
 800b074:	0553      	lsls	r3, r2, #21
 800b076:	d531      	bpl.n	800b0dc <__ssputs_r+0xa0>
 800b078:	4629      	mov	r1, r5
 800b07a:	f000 fb39 	bl	800b6f0 <_malloc_r>
 800b07e:	4606      	mov	r6, r0
 800b080:	b950      	cbnz	r0, 800b098 <__ssputs_r+0x5c>
 800b082:	230c      	movs	r3, #12
 800b084:	f8ca 3000 	str.w	r3, [sl]
 800b088:	89a3      	ldrh	r3, [r4, #12]
 800b08a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b08e:	81a3      	strh	r3, [r4, #12]
 800b090:	f04f 30ff 	mov.w	r0, #4294967295
 800b094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b098:	6921      	ldr	r1, [r4, #16]
 800b09a:	464a      	mov	r2, r9
 800b09c:	f7ff ff56 	bl	800af4c <memcpy>
 800b0a0:	89a3      	ldrh	r3, [r4, #12]
 800b0a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b0a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0aa:	81a3      	strh	r3, [r4, #12]
 800b0ac:	6126      	str	r6, [r4, #16]
 800b0ae:	6165      	str	r5, [r4, #20]
 800b0b0:	444e      	add	r6, r9
 800b0b2:	eba5 0509 	sub.w	r5, r5, r9
 800b0b6:	6026      	str	r6, [r4, #0]
 800b0b8:	60a5      	str	r5, [r4, #8]
 800b0ba:	463e      	mov	r6, r7
 800b0bc:	42be      	cmp	r6, r7
 800b0be:	d900      	bls.n	800b0c2 <__ssputs_r+0x86>
 800b0c0:	463e      	mov	r6, r7
 800b0c2:	4632      	mov	r2, r6
 800b0c4:	6820      	ldr	r0, [r4, #0]
 800b0c6:	4641      	mov	r1, r8
 800b0c8:	f000 faa8 	bl	800b61c <memmove>
 800b0cc:	68a3      	ldr	r3, [r4, #8]
 800b0ce:	6822      	ldr	r2, [r4, #0]
 800b0d0:	1b9b      	subs	r3, r3, r6
 800b0d2:	4432      	add	r2, r6
 800b0d4:	60a3      	str	r3, [r4, #8]
 800b0d6:	6022      	str	r2, [r4, #0]
 800b0d8:	2000      	movs	r0, #0
 800b0da:	e7db      	b.n	800b094 <__ssputs_r+0x58>
 800b0dc:	462a      	mov	r2, r5
 800b0de:	f000 fb61 	bl	800b7a4 <_realloc_r>
 800b0e2:	4606      	mov	r6, r0
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	d1e1      	bne.n	800b0ac <__ssputs_r+0x70>
 800b0e8:	6921      	ldr	r1, [r4, #16]
 800b0ea:	4650      	mov	r0, sl
 800b0ec:	f000 fab0 	bl	800b650 <_free_r>
 800b0f0:	e7c7      	b.n	800b082 <__ssputs_r+0x46>
	...

0800b0f4 <_svfiprintf_r>:
 800b0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f8:	4698      	mov	r8, r3
 800b0fa:	898b      	ldrh	r3, [r1, #12]
 800b0fc:	061b      	lsls	r3, r3, #24
 800b0fe:	b09d      	sub	sp, #116	; 0x74
 800b100:	4607      	mov	r7, r0
 800b102:	460d      	mov	r5, r1
 800b104:	4614      	mov	r4, r2
 800b106:	d50e      	bpl.n	800b126 <_svfiprintf_r+0x32>
 800b108:	690b      	ldr	r3, [r1, #16]
 800b10a:	b963      	cbnz	r3, 800b126 <_svfiprintf_r+0x32>
 800b10c:	2140      	movs	r1, #64	; 0x40
 800b10e:	f000 faef 	bl	800b6f0 <_malloc_r>
 800b112:	6028      	str	r0, [r5, #0]
 800b114:	6128      	str	r0, [r5, #16]
 800b116:	b920      	cbnz	r0, 800b122 <_svfiprintf_r+0x2e>
 800b118:	230c      	movs	r3, #12
 800b11a:	603b      	str	r3, [r7, #0]
 800b11c:	f04f 30ff 	mov.w	r0, #4294967295
 800b120:	e0d1      	b.n	800b2c6 <_svfiprintf_r+0x1d2>
 800b122:	2340      	movs	r3, #64	; 0x40
 800b124:	616b      	str	r3, [r5, #20]
 800b126:	2300      	movs	r3, #0
 800b128:	9309      	str	r3, [sp, #36]	; 0x24
 800b12a:	2320      	movs	r3, #32
 800b12c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b130:	f8cd 800c 	str.w	r8, [sp, #12]
 800b134:	2330      	movs	r3, #48	; 0x30
 800b136:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b2e0 <_svfiprintf_r+0x1ec>
 800b13a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b13e:	f04f 0901 	mov.w	r9, #1
 800b142:	4623      	mov	r3, r4
 800b144:	469a      	mov	sl, r3
 800b146:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b14a:	b10a      	cbz	r2, 800b150 <_svfiprintf_r+0x5c>
 800b14c:	2a25      	cmp	r2, #37	; 0x25
 800b14e:	d1f9      	bne.n	800b144 <_svfiprintf_r+0x50>
 800b150:	ebba 0b04 	subs.w	fp, sl, r4
 800b154:	d00b      	beq.n	800b16e <_svfiprintf_r+0x7a>
 800b156:	465b      	mov	r3, fp
 800b158:	4622      	mov	r2, r4
 800b15a:	4629      	mov	r1, r5
 800b15c:	4638      	mov	r0, r7
 800b15e:	f7ff ff6d 	bl	800b03c <__ssputs_r>
 800b162:	3001      	adds	r0, #1
 800b164:	f000 80aa 	beq.w	800b2bc <_svfiprintf_r+0x1c8>
 800b168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b16a:	445a      	add	r2, fp
 800b16c:	9209      	str	r2, [sp, #36]	; 0x24
 800b16e:	f89a 3000 	ldrb.w	r3, [sl]
 800b172:	2b00      	cmp	r3, #0
 800b174:	f000 80a2 	beq.w	800b2bc <_svfiprintf_r+0x1c8>
 800b178:	2300      	movs	r3, #0
 800b17a:	f04f 32ff 	mov.w	r2, #4294967295
 800b17e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b182:	f10a 0a01 	add.w	sl, sl, #1
 800b186:	9304      	str	r3, [sp, #16]
 800b188:	9307      	str	r3, [sp, #28]
 800b18a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b18e:	931a      	str	r3, [sp, #104]	; 0x68
 800b190:	4654      	mov	r4, sl
 800b192:	2205      	movs	r2, #5
 800b194:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b198:	4851      	ldr	r0, [pc, #324]	; (800b2e0 <_svfiprintf_r+0x1ec>)
 800b19a:	f7f5 f821 	bl	80001e0 <memchr>
 800b19e:	9a04      	ldr	r2, [sp, #16]
 800b1a0:	b9d8      	cbnz	r0, 800b1da <_svfiprintf_r+0xe6>
 800b1a2:	06d0      	lsls	r0, r2, #27
 800b1a4:	bf44      	itt	mi
 800b1a6:	2320      	movmi	r3, #32
 800b1a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1ac:	0711      	lsls	r1, r2, #28
 800b1ae:	bf44      	itt	mi
 800b1b0:	232b      	movmi	r3, #43	; 0x2b
 800b1b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1b6:	f89a 3000 	ldrb.w	r3, [sl]
 800b1ba:	2b2a      	cmp	r3, #42	; 0x2a
 800b1bc:	d015      	beq.n	800b1ea <_svfiprintf_r+0xf6>
 800b1be:	9a07      	ldr	r2, [sp, #28]
 800b1c0:	4654      	mov	r4, sl
 800b1c2:	2000      	movs	r0, #0
 800b1c4:	f04f 0c0a 	mov.w	ip, #10
 800b1c8:	4621      	mov	r1, r4
 800b1ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1ce:	3b30      	subs	r3, #48	; 0x30
 800b1d0:	2b09      	cmp	r3, #9
 800b1d2:	d94e      	bls.n	800b272 <_svfiprintf_r+0x17e>
 800b1d4:	b1b0      	cbz	r0, 800b204 <_svfiprintf_r+0x110>
 800b1d6:	9207      	str	r2, [sp, #28]
 800b1d8:	e014      	b.n	800b204 <_svfiprintf_r+0x110>
 800b1da:	eba0 0308 	sub.w	r3, r0, r8
 800b1de:	fa09 f303 	lsl.w	r3, r9, r3
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	9304      	str	r3, [sp, #16]
 800b1e6:	46a2      	mov	sl, r4
 800b1e8:	e7d2      	b.n	800b190 <_svfiprintf_r+0x9c>
 800b1ea:	9b03      	ldr	r3, [sp, #12]
 800b1ec:	1d19      	adds	r1, r3, #4
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	9103      	str	r1, [sp, #12]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	bfbb      	ittet	lt
 800b1f6:	425b      	neglt	r3, r3
 800b1f8:	f042 0202 	orrlt.w	r2, r2, #2
 800b1fc:	9307      	strge	r3, [sp, #28]
 800b1fe:	9307      	strlt	r3, [sp, #28]
 800b200:	bfb8      	it	lt
 800b202:	9204      	strlt	r2, [sp, #16]
 800b204:	7823      	ldrb	r3, [r4, #0]
 800b206:	2b2e      	cmp	r3, #46	; 0x2e
 800b208:	d10c      	bne.n	800b224 <_svfiprintf_r+0x130>
 800b20a:	7863      	ldrb	r3, [r4, #1]
 800b20c:	2b2a      	cmp	r3, #42	; 0x2a
 800b20e:	d135      	bne.n	800b27c <_svfiprintf_r+0x188>
 800b210:	9b03      	ldr	r3, [sp, #12]
 800b212:	1d1a      	adds	r2, r3, #4
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	9203      	str	r2, [sp, #12]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	bfb8      	it	lt
 800b21c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b220:	3402      	adds	r4, #2
 800b222:	9305      	str	r3, [sp, #20]
 800b224:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b2f0 <_svfiprintf_r+0x1fc>
 800b228:	7821      	ldrb	r1, [r4, #0]
 800b22a:	2203      	movs	r2, #3
 800b22c:	4650      	mov	r0, sl
 800b22e:	f7f4 ffd7 	bl	80001e0 <memchr>
 800b232:	b140      	cbz	r0, 800b246 <_svfiprintf_r+0x152>
 800b234:	2340      	movs	r3, #64	; 0x40
 800b236:	eba0 000a 	sub.w	r0, r0, sl
 800b23a:	fa03 f000 	lsl.w	r0, r3, r0
 800b23e:	9b04      	ldr	r3, [sp, #16]
 800b240:	4303      	orrs	r3, r0
 800b242:	3401      	adds	r4, #1
 800b244:	9304      	str	r3, [sp, #16]
 800b246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b24a:	4826      	ldr	r0, [pc, #152]	; (800b2e4 <_svfiprintf_r+0x1f0>)
 800b24c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b250:	2206      	movs	r2, #6
 800b252:	f7f4 ffc5 	bl	80001e0 <memchr>
 800b256:	2800      	cmp	r0, #0
 800b258:	d038      	beq.n	800b2cc <_svfiprintf_r+0x1d8>
 800b25a:	4b23      	ldr	r3, [pc, #140]	; (800b2e8 <_svfiprintf_r+0x1f4>)
 800b25c:	bb1b      	cbnz	r3, 800b2a6 <_svfiprintf_r+0x1b2>
 800b25e:	9b03      	ldr	r3, [sp, #12]
 800b260:	3307      	adds	r3, #7
 800b262:	f023 0307 	bic.w	r3, r3, #7
 800b266:	3308      	adds	r3, #8
 800b268:	9303      	str	r3, [sp, #12]
 800b26a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b26c:	4433      	add	r3, r6
 800b26e:	9309      	str	r3, [sp, #36]	; 0x24
 800b270:	e767      	b.n	800b142 <_svfiprintf_r+0x4e>
 800b272:	fb0c 3202 	mla	r2, ip, r2, r3
 800b276:	460c      	mov	r4, r1
 800b278:	2001      	movs	r0, #1
 800b27a:	e7a5      	b.n	800b1c8 <_svfiprintf_r+0xd4>
 800b27c:	2300      	movs	r3, #0
 800b27e:	3401      	adds	r4, #1
 800b280:	9305      	str	r3, [sp, #20]
 800b282:	4619      	mov	r1, r3
 800b284:	f04f 0c0a 	mov.w	ip, #10
 800b288:	4620      	mov	r0, r4
 800b28a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b28e:	3a30      	subs	r2, #48	; 0x30
 800b290:	2a09      	cmp	r2, #9
 800b292:	d903      	bls.n	800b29c <_svfiprintf_r+0x1a8>
 800b294:	2b00      	cmp	r3, #0
 800b296:	d0c5      	beq.n	800b224 <_svfiprintf_r+0x130>
 800b298:	9105      	str	r1, [sp, #20]
 800b29a:	e7c3      	b.n	800b224 <_svfiprintf_r+0x130>
 800b29c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2a0:	4604      	mov	r4, r0
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e7f0      	b.n	800b288 <_svfiprintf_r+0x194>
 800b2a6:	ab03      	add	r3, sp, #12
 800b2a8:	9300      	str	r3, [sp, #0]
 800b2aa:	462a      	mov	r2, r5
 800b2ac:	4b0f      	ldr	r3, [pc, #60]	; (800b2ec <_svfiprintf_r+0x1f8>)
 800b2ae:	a904      	add	r1, sp, #16
 800b2b0:	4638      	mov	r0, r7
 800b2b2:	f3af 8000 	nop.w
 800b2b6:	1c42      	adds	r2, r0, #1
 800b2b8:	4606      	mov	r6, r0
 800b2ba:	d1d6      	bne.n	800b26a <_svfiprintf_r+0x176>
 800b2bc:	89ab      	ldrh	r3, [r5, #12]
 800b2be:	065b      	lsls	r3, r3, #25
 800b2c0:	f53f af2c 	bmi.w	800b11c <_svfiprintf_r+0x28>
 800b2c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2c6:	b01d      	add	sp, #116	; 0x74
 800b2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2cc:	ab03      	add	r3, sp, #12
 800b2ce:	9300      	str	r3, [sp, #0]
 800b2d0:	462a      	mov	r2, r5
 800b2d2:	4b06      	ldr	r3, [pc, #24]	; (800b2ec <_svfiprintf_r+0x1f8>)
 800b2d4:	a904      	add	r1, sp, #16
 800b2d6:	4638      	mov	r0, r7
 800b2d8:	f000 f87a 	bl	800b3d0 <_printf_i>
 800b2dc:	e7eb      	b.n	800b2b6 <_svfiprintf_r+0x1c2>
 800b2de:	bf00      	nop
 800b2e0:	0800cb64 	.word	0x0800cb64
 800b2e4:	0800cb6e 	.word	0x0800cb6e
 800b2e8:	00000000 	.word	0x00000000
 800b2ec:	0800b03d 	.word	0x0800b03d
 800b2f0:	0800cb6a 	.word	0x0800cb6a

0800b2f4 <_printf_common>:
 800b2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2f8:	4616      	mov	r6, r2
 800b2fa:	4699      	mov	r9, r3
 800b2fc:	688a      	ldr	r2, [r1, #8]
 800b2fe:	690b      	ldr	r3, [r1, #16]
 800b300:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b304:	4293      	cmp	r3, r2
 800b306:	bfb8      	it	lt
 800b308:	4613      	movlt	r3, r2
 800b30a:	6033      	str	r3, [r6, #0]
 800b30c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b310:	4607      	mov	r7, r0
 800b312:	460c      	mov	r4, r1
 800b314:	b10a      	cbz	r2, 800b31a <_printf_common+0x26>
 800b316:	3301      	adds	r3, #1
 800b318:	6033      	str	r3, [r6, #0]
 800b31a:	6823      	ldr	r3, [r4, #0]
 800b31c:	0699      	lsls	r1, r3, #26
 800b31e:	bf42      	ittt	mi
 800b320:	6833      	ldrmi	r3, [r6, #0]
 800b322:	3302      	addmi	r3, #2
 800b324:	6033      	strmi	r3, [r6, #0]
 800b326:	6825      	ldr	r5, [r4, #0]
 800b328:	f015 0506 	ands.w	r5, r5, #6
 800b32c:	d106      	bne.n	800b33c <_printf_common+0x48>
 800b32e:	f104 0a19 	add.w	sl, r4, #25
 800b332:	68e3      	ldr	r3, [r4, #12]
 800b334:	6832      	ldr	r2, [r6, #0]
 800b336:	1a9b      	subs	r3, r3, r2
 800b338:	42ab      	cmp	r3, r5
 800b33a:	dc26      	bgt.n	800b38a <_printf_common+0x96>
 800b33c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b340:	1e13      	subs	r3, r2, #0
 800b342:	6822      	ldr	r2, [r4, #0]
 800b344:	bf18      	it	ne
 800b346:	2301      	movne	r3, #1
 800b348:	0692      	lsls	r2, r2, #26
 800b34a:	d42b      	bmi.n	800b3a4 <_printf_common+0xb0>
 800b34c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b350:	4649      	mov	r1, r9
 800b352:	4638      	mov	r0, r7
 800b354:	47c0      	blx	r8
 800b356:	3001      	adds	r0, #1
 800b358:	d01e      	beq.n	800b398 <_printf_common+0xa4>
 800b35a:	6823      	ldr	r3, [r4, #0]
 800b35c:	68e5      	ldr	r5, [r4, #12]
 800b35e:	6832      	ldr	r2, [r6, #0]
 800b360:	f003 0306 	and.w	r3, r3, #6
 800b364:	2b04      	cmp	r3, #4
 800b366:	bf08      	it	eq
 800b368:	1aad      	subeq	r5, r5, r2
 800b36a:	68a3      	ldr	r3, [r4, #8]
 800b36c:	6922      	ldr	r2, [r4, #16]
 800b36e:	bf0c      	ite	eq
 800b370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b374:	2500      	movne	r5, #0
 800b376:	4293      	cmp	r3, r2
 800b378:	bfc4      	itt	gt
 800b37a:	1a9b      	subgt	r3, r3, r2
 800b37c:	18ed      	addgt	r5, r5, r3
 800b37e:	2600      	movs	r6, #0
 800b380:	341a      	adds	r4, #26
 800b382:	42b5      	cmp	r5, r6
 800b384:	d11a      	bne.n	800b3bc <_printf_common+0xc8>
 800b386:	2000      	movs	r0, #0
 800b388:	e008      	b.n	800b39c <_printf_common+0xa8>
 800b38a:	2301      	movs	r3, #1
 800b38c:	4652      	mov	r2, sl
 800b38e:	4649      	mov	r1, r9
 800b390:	4638      	mov	r0, r7
 800b392:	47c0      	blx	r8
 800b394:	3001      	adds	r0, #1
 800b396:	d103      	bne.n	800b3a0 <_printf_common+0xac>
 800b398:	f04f 30ff 	mov.w	r0, #4294967295
 800b39c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3a0:	3501      	adds	r5, #1
 800b3a2:	e7c6      	b.n	800b332 <_printf_common+0x3e>
 800b3a4:	18e1      	adds	r1, r4, r3
 800b3a6:	1c5a      	adds	r2, r3, #1
 800b3a8:	2030      	movs	r0, #48	; 0x30
 800b3aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b3ae:	4422      	add	r2, r4
 800b3b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b3b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b3b8:	3302      	adds	r3, #2
 800b3ba:	e7c7      	b.n	800b34c <_printf_common+0x58>
 800b3bc:	2301      	movs	r3, #1
 800b3be:	4622      	mov	r2, r4
 800b3c0:	4649      	mov	r1, r9
 800b3c2:	4638      	mov	r0, r7
 800b3c4:	47c0      	blx	r8
 800b3c6:	3001      	adds	r0, #1
 800b3c8:	d0e6      	beq.n	800b398 <_printf_common+0xa4>
 800b3ca:	3601      	adds	r6, #1
 800b3cc:	e7d9      	b.n	800b382 <_printf_common+0x8e>
	...

0800b3d0 <_printf_i>:
 800b3d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3d4:	460c      	mov	r4, r1
 800b3d6:	4691      	mov	r9, r2
 800b3d8:	7e27      	ldrb	r7, [r4, #24]
 800b3da:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b3dc:	2f78      	cmp	r7, #120	; 0x78
 800b3de:	4680      	mov	r8, r0
 800b3e0:	469a      	mov	sl, r3
 800b3e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3e6:	d807      	bhi.n	800b3f8 <_printf_i+0x28>
 800b3e8:	2f62      	cmp	r7, #98	; 0x62
 800b3ea:	d80a      	bhi.n	800b402 <_printf_i+0x32>
 800b3ec:	2f00      	cmp	r7, #0
 800b3ee:	f000 80d8 	beq.w	800b5a2 <_printf_i+0x1d2>
 800b3f2:	2f58      	cmp	r7, #88	; 0x58
 800b3f4:	f000 80a3 	beq.w	800b53e <_printf_i+0x16e>
 800b3f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b3fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b400:	e03a      	b.n	800b478 <_printf_i+0xa8>
 800b402:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b406:	2b15      	cmp	r3, #21
 800b408:	d8f6      	bhi.n	800b3f8 <_printf_i+0x28>
 800b40a:	a001      	add	r0, pc, #4	; (adr r0, 800b410 <_printf_i+0x40>)
 800b40c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b410:	0800b469 	.word	0x0800b469
 800b414:	0800b47d 	.word	0x0800b47d
 800b418:	0800b3f9 	.word	0x0800b3f9
 800b41c:	0800b3f9 	.word	0x0800b3f9
 800b420:	0800b3f9 	.word	0x0800b3f9
 800b424:	0800b3f9 	.word	0x0800b3f9
 800b428:	0800b47d 	.word	0x0800b47d
 800b42c:	0800b3f9 	.word	0x0800b3f9
 800b430:	0800b3f9 	.word	0x0800b3f9
 800b434:	0800b3f9 	.word	0x0800b3f9
 800b438:	0800b3f9 	.word	0x0800b3f9
 800b43c:	0800b589 	.word	0x0800b589
 800b440:	0800b4ad 	.word	0x0800b4ad
 800b444:	0800b56b 	.word	0x0800b56b
 800b448:	0800b3f9 	.word	0x0800b3f9
 800b44c:	0800b3f9 	.word	0x0800b3f9
 800b450:	0800b5ab 	.word	0x0800b5ab
 800b454:	0800b3f9 	.word	0x0800b3f9
 800b458:	0800b4ad 	.word	0x0800b4ad
 800b45c:	0800b3f9 	.word	0x0800b3f9
 800b460:	0800b3f9 	.word	0x0800b3f9
 800b464:	0800b573 	.word	0x0800b573
 800b468:	680b      	ldr	r3, [r1, #0]
 800b46a:	1d1a      	adds	r2, r3, #4
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	600a      	str	r2, [r1, #0]
 800b470:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b474:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b478:	2301      	movs	r3, #1
 800b47a:	e0a3      	b.n	800b5c4 <_printf_i+0x1f4>
 800b47c:	6825      	ldr	r5, [r4, #0]
 800b47e:	6808      	ldr	r0, [r1, #0]
 800b480:	062e      	lsls	r6, r5, #24
 800b482:	f100 0304 	add.w	r3, r0, #4
 800b486:	d50a      	bpl.n	800b49e <_printf_i+0xce>
 800b488:	6805      	ldr	r5, [r0, #0]
 800b48a:	600b      	str	r3, [r1, #0]
 800b48c:	2d00      	cmp	r5, #0
 800b48e:	da03      	bge.n	800b498 <_printf_i+0xc8>
 800b490:	232d      	movs	r3, #45	; 0x2d
 800b492:	426d      	negs	r5, r5
 800b494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b498:	485e      	ldr	r0, [pc, #376]	; (800b614 <_printf_i+0x244>)
 800b49a:	230a      	movs	r3, #10
 800b49c:	e019      	b.n	800b4d2 <_printf_i+0x102>
 800b49e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b4a2:	6805      	ldr	r5, [r0, #0]
 800b4a4:	600b      	str	r3, [r1, #0]
 800b4a6:	bf18      	it	ne
 800b4a8:	b22d      	sxthne	r5, r5
 800b4aa:	e7ef      	b.n	800b48c <_printf_i+0xbc>
 800b4ac:	680b      	ldr	r3, [r1, #0]
 800b4ae:	6825      	ldr	r5, [r4, #0]
 800b4b0:	1d18      	adds	r0, r3, #4
 800b4b2:	6008      	str	r0, [r1, #0]
 800b4b4:	0628      	lsls	r0, r5, #24
 800b4b6:	d501      	bpl.n	800b4bc <_printf_i+0xec>
 800b4b8:	681d      	ldr	r5, [r3, #0]
 800b4ba:	e002      	b.n	800b4c2 <_printf_i+0xf2>
 800b4bc:	0669      	lsls	r1, r5, #25
 800b4be:	d5fb      	bpl.n	800b4b8 <_printf_i+0xe8>
 800b4c0:	881d      	ldrh	r5, [r3, #0]
 800b4c2:	4854      	ldr	r0, [pc, #336]	; (800b614 <_printf_i+0x244>)
 800b4c4:	2f6f      	cmp	r7, #111	; 0x6f
 800b4c6:	bf0c      	ite	eq
 800b4c8:	2308      	moveq	r3, #8
 800b4ca:	230a      	movne	r3, #10
 800b4cc:	2100      	movs	r1, #0
 800b4ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b4d2:	6866      	ldr	r6, [r4, #4]
 800b4d4:	60a6      	str	r6, [r4, #8]
 800b4d6:	2e00      	cmp	r6, #0
 800b4d8:	bfa2      	ittt	ge
 800b4da:	6821      	ldrge	r1, [r4, #0]
 800b4dc:	f021 0104 	bicge.w	r1, r1, #4
 800b4e0:	6021      	strge	r1, [r4, #0]
 800b4e2:	b90d      	cbnz	r5, 800b4e8 <_printf_i+0x118>
 800b4e4:	2e00      	cmp	r6, #0
 800b4e6:	d04d      	beq.n	800b584 <_printf_i+0x1b4>
 800b4e8:	4616      	mov	r6, r2
 800b4ea:	fbb5 f1f3 	udiv	r1, r5, r3
 800b4ee:	fb03 5711 	mls	r7, r3, r1, r5
 800b4f2:	5dc7      	ldrb	r7, [r0, r7]
 800b4f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b4f8:	462f      	mov	r7, r5
 800b4fa:	42bb      	cmp	r3, r7
 800b4fc:	460d      	mov	r5, r1
 800b4fe:	d9f4      	bls.n	800b4ea <_printf_i+0x11a>
 800b500:	2b08      	cmp	r3, #8
 800b502:	d10b      	bne.n	800b51c <_printf_i+0x14c>
 800b504:	6823      	ldr	r3, [r4, #0]
 800b506:	07df      	lsls	r7, r3, #31
 800b508:	d508      	bpl.n	800b51c <_printf_i+0x14c>
 800b50a:	6923      	ldr	r3, [r4, #16]
 800b50c:	6861      	ldr	r1, [r4, #4]
 800b50e:	4299      	cmp	r1, r3
 800b510:	bfde      	ittt	le
 800b512:	2330      	movle	r3, #48	; 0x30
 800b514:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b518:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b51c:	1b92      	subs	r2, r2, r6
 800b51e:	6122      	str	r2, [r4, #16]
 800b520:	f8cd a000 	str.w	sl, [sp]
 800b524:	464b      	mov	r3, r9
 800b526:	aa03      	add	r2, sp, #12
 800b528:	4621      	mov	r1, r4
 800b52a:	4640      	mov	r0, r8
 800b52c:	f7ff fee2 	bl	800b2f4 <_printf_common>
 800b530:	3001      	adds	r0, #1
 800b532:	d14c      	bne.n	800b5ce <_printf_i+0x1fe>
 800b534:	f04f 30ff 	mov.w	r0, #4294967295
 800b538:	b004      	add	sp, #16
 800b53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b53e:	4835      	ldr	r0, [pc, #212]	; (800b614 <_printf_i+0x244>)
 800b540:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b544:	6823      	ldr	r3, [r4, #0]
 800b546:	680e      	ldr	r6, [r1, #0]
 800b548:	061f      	lsls	r7, r3, #24
 800b54a:	f856 5b04 	ldr.w	r5, [r6], #4
 800b54e:	600e      	str	r6, [r1, #0]
 800b550:	d514      	bpl.n	800b57c <_printf_i+0x1ac>
 800b552:	07d9      	lsls	r1, r3, #31
 800b554:	bf44      	itt	mi
 800b556:	f043 0320 	orrmi.w	r3, r3, #32
 800b55a:	6023      	strmi	r3, [r4, #0]
 800b55c:	b91d      	cbnz	r5, 800b566 <_printf_i+0x196>
 800b55e:	6823      	ldr	r3, [r4, #0]
 800b560:	f023 0320 	bic.w	r3, r3, #32
 800b564:	6023      	str	r3, [r4, #0]
 800b566:	2310      	movs	r3, #16
 800b568:	e7b0      	b.n	800b4cc <_printf_i+0xfc>
 800b56a:	6823      	ldr	r3, [r4, #0]
 800b56c:	f043 0320 	orr.w	r3, r3, #32
 800b570:	6023      	str	r3, [r4, #0]
 800b572:	2378      	movs	r3, #120	; 0x78
 800b574:	4828      	ldr	r0, [pc, #160]	; (800b618 <_printf_i+0x248>)
 800b576:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b57a:	e7e3      	b.n	800b544 <_printf_i+0x174>
 800b57c:	065e      	lsls	r6, r3, #25
 800b57e:	bf48      	it	mi
 800b580:	b2ad      	uxthmi	r5, r5
 800b582:	e7e6      	b.n	800b552 <_printf_i+0x182>
 800b584:	4616      	mov	r6, r2
 800b586:	e7bb      	b.n	800b500 <_printf_i+0x130>
 800b588:	680b      	ldr	r3, [r1, #0]
 800b58a:	6826      	ldr	r6, [r4, #0]
 800b58c:	6960      	ldr	r0, [r4, #20]
 800b58e:	1d1d      	adds	r5, r3, #4
 800b590:	600d      	str	r5, [r1, #0]
 800b592:	0635      	lsls	r5, r6, #24
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	d501      	bpl.n	800b59c <_printf_i+0x1cc>
 800b598:	6018      	str	r0, [r3, #0]
 800b59a:	e002      	b.n	800b5a2 <_printf_i+0x1d2>
 800b59c:	0671      	lsls	r1, r6, #25
 800b59e:	d5fb      	bpl.n	800b598 <_printf_i+0x1c8>
 800b5a0:	8018      	strh	r0, [r3, #0]
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	6123      	str	r3, [r4, #16]
 800b5a6:	4616      	mov	r6, r2
 800b5a8:	e7ba      	b.n	800b520 <_printf_i+0x150>
 800b5aa:	680b      	ldr	r3, [r1, #0]
 800b5ac:	1d1a      	adds	r2, r3, #4
 800b5ae:	600a      	str	r2, [r1, #0]
 800b5b0:	681e      	ldr	r6, [r3, #0]
 800b5b2:	6862      	ldr	r2, [r4, #4]
 800b5b4:	2100      	movs	r1, #0
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	f7f4 fe12 	bl	80001e0 <memchr>
 800b5bc:	b108      	cbz	r0, 800b5c2 <_printf_i+0x1f2>
 800b5be:	1b80      	subs	r0, r0, r6
 800b5c0:	6060      	str	r0, [r4, #4]
 800b5c2:	6863      	ldr	r3, [r4, #4]
 800b5c4:	6123      	str	r3, [r4, #16]
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5cc:	e7a8      	b.n	800b520 <_printf_i+0x150>
 800b5ce:	6923      	ldr	r3, [r4, #16]
 800b5d0:	4632      	mov	r2, r6
 800b5d2:	4649      	mov	r1, r9
 800b5d4:	4640      	mov	r0, r8
 800b5d6:	47d0      	blx	sl
 800b5d8:	3001      	adds	r0, #1
 800b5da:	d0ab      	beq.n	800b534 <_printf_i+0x164>
 800b5dc:	6823      	ldr	r3, [r4, #0]
 800b5de:	079b      	lsls	r3, r3, #30
 800b5e0:	d413      	bmi.n	800b60a <_printf_i+0x23a>
 800b5e2:	68e0      	ldr	r0, [r4, #12]
 800b5e4:	9b03      	ldr	r3, [sp, #12]
 800b5e6:	4298      	cmp	r0, r3
 800b5e8:	bfb8      	it	lt
 800b5ea:	4618      	movlt	r0, r3
 800b5ec:	e7a4      	b.n	800b538 <_printf_i+0x168>
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	4632      	mov	r2, r6
 800b5f2:	4649      	mov	r1, r9
 800b5f4:	4640      	mov	r0, r8
 800b5f6:	47d0      	blx	sl
 800b5f8:	3001      	adds	r0, #1
 800b5fa:	d09b      	beq.n	800b534 <_printf_i+0x164>
 800b5fc:	3501      	adds	r5, #1
 800b5fe:	68e3      	ldr	r3, [r4, #12]
 800b600:	9903      	ldr	r1, [sp, #12]
 800b602:	1a5b      	subs	r3, r3, r1
 800b604:	42ab      	cmp	r3, r5
 800b606:	dcf2      	bgt.n	800b5ee <_printf_i+0x21e>
 800b608:	e7eb      	b.n	800b5e2 <_printf_i+0x212>
 800b60a:	2500      	movs	r5, #0
 800b60c:	f104 0619 	add.w	r6, r4, #25
 800b610:	e7f5      	b.n	800b5fe <_printf_i+0x22e>
 800b612:	bf00      	nop
 800b614:	0800cb75 	.word	0x0800cb75
 800b618:	0800cb86 	.word	0x0800cb86

0800b61c <memmove>:
 800b61c:	4288      	cmp	r0, r1
 800b61e:	b510      	push	{r4, lr}
 800b620:	eb01 0402 	add.w	r4, r1, r2
 800b624:	d902      	bls.n	800b62c <memmove+0x10>
 800b626:	4284      	cmp	r4, r0
 800b628:	4623      	mov	r3, r4
 800b62a:	d807      	bhi.n	800b63c <memmove+0x20>
 800b62c:	1e43      	subs	r3, r0, #1
 800b62e:	42a1      	cmp	r1, r4
 800b630:	d008      	beq.n	800b644 <memmove+0x28>
 800b632:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b636:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b63a:	e7f8      	b.n	800b62e <memmove+0x12>
 800b63c:	4402      	add	r2, r0
 800b63e:	4601      	mov	r1, r0
 800b640:	428a      	cmp	r2, r1
 800b642:	d100      	bne.n	800b646 <memmove+0x2a>
 800b644:	bd10      	pop	{r4, pc}
 800b646:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b64a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b64e:	e7f7      	b.n	800b640 <memmove+0x24>

0800b650 <_free_r>:
 800b650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b652:	2900      	cmp	r1, #0
 800b654:	d048      	beq.n	800b6e8 <_free_r+0x98>
 800b656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b65a:	9001      	str	r0, [sp, #4]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	f1a1 0404 	sub.w	r4, r1, #4
 800b662:	bfb8      	it	lt
 800b664:	18e4      	addlt	r4, r4, r3
 800b666:	f000 f8d3 	bl	800b810 <__malloc_lock>
 800b66a:	4a20      	ldr	r2, [pc, #128]	; (800b6ec <_free_r+0x9c>)
 800b66c:	9801      	ldr	r0, [sp, #4]
 800b66e:	6813      	ldr	r3, [r2, #0]
 800b670:	4615      	mov	r5, r2
 800b672:	b933      	cbnz	r3, 800b682 <_free_r+0x32>
 800b674:	6063      	str	r3, [r4, #4]
 800b676:	6014      	str	r4, [r2, #0]
 800b678:	b003      	add	sp, #12
 800b67a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b67e:	f000 b8cd 	b.w	800b81c <__malloc_unlock>
 800b682:	42a3      	cmp	r3, r4
 800b684:	d90b      	bls.n	800b69e <_free_r+0x4e>
 800b686:	6821      	ldr	r1, [r4, #0]
 800b688:	1862      	adds	r2, r4, r1
 800b68a:	4293      	cmp	r3, r2
 800b68c:	bf04      	itt	eq
 800b68e:	681a      	ldreq	r2, [r3, #0]
 800b690:	685b      	ldreq	r3, [r3, #4]
 800b692:	6063      	str	r3, [r4, #4]
 800b694:	bf04      	itt	eq
 800b696:	1852      	addeq	r2, r2, r1
 800b698:	6022      	streq	r2, [r4, #0]
 800b69a:	602c      	str	r4, [r5, #0]
 800b69c:	e7ec      	b.n	800b678 <_free_r+0x28>
 800b69e:	461a      	mov	r2, r3
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	b10b      	cbz	r3, 800b6a8 <_free_r+0x58>
 800b6a4:	42a3      	cmp	r3, r4
 800b6a6:	d9fa      	bls.n	800b69e <_free_r+0x4e>
 800b6a8:	6811      	ldr	r1, [r2, #0]
 800b6aa:	1855      	adds	r5, r2, r1
 800b6ac:	42a5      	cmp	r5, r4
 800b6ae:	d10b      	bne.n	800b6c8 <_free_r+0x78>
 800b6b0:	6824      	ldr	r4, [r4, #0]
 800b6b2:	4421      	add	r1, r4
 800b6b4:	1854      	adds	r4, r2, r1
 800b6b6:	42a3      	cmp	r3, r4
 800b6b8:	6011      	str	r1, [r2, #0]
 800b6ba:	d1dd      	bne.n	800b678 <_free_r+0x28>
 800b6bc:	681c      	ldr	r4, [r3, #0]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	6053      	str	r3, [r2, #4]
 800b6c2:	4421      	add	r1, r4
 800b6c4:	6011      	str	r1, [r2, #0]
 800b6c6:	e7d7      	b.n	800b678 <_free_r+0x28>
 800b6c8:	d902      	bls.n	800b6d0 <_free_r+0x80>
 800b6ca:	230c      	movs	r3, #12
 800b6cc:	6003      	str	r3, [r0, #0]
 800b6ce:	e7d3      	b.n	800b678 <_free_r+0x28>
 800b6d0:	6825      	ldr	r5, [r4, #0]
 800b6d2:	1961      	adds	r1, r4, r5
 800b6d4:	428b      	cmp	r3, r1
 800b6d6:	bf04      	itt	eq
 800b6d8:	6819      	ldreq	r1, [r3, #0]
 800b6da:	685b      	ldreq	r3, [r3, #4]
 800b6dc:	6063      	str	r3, [r4, #4]
 800b6de:	bf04      	itt	eq
 800b6e0:	1949      	addeq	r1, r1, r5
 800b6e2:	6021      	streq	r1, [r4, #0]
 800b6e4:	6054      	str	r4, [r2, #4]
 800b6e6:	e7c7      	b.n	800b678 <_free_r+0x28>
 800b6e8:	b003      	add	sp, #12
 800b6ea:	bd30      	pop	{r4, r5, pc}
 800b6ec:	20000968 	.word	0x20000968

0800b6f0 <_malloc_r>:
 800b6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6f2:	1ccd      	adds	r5, r1, #3
 800b6f4:	f025 0503 	bic.w	r5, r5, #3
 800b6f8:	3508      	adds	r5, #8
 800b6fa:	2d0c      	cmp	r5, #12
 800b6fc:	bf38      	it	cc
 800b6fe:	250c      	movcc	r5, #12
 800b700:	2d00      	cmp	r5, #0
 800b702:	4606      	mov	r6, r0
 800b704:	db01      	blt.n	800b70a <_malloc_r+0x1a>
 800b706:	42a9      	cmp	r1, r5
 800b708:	d903      	bls.n	800b712 <_malloc_r+0x22>
 800b70a:	230c      	movs	r3, #12
 800b70c:	6033      	str	r3, [r6, #0]
 800b70e:	2000      	movs	r0, #0
 800b710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b712:	f000 f87d 	bl	800b810 <__malloc_lock>
 800b716:	4921      	ldr	r1, [pc, #132]	; (800b79c <_malloc_r+0xac>)
 800b718:	680a      	ldr	r2, [r1, #0]
 800b71a:	4614      	mov	r4, r2
 800b71c:	b99c      	cbnz	r4, 800b746 <_malloc_r+0x56>
 800b71e:	4f20      	ldr	r7, [pc, #128]	; (800b7a0 <_malloc_r+0xb0>)
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	b923      	cbnz	r3, 800b72e <_malloc_r+0x3e>
 800b724:	4621      	mov	r1, r4
 800b726:	4630      	mov	r0, r6
 800b728:	f000 f862 	bl	800b7f0 <_sbrk_r>
 800b72c:	6038      	str	r0, [r7, #0]
 800b72e:	4629      	mov	r1, r5
 800b730:	4630      	mov	r0, r6
 800b732:	f000 f85d 	bl	800b7f0 <_sbrk_r>
 800b736:	1c43      	adds	r3, r0, #1
 800b738:	d123      	bne.n	800b782 <_malloc_r+0x92>
 800b73a:	230c      	movs	r3, #12
 800b73c:	6033      	str	r3, [r6, #0]
 800b73e:	4630      	mov	r0, r6
 800b740:	f000 f86c 	bl	800b81c <__malloc_unlock>
 800b744:	e7e3      	b.n	800b70e <_malloc_r+0x1e>
 800b746:	6823      	ldr	r3, [r4, #0]
 800b748:	1b5b      	subs	r3, r3, r5
 800b74a:	d417      	bmi.n	800b77c <_malloc_r+0x8c>
 800b74c:	2b0b      	cmp	r3, #11
 800b74e:	d903      	bls.n	800b758 <_malloc_r+0x68>
 800b750:	6023      	str	r3, [r4, #0]
 800b752:	441c      	add	r4, r3
 800b754:	6025      	str	r5, [r4, #0]
 800b756:	e004      	b.n	800b762 <_malloc_r+0x72>
 800b758:	6863      	ldr	r3, [r4, #4]
 800b75a:	42a2      	cmp	r2, r4
 800b75c:	bf0c      	ite	eq
 800b75e:	600b      	streq	r3, [r1, #0]
 800b760:	6053      	strne	r3, [r2, #4]
 800b762:	4630      	mov	r0, r6
 800b764:	f000 f85a 	bl	800b81c <__malloc_unlock>
 800b768:	f104 000b 	add.w	r0, r4, #11
 800b76c:	1d23      	adds	r3, r4, #4
 800b76e:	f020 0007 	bic.w	r0, r0, #7
 800b772:	1ac2      	subs	r2, r0, r3
 800b774:	d0cc      	beq.n	800b710 <_malloc_r+0x20>
 800b776:	1a1b      	subs	r3, r3, r0
 800b778:	50a3      	str	r3, [r4, r2]
 800b77a:	e7c9      	b.n	800b710 <_malloc_r+0x20>
 800b77c:	4622      	mov	r2, r4
 800b77e:	6864      	ldr	r4, [r4, #4]
 800b780:	e7cc      	b.n	800b71c <_malloc_r+0x2c>
 800b782:	1cc4      	adds	r4, r0, #3
 800b784:	f024 0403 	bic.w	r4, r4, #3
 800b788:	42a0      	cmp	r0, r4
 800b78a:	d0e3      	beq.n	800b754 <_malloc_r+0x64>
 800b78c:	1a21      	subs	r1, r4, r0
 800b78e:	4630      	mov	r0, r6
 800b790:	f000 f82e 	bl	800b7f0 <_sbrk_r>
 800b794:	3001      	adds	r0, #1
 800b796:	d1dd      	bne.n	800b754 <_malloc_r+0x64>
 800b798:	e7cf      	b.n	800b73a <_malloc_r+0x4a>
 800b79a:	bf00      	nop
 800b79c:	20000968 	.word	0x20000968
 800b7a0:	2000096c 	.word	0x2000096c

0800b7a4 <_realloc_r>:
 800b7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7a6:	4607      	mov	r7, r0
 800b7a8:	4614      	mov	r4, r2
 800b7aa:	460e      	mov	r6, r1
 800b7ac:	b921      	cbnz	r1, 800b7b8 <_realloc_r+0x14>
 800b7ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b7b2:	4611      	mov	r1, r2
 800b7b4:	f7ff bf9c 	b.w	800b6f0 <_malloc_r>
 800b7b8:	b922      	cbnz	r2, 800b7c4 <_realloc_r+0x20>
 800b7ba:	f7ff ff49 	bl	800b650 <_free_r>
 800b7be:	4625      	mov	r5, r4
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7c4:	f000 f830 	bl	800b828 <_malloc_usable_size_r>
 800b7c8:	42a0      	cmp	r0, r4
 800b7ca:	d20f      	bcs.n	800b7ec <_realloc_r+0x48>
 800b7cc:	4621      	mov	r1, r4
 800b7ce:	4638      	mov	r0, r7
 800b7d0:	f7ff ff8e 	bl	800b6f0 <_malloc_r>
 800b7d4:	4605      	mov	r5, r0
 800b7d6:	2800      	cmp	r0, #0
 800b7d8:	d0f2      	beq.n	800b7c0 <_realloc_r+0x1c>
 800b7da:	4631      	mov	r1, r6
 800b7dc:	4622      	mov	r2, r4
 800b7de:	f7ff fbb5 	bl	800af4c <memcpy>
 800b7e2:	4631      	mov	r1, r6
 800b7e4:	4638      	mov	r0, r7
 800b7e6:	f7ff ff33 	bl	800b650 <_free_r>
 800b7ea:	e7e9      	b.n	800b7c0 <_realloc_r+0x1c>
 800b7ec:	4635      	mov	r5, r6
 800b7ee:	e7e7      	b.n	800b7c0 <_realloc_r+0x1c>

0800b7f0 <_sbrk_r>:
 800b7f0:	b538      	push	{r3, r4, r5, lr}
 800b7f2:	4d06      	ldr	r5, [pc, #24]	; (800b80c <_sbrk_r+0x1c>)
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	4608      	mov	r0, r1
 800b7fa:	602b      	str	r3, [r5, #0]
 800b7fc:	f000 f81e 	bl	800b83c <_sbrk>
 800b800:	1c43      	adds	r3, r0, #1
 800b802:	d102      	bne.n	800b80a <_sbrk_r+0x1a>
 800b804:	682b      	ldr	r3, [r5, #0]
 800b806:	b103      	cbz	r3, 800b80a <_sbrk_r+0x1a>
 800b808:	6023      	str	r3, [r4, #0]
 800b80a:	bd38      	pop	{r3, r4, r5, pc}
 800b80c:	20000b08 	.word	0x20000b08

0800b810 <__malloc_lock>:
 800b810:	4801      	ldr	r0, [pc, #4]	; (800b818 <__malloc_lock+0x8>)
 800b812:	f000 b811 	b.w	800b838 <__retarget_lock_acquire_recursive>
 800b816:	bf00      	nop
 800b818:	20000b10 	.word	0x20000b10

0800b81c <__malloc_unlock>:
 800b81c:	4801      	ldr	r0, [pc, #4]	; (800b824 <__malloc_unlock+0x8>)
 800b81e:	f000 b80c 	b.w	800b83a <__retarget_lock_release_recursive>
 800b822:	bf00      	nop
 800b824:	20000b10 	.word	0x20000b10

0800b828 <_malloc_usable_size_r>:
 800b828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b82c:	1f18      	subs	r0, r3, #4
 800b82e:	2b00      	cmp	r3, #0
 800b830:	bfbc      	itt	lt
 800b832:	580b      	ldrlt	r3, [r1, r0]
 800b834:	18c0      	addlt	r0, r0, r3
 800b836:	4770      	bx	lr

0800b838 <__retarget_lock_acquire_recursive>:
 800b838:	4770      	bx	lr

0800b83a <__retarget_lock_release_recursive>:
 800b83a:	4770      	bx	lr

0800b83c <_sbrk>:
 800b83c:	4b04      	ldr	r3, [pc, #16]	; (800b850 <_sbrk+0x14>)
 800b83e:	6819      	ldr	r1, [r3, #0]
 800b840:	4602      	mov	r2, r0
 800b842:	b909      	cbnz	r1, 800b848 <_sbrk+0xc>
 800b844:	4903      	ldr	r1, [pc, #12]	; (800b854 <_sbrk+0x18>)
 800b846:	6019      	str	r1, [r3, #0]
 800b848:	6818      	ldr	r0, [r3, #0]
 800b84a:	4402      	add	r2, r0
 800b84c:	601a      	str	r2, [r3, #0]
 800b84e:	4770      	bx	lr
 800b850:	20000970 	.word	0x20000970
 800b854:	20000b18 	.word	0x20000b18

0800b858 <_init>:
 800b858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b85a:	bf00      	nop
 800b85c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b85e:	bc08      	pop	{r3}
 800b860:	469e      	mov	lr, r3
 800b862:	4770      	bx	lr

0800b864 <_fini>:
 800b864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b866:	bf00      	nop
 800b868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b86a:	bc08      	pop	{r3}
 800b86c:	469e      	mov	lr, r3
 800b86e:	4770      	bx	lr
