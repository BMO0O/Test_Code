
PWMtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080021e0  080021e0  000121e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800220c  0800220c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800220c  0800220c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800220c  0800220c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800220c  0800220c  0001220c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002210  08002210  00012210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08002220  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002220  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d7e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001943  00000000  00000000  00029db3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b68  00000000  00000000  0002b6f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a80  00000000  00000000  0002c260  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016f1a  00000000  00000000  0002cce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009471  00000000  00000000  00043bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085d07  00000000  00000000  0004d06b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d2d72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002eb4  00000000  00000000  000d2df0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080021c8 	.word	0x080021c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080021c8 	.word	0x080021c8

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b27      	ldr	r3, [pc, #156]	; (8000200 <MX_GPIO_Init+0xb4>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a26      	ldr	r2, [pc, #152]	; (8000200 <MX_GPIO_Init+0xb4>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b24      	ldr	r3, [pc, #144]	; (8000200 <MX_GPIO_Init+0xb4>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b21      	ldr	r3, [pc, #132]	; (8000200 <MX_GPIO_Init+0xb4>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a20      	ldr	r2, [pc, #128]	; (8000200 <MX_GPIO_Init+0xb4>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b1e      	ldr	r3, [pc, #120]	; (8000200 <MX_GPIO_Init+0xb4>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b1b      	ldr	r3, [pc, #108]	; (8000200 <MX_GPIO_Init+0xb4>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a1a      	ldr	r2, [pc, #104]	; (8000200 <MX_GPIO_Init+0xb4>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b18      	ldr	r3, [pc, #96]	; (8000200 <MX_GPIO_Init+0xb4>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_Pin|DREN_Pin, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	2130      	movs	r1, #48	; 0x30
 80001ac:	4815      	ldr	r0, [pc, #84]	; (8000204 <MX_GPIO_Init+0xb8>)
 80001ae:	f000 fd19 	bl	8000be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001b2:	2200      	movs	r2, #0
 80001b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001b8:	4813      	ldr	r0, [pc, #76]	; (8000208 <MX_GPIO_Init+0xbc>)
 80001ba:	f000 fd13 	bl	8000be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIR_Pin|DREN_Pin;
 80001be:	2330      	movs	r3, #48	; 0x30
 80001c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001c2:	2301      	movs	r3, #1
 80001c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001c6:	2300      	movs	r3, #0
 80001c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ca:	2302      	movs	r3, #2
 80001cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001ce:	f107 0310 	add.w	r3, r7, #16
 80001d2:	4619      	mov	r1, r3
 80001d4:	480b      	ldr	r0, [pc, #44]	; (8000204 <MX_GPIO_Init+0xb8>)
 80001d6:	f000 fbab 	bl	8000930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80001da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80001de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e0:	2301      	movs	r3, #1
 80001e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e4:	2300      	movs	r3, #0
 80001e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001e8:	2302      	movs	r3, #2
 80001ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80001ec:	f107 0310 	add.w	r3, r7, #16
 80001f0:	4619      	mov	r1, r3
 80001f2:	4805      	ldr	r0, [pc, #20]	; (8000208 <MX_GPIO_Init+0xbc>)
 80001f4:	f000 fb9c 	bl	8000930 <HAL_GPIO_Init>

}
 80001f8:	bf00      	nop
 80001fa:	3720      	adds	r7, #32
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	40021000 	.word	0x40021000
 8000204:	40010800 	.word	0x40010800
 8000208:	40010c00 	.word	0x40010c00

0800020c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000210:	f000 fa1e 	bl	8000650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000214:	f000 f81a 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000218:	f7ff ff98 	bl	800014c <MX_GPIO_Init>
  MX_TIM3_Init();
 800021c:	f000 f8d2 	bl	80003c4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000220:	f000 f97a 	bl	8000518 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000224:	f000 f853 	bl	80002ce <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000228:	2104      	movs	r1, #4
 800022a:	4806      	ldr	r0, [pc, #24]	; (8000244 <main+0x38>)
 800022c:	f001 f9b0 	bl	8001590 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000230:	4804      	ldr	r0, [pc, #16]	; (8000244 <main+0x38>)
 8000232:	f001 f90b 	bl	800144c <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(DREN_GPIO_Port, DREN_Pin, GPIO_PIN_SET);
 8000236:	2201      	movs	r2, #1
 8000238:	2120      	movs	r1, #32
 800023a:	4803      	ldr	r0, [pc, #12]	; (8000248 <main+0x3c>)
 800023c:	f000 fcd2 	bl	8000be4 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000240:	e7fe      	b.n	8000240 <main+0x34>
 8000242:	bf00      	nop
 8000244:	20000028 	.word	0x20000028
 8000248:	40010800 	.word	0x40010800

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b090      	sub	sp, #64	; 0x40
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0318 	add.w	r3, r7, #24
 8000256:	2228      	movs	r2, #40	; 0x28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f001 ffac 	bl	80021b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
 800026c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026e:	2302      	movs	r3, #2
 8000270:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000272:	2301      	movs	r3, #1
 8000274:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000276:	2310      	movs	r3, #16
 8000278:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027a:	2302      	movs	r3, #2
 800027c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800027e:	2300      	movs	r3, #0
 8000280:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000282:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000286:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000288:	f107 0318 	add.w	r3, r7, #24
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fcc1 	bl	8000c14 <HAL_RCC_OscConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000298:	f000 f825 	bl	80002e6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029c:	230f      	movs	r3, #15
 800029e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a0:	2302      	movs	r3, #2
 80002a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2102      	movs	r1, #2
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 ff2c 	bl	8001114 <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002c2:	f000 f810 	bl	80002e6 <Error_Handler>
  }
}
 80002c6:	bf00      	nop
 80002c8:	3740      	adds	r7, #64	; 0x40
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}

080002ce <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80002ce:	b580      	push	{r7, lr}
 80002d0:	af00      	add	r7, sp, #0
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80002d2:	2200      	movs	r2, #0
 80002d4:	2100      	movs	r1, #0
 80002d6:	201d      	movs	r0, #29
 80002d8:	f000 faf3 	bl	80008c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80002dc:	201d      	movs	r0, #29
 80002de:	f000 fb0c 	bl	80008fa <HAL_NVIC_EnableIRQ>
}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}

080002e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002ea:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002ec:	e7fe      	b.n	80002ec <Error_Handler+0x6>
	...

080002f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002f6:	4b15      	ldr	r3, [pc, #84]	; (800034c <HAL_MspInit+0x5c>)
 80002f8:	699b      	ldr	r3, [r3, #24]
 80002fa:	4a14      	ldr	r2, [pc, #80]	; (800034c <HAL_MspInit+0x5c>)
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	6193      	str	r3, [r2, #24]
 8000302:	4b12      	ldr	r3, [pc, #72]	; (800034c <HAL_MspInit+0x5c>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	f003 0301 	and.w	r3, r3, #1
 800030a:	60bb      	str	r3, [r7, #8]
 800030c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800030e:	4b0f      	ldr	r3, [pc, #60]	; (800034c <HAL_MspInit+0x5c>)
 8000310:	69db      	ldr	r3, [r3, #28]
 8000312:	4a0e      	ldr	r2, [pc, #56]	; (800034c <HAL_MspInit+0x5c>)
 8000314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000318:	61d3      	str	r3, [r2, #28]
 800031a:	4b0c      	ldr	r3, [pc, #48]	; (800034c <HAL_MspInit+0x5c>)
 800031c:	69db      	ldr	r3, [r3, #28]
 800031e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000326:	4b0a      	ldr	r3, [pc, #40]	; (8000350 <HAL_MspInit+0x60>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <HAL_MspInit+0x60>)
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000342:	bf00      	nop
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	40021000 	.word	0x40021000
 8000350:	40010000 	.word	0x40010000

08000354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000358:	e7fe      	b.n	8000358 <NMI_Handler+0x4>

0800035a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800035e:	e7fe      	b.n	800035e <HardFault_Handler+0x4>

08000360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000364:	e7fe      	b.n	8000364 <MemManage_Handler+0x4>

08000366 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000366:	b480      	push	{r7}
 8000368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800036a:	e7fe      	b.n	800036a <BusFault_Handler+0x4>

0800036c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000370:	e7fe      	b.n	8000370 <UsageFault_Handler+0x4>

08000372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000372:	b480      	push	{r7}
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000376:	bf00      	nop
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr

0800037e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800037e:	b480      	push	{r7}
 8000380:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000382:	bf00      	nop
 8000384:	46bd      	mov	sp, r7
 8000386:	bc80      	pop	{r7}
 8000388:	4770      	bx	lr

0800038a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800038a:	b480      	push	{r7}
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800038e:	bf00      	nop
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr

08000396 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800039a:	f000 f99f 	bl	80006dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
	...

080003a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80003a8:	4802      	ldr	r0, [pc, #8]	; (80003b4 <TIM3_IRQHandler+0x10>)
 80003aa:	f001 f993 	bl	80016d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	20000028 	.word	0x20000028

080003b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003bc:	bf00      	nop
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr

080003c4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b08a      	sub	sp, #40	; 0x28
 80003c8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ca:	f107 0320 	add.w	r3, r7, #32
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
 80003e0:	611a      	str	r2, [r3, #16]
 80003e2:	615a      	str	r2, [r3, #20]
 80003e4:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80003e6:	4b22      	ldr	r3, [pc, #136]	; (8000470 <MX_TIM3_Init+0xac>)
 80003e8:	4a22      	ldr	r2, [pc, #136]	; (8000474 <MX_TIM3_Init+0xb0>)
 80003ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 40-1;
 80003ec:	4b20      	ldr	r3, [pc, #128]	; (8000470 <MX_TIM3_Init+0xac>)
 80003ee:	2227      	movs	r2, #39	; 0x27
 80003f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f2:	4b1f      	ldr	r3, [pc, #124]	; (8000470 <MX_TIM3_Init+0xac>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80003f8:	4b1d      	ldr	r3, [pc, #116]	; (8000470 <MX_TIM3_Init+0xac>)
 80003fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000400:	4b1b      	ldr	r3, [pc, #108]	; (8000470 <MX_TIM3_Init+0xac>)
 8000402:	2200      	movs	r2, #0
 8000404:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000406:	4b1a      	ldr	r3, [pc, #104]	; (8000470 <MX_TIM3_Init+0xac>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800040c:	4818      	ldr	r0, [pc, #96]	; (8000470 <MX_TIM3_Init+0xac>)
 800040e:	f001 f86f 	bl	80014f0 <HAL_TIM_PWM_Init>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000418:	f7ff ff65 	bl	80002e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800041c:	2300      	movs	r3, #0
 800041e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000420:	2300      	movs	r3, #0
 8000422:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000424:	f107 0320 	add.w	r3, r7, #32
 8000428:	4619      	mov	r1, r3
 800042a:	4811      	ldr	r0, [pc, #68]	; (8000470 <MX_TIM3_Init+0xac>)
 800042c:	f001 fd54 	bl	8001ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000436:	f7ff ff56 	bl	80002e6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800043a:	2360      	movs	r3, #96	; 0x60
 800043c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 800043e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000442:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000444:	2300      	movs	r3, #0
 8000446:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	2204      	movs	r2, #4
 8000450:	4619      	mov	r1, r3
 8000452:	4807      	ldr	r0, [pc, #28]	; (8000470 <MX_TIM3_Init+0xac>)
 8000454:	f001 fa46 	bl	80018e4 <HAL_TIM_PWM_ConfigChannel>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800045e:	f7ff ff42 	bl	80002e6 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000462:	4803      	ldr	r0, [pc, #12]	; (8000470 <MX_TIM3_Init+0xac>)
 8000464:	f000 f826 	bl	80004b4 <HAL_TIM_MspPostInit>

}
 8000468:	bf00      	nop
 800046a:	3728      	adds	r7, #40	; 0x28
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20000028 	.word	0x20000028
 8000474:	40000400 	.word	0x40000400

08000478 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a09      	ldr	r2, [pc, #36]	; (80004ac <HAL_TIM_PWM_MspInit+0x34>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d10b      	bne.n	80004a2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800048a:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <HAL_TIM_PWM_MspInit+0x38>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	4a08      	ldr	r2, [pc, #32]	; (80004b0 <HAL_TIM_PWM_MspInit+0x38>)
 8000490:	f043 0302 	orr.w	r3, r3, #2
 8000494:	61d3      	str	r3, [r2, #28]
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <HAL_TIM_PWM_MspInit+0x38>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	f003 0302 	and.w	r3, r3, #2
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr
 80004ac:	40000400 	.word	0x40000400
 80004b0:	40021000 	.word	0x40021000

080004b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b088      	sub	sp, #32
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004bc:	f107 0310 	add.w	r3, r7, #16
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a0f      	ldr	r2, [pc, #60]	; (800050c <HAL_TIM_MspPostInit+0x58>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d117      	bne.n	8000504 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d4:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <HAL_TIM_MspPostInit+0x5c>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <HAL_TIM_MspPostInit+0x5c>)
 80004da:	f043 0304 	orr.w	r3, r3, #4
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_TIM_MspPostInit+0x5c>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0304 	and.w	r3, r3, #4
 80004e8:	60fb      	str	r3, [r7, #12]
 80004ea:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f0:	2302      	movs	r3, #2
 80004f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	2302      	movs	r3, #2
 80004f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	4619      	mov	r1, r3
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <HAL_TIM_MspPostInit+0x60>)
 8000500:	f000 fa16 	bl	8000930 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000504:	bf00      	nop
 8000506:	3720      	adds	r7, #32
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40000400 	.word	0x40000400
 8000510:	40021000 	.word	0x40021000
 8000514:	40010800 	.word	0x40010800

08000518 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800051c:	4b11      	ldr	r3, [pc, #68]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 800051e:	4a12      	ldr	r2, [pc, #72]	; (8000568 <MX_USART1_UART_Init+0x50>)
 8000520:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000522:	4b10      	ldr	r3, [pc, #64]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 8000524:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000528:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800053c:	4b09      	ldr	r3, [pc, #36]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 800053e:	220c      	movs	r2, #12
 8000540:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000542:	4b08      	ldr	r3, [pc, #32]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 8000544:	2200      	movs	r2, #0
 8000546:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 800054a:	2200      	movs	r2, #0
 800054c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800054e:	4805      	ldr	r0, [pc, #20]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 8000550:	f001 fd32 	bl	8001fb8 <HAL_UART_Init>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800055a:	f7ff fec4 	bl	80002e6 <Error_Handler>
  }

}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000070 	.word	0x20000070
 8000568:	40013800 	.word	0x40013800

0800056c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a1c      	ldr	r2, [pc, #112]	; (80005f8 <HAL_UART_MspInit+0x8c>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d131      	bne.n	80005f0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800058c:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <HAL_UART_MspInit+0x90>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a1a      	ldr	r2, [pc, #104]	; (80005fc <HAL_UART_MspInit+0x90>)
 8000592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000596:	6193      	str	r3, [r2, #24]
 8000598:	4b18      	ldr	r3, [pc, #96]	; (80005fc <HAL_UART_MspInit+0x90>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a4:	4b15      	ldr	r3, [pc, #84]	; (80005fc <HAL_UART_MspInit+0x90>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a14      	ldr	r2, [pc, #80]	; (80005fc <HAL_UART_MspInit+0x90>)
 80005aa:	f043 0304 	orr.w	r3, r3, #4
 80005ae:	6193      	str	r3, [r2, #24]
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <HAL_UART_MspInit+0x90>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	f003 0304 	and.w	r3, r3, #4
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c2:	2302      	movs	r3, #2
 80005c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c6:	2303      	movs	r3, #3
 80005c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ca:	f107 0310 	add.w	r3, r7, #16
 80005ce:	4619      	mov	r1, r3
 80005d0:	480b      	ldr	r0, [pc, #44]	; (8000600 <HAL_UART_MspInit+0x94>)
 80005d2:	f000 f9ad 	bl	8000930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e4:	f107 0310 	add.w	r3, r7, #16
 80005e8:	4619      	mov	r1, r3
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <HAL_UART_MspInit+0x94>)
 80005ec:	f000 f9a0 	bl	8000930 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80005f0:	bf00      	nop
 80005f2:	3720      	adds	r7, #32
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40013800 	.word	0x40013800
 80005fc:	40021000 	.word	0x40021000
 8000600:	40010800 	.word	0x40010800

08000604 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000604:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000606:	e003      	b.n	8000610 <LoopCopyDataInit>

08000608 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000608:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800060a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800060c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800060e:	3104      	adds	r1, #4

08000610 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000610:	480a      	ldr	r0, [pc, #40]	; (800063c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000614:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000616:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000618:	d3f6      	bcc.n	8000608 <CopyDataInit>
  ldr r2, =_sbss
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800061c:	e002      	b.n	8000624 <LoopFillZerobss>

0800061e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000620:	f842 3b04 	str.w	r3, [r2], #4

08000624 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000626:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000628:	d3f9      	bcc.n	800061e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800062a:	f7ff fec5 	bl	80003b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800062e:	f001 fd9f 	bl	8002170 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000632:	f7ff fdeb 	bl	800020c <main>
  bx lr
 8000636:	4770      	bx	lr
  ldr r3, =_sidata
 8000638:	08002214 	.word	0x08002214
  ldr r0, =_sdata
 800063c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000640:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000644:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000648:	200000b4 	.word	0x200000b4

0800064c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800064c:	e7fe      	b.n	800064c <ADC1_2_IRQHandler>
	...

08000650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <HAL_Init+0x28>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <HAL_Init+0x28>)
 800065a:	f043 0310 	orr.w	r3, r3, #16
 800065e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000660:	2003      	movs	r0, #3
 8000662:	f000 f923 	bl	80008ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000666:	2000      	movs	r0, #0
 8000668:	f000 f808 	bl	800067c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800066c:	f7ff fe40 	bl	80002f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40022000 	.word	0x40022000

0800067c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <HAL_InitTick+0x54>)
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <HAL_InitTick+0x58>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	4619      	mov	r1, r3
 800068e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000692:	fbb3 f3f1 	udiv	r3, r3, r1
 8000696:	fbb2 f3f3 	udiv	r3, r2, r3
 800069a:	4618      	mov	r0, r3
 800069c:	f000 f93b 	bl	8000916 <HAL_SYSTICK_Config>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
 80006a8:	e00e      	b.n	80006c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2b0f      	cmp	r3, #15
 80006ae:	d80a      	bhi.n	80006c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b0:	2200      	movs	r2, #0
 80006b2:	6879      	ldr	r1, [r7, #4]
 80006b4:	f04f 30ff 	mov.w	r0, #4294967295
 80006b8:	f000 f903 	bl	80008c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006bc:	4a06      	ldr	r2, [pc, #24]	; (80006d8 <HAL_InitTick+0x5c>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006c2:	2300      	movs	r3, #0
 80006c4:	e000      	b.n	80006c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006c6:	2301      	movs	r3, #1
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000000 	.word	0x20000000
 80006d4:	20000008 	.word	0x20000008
 80006d8:	20000004 	.word	0x20000004

080006dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <HAL_IncTick+0x1c>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b05      	ldr	r3, [pc, #20]	; (80006fc <HAL_IncTick+0x20>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4413      	add	r3, r2
 80006ec:	4a03      	ldr	r2, [pc, #12]	; (80006fc <HAL_IncTick+0x20>)
 80006ee:	6013      	str	r3, [r2, #0]
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	20000008 	.word	0x20000008
 80006fc:	200000b0 	.word	0x200000b0

08000700 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  return uwTick;
 8000704:	4b02      	ldr	r3, [pc, #8]	; (8000710 <HAL_GetTick+0x10>)
 8000706:	681b      	ldr	r3, [r3, #0]
}
 8000708:	4618      	mov	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	200000b0 	.word	0x200000b0

08000714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f003 0307 	and.w	r3, r3, #7
 8000722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <__NVIC_SetPriorityGrouping+0x44>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000730:	4013      	ands	r3, r2
 8000732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800073c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000746:	4a04      	ldr	r2, [pc, #16]	; (8000758 <__NVIC_SetPriorityGrouping+0x44>)
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	60d3      	str	r3, [r2, #12]
}
 800074c:	bf00      	nop
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000760:	4b04      	ldr	r3, [pc, #16]	; (8000774 <__NVIC_GetPriorityGrouping+0x18>)
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	0a1b      	lsrs	r3, r3, #8
 8000766:	f003 0307 	and.w	r3, r3, #7
}
 800076a:	4618      	mov	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000786:	2b00      	cmp	r3, #0
 8000788:	db0b      	blt.n	80007a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	f003 021f 	and.w	r2, r3, #31
 8000790:	4906      	ldr	r1, [pc, #24]	; (80007ac <__NVIC_EnableIRQ+0x34>)
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	095b      	lsrs	r3, r3, #5
 8000798:	2001      	movs	r0, #1
 800079a:	fa00 f202 	lsl.w	r2, r0, r2
 800079e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	e000e100 	.word	0xe000e100

080007b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	6039      	str	r1, [r7, #0]
 80007ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	db0a      	blt.n	80007da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	490c      	ldr	r1, [pc, #48]	; (80007fc <__NVIC_SetPriority+0x4c>)
 80007ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ce:	0112      	lsls	r2, r2, #4
 80007d0:	b2d2      	uxtb	r2, r2
 80007d2:	440b      	add	r3, r1
 80007d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007d8:	e00a      	b.n	80007f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4908      	ldr	r1, [pc, #32]	; (8000800 <__NVIC_SetPriority+0x50>)
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	f003 030f 	and.w	r3, r3, #15
 80007e6:	3b04      	subs	r3, #4
 80007e8:	0112      	lsls	r2, r2, #4
 80007ea:	b2d2      	uxtb	r2, r2
 80007ec:	440b      	add	r3, r1
 80007ee:	761a      	strb	r2, [r3, #24]
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000e100 	.word	0xe000e100
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000804:	b480      	push	{r7}
 8000806:	b089      	sub	sp, #36	; 0x24
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	f1c3 0307 	rsb	r3, r3, #7
 800081e:	2b04      	cmp	r3, #4
 8000820:	bf28      	it	cs
 8000822:	2304      	movcs	r3, #4
 8000824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	3304      	adds	r3, #4
 800082a:	2b06      	cmp	r3, #6
 800082c:	d902      	bls.n	8000834 <NVIC_EncodePriority+0x30>
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	3b03      	subs	r3, #3
 8000832:	e000      	b.n	8000836 <NVIC_EncodePriority+0x32>
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000838:	f04f 32ff 	mov.w	r2, #4294967295
 800083c:	69bb      	ldr	r3, [r7, #24]
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	43da      	mvns	r2, r3
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	401a      	ands	r2, r3
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800084c:	f04f 31ff 	mov.w	r1, #4294967295
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	fa01 f303 	lsl.w	r3, r1, r3
 8000856:	43d9      	mvns	r1, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800085c:	4313      	orrs	r3, r2
         );
}
 800085e:	4618      	mov	r0, r3
 8000860:	3724      	adds	r7, #36	; 0x24
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3b01      	subs	r3, #1
 8000874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000878:	d301      	bcc.n	800087e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800087a:	2301      	movs	r3, #1
 800087c:	e00f      	b.n	800089e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <SysTick_Config+0x40>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3b01      	subs	r3, #1
 8000884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000886:	210f      	movs	r1, #15
 8000888:	f04f 30ff 	mov.w	r0, #4294967295
 800088c:	f7ff ff90 	bl	80007b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <SysTick_Config+0x40>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000896:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <SysTick_Config+0x40>)
 8000898:	2207      	movs	r2, #7
 800089a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	e000e010 	.word	0xe000e010

080008ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff ff2d 	bl	8000714 <__NVIC_SetPriorityGrouping>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b086      	sub	sp, #24
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	4603      	mov	r3, r0
 80008ca:	60b9      	str	r1, [r7, #8]
 80008cc:	607a      	str	r2, [r7, #4]
 80008ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008d4:	f7ff ff42 	bl	800075c <__NVIC_GetPriorityGrouping>
 80008d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	68b9      	ldr	r1, [r7, #8]
 80008de:	6978      	ldr	r0, [r7, #20]
 80008e0:	f7ff ff90 	bl	8000804 <NVIC_EncodePriority>
 80008e4:	4602      	mov	r2, r0
 80008e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ea:	4611      	mov	r1, r2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ff5f 	bl	80007b0 <__NVIC_SetPriority>
}
 80008f2:	bf00      	nop
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b082      	sub	sp, #8
 80008fe:	af00      	add	r7, sp, #0
 8000900:	4603      	mov	r3, r0
 8000902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff35 	bl	8000778 <__NVIC_EnableIRQ>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff ffa2 	bl	8000868 <SysTick_Config>
 8000924:	4603      	mov	r3, r0
}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000930:	b480      	push	{r7}
 8000932:	b08b      	sub	sp, #44	; 0x2c
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000942:	e127      	b.n	8000b94 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000944:	2201      	movs	r2, #1
 8000946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	69fa      	ldr	r2, [r7, #28]
 8000954:	4013      	ands	r3, r2
 8000956:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	429a      	cmp	r2, r3
 800095e:	f040 8116 	bne.w	8000b8e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	2b12      	cmp	r3, #18
 8000968:	d034      	beq.n	80009d4 <HAL_GPIO_Init+0xa4>
 800096a:	2b12      	cmp	r3, #18
 800096c:	d80d      	bhi.n	800098a <HAL_GPIO_Init+0x5a>
 800096e:	2b02      	cmp	r3, #2
 8000970:	d02b      	beq.n	80009ca <HAL_GPIO_Init+0x9a>
 8000972:	2b02      	cmp	r3, #2
 8000974:	d804      	bhi.n	8000980 <HAL_GPIO_Init+0x50>
 8000976:	2b00      	cmp	r3, #0
 8000978:	d031      	beq.n	80009de <HAL_GPIO_Init+0xae>
 800097a:	2b01      	cmp	r3, #1
 800097c:	d01c      	beq.n	80009b8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800097e:	e048      	b.n	8000a12 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000980:	2b03      	cmp	r3, #3
 8000982:	d043      	beq.n	8000a0c <HAL_GPIO_Init+0xdc>
 8000984:	2b11      	cmp	r3, #17
 8000986:	d01b      	beq.n	80009c0 <HAL_GPIO_Init+0x90>
          break;
 8000988:	e043      	b.n	8000a12 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800098a:	4a89      	ldr	r2, [pc, #548]	; (8000bb0 <HAL_GPIO_Init+0x280>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d026      	beq.n	80009de <HAL_GPIO_Init+0xae>
 8000990:	4a87      	ldr	r2, [pc, #540]	; (8000bb0 <HAL_GPIO_Init+0x280>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d806      	bhi.n	80009a4 <HAL_GPIO_Init+0x74>
 8000996:	4a87      	ldr	r2, [pc, #540]	; (8000bb4 <HAL_GPIO_Init+0x284>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d020      	beq.n	80009de <HAL_GPIO_Init+0xae>
 800099c:	4a86      	ldr	r2, [pc, #536]	; (8000bb8 <HAL_GPIO_Init+0x288>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d01d      	beq.n	80009de <HAL_GPIO_Init+0xae>
          break;
 80009a2:	e036      	b.n	8000a12 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009a4:	4a85      	ldr	r2, [pc, #532]	; (8000bbc <HAL_GPIO_Init+0x28c>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d019      	beq.n	80009de <HAL_GPIO_Init+0xae>
 80009aa:	4a85      	ldr	r2, [pc, #532]	; (8000bc0 <HAL_GPIO_Init+0x290>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d016      	beq.n	80009de <HAL_GPIO_Init+0xae>
 80009b0:	4a84      	ldr	r2, [pc, #528]	; (8000bc4 <HAL_GPIO_Init+0x294>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d013      	beq.n	80009de <HAL_GPIO_Init+0xae>
          break;
 80009b6:	e02c      	b.n	8000a12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	623b      	str	r3, [r7, #32]
          break;
 80009be:	e028      	b.n	8000a12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	3304      	adds	r3, #4
 80009c6:	623b      	str	r3, [r7, #32]
          break;
 80009c8:	e023      	b.n	8000a12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	68db      	ldr	r3, [r3, #12]
 80009ce:	3308      	adds	r3, #8
 80009d0:	623b      	str	r3, [r7, #32]
          break;
 80009d2:	e01e      	b.n	8000a12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	330c      	adds	r3, #12
 80009da:	623b      	str	r3, [r7, #32]
          break;
 80009dc:	e019      	b.n	8000a12 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d102      	bne.n	80009ec <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009e6:	2304      	movs	r3, #4
 80009e8:	623b      	str	r3, [r7, #32]
          break;
 80009ea:	e012      	b.n	8000a12 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d105      	bne.n	8000a00 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009f4:	2308      	movs	r3, #8
 80009f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	69fa      	ldr	r2, [r7, #28]
 80009fc:	611a      	str	r2, [r3, #16]
          break;
 80009fe:	e008      	b.n	8000a12 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a00:	2308      	movs	r3, #8
 8000a02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	69fa      	ldr	r2, [r7, #28]
 8000a08:	615a      	str	r2, [r3, #20]
          break;
 8000a0a:	e002      	b.n	8000a12 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
          break;
 8000a10:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	2bff      	cmp	r3, #255	; 0xff
 8000a16:	d801      	bhi.n	8000a1c <HAL_GPIO_Init+0xec>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	e001      	b.n	8000a20 <HAL_GPIO_Init+0xf0>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3304      	adds	r3, #4
 8000a20:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	2bff      	cmp	r3, #255	; 0xff
 8000a26:	d802      	bhi.n	8000a2e <HAL_GPIO_Init+0xfe>
 8000a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	e002      	b.n	8000a34 <HAL_GPIO_Init+0x104>
 8000a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a30:	3b08      	subs	r3, #8
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	210f      	movs	r1, #15
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a42:	43db      	mvns	r3, r3
 8000a44:	401a      	ands	r2, r3
 8000a46:	6a39      	ldr	r1, [r7, #32]
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4e:	431a      	orrs	r2, r3
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	f000 8096 	beq.w	8000b8e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a62:	4b59      	ldr	r3, [pc, #356]	; (8000bc8 <HAL_GPIO_Init+0x298>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	4a58      	ldr	r2, [pc, #352]	; (8000bc8 <HAL_GPIO_Init+0x298>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6193      	str	r3, [r2, #24]
 8000a6e:	4b56      	ldr	r3, [pc, #344]	; (8000bc8 <HAL_GPIO_Init+0x298>)
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a7a:	4a54      	ldr	r2, [pc, #336]	; (8000bcc <HAL_GPIO_Init+0x29c>)
 8000a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7e:	089b      	lsrs	r3, r3, #2
 8000a80:	3302      	adds	r3, #2
 8000a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a86:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8a:	f003 0303 	and.w	r3, r3, #3
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	220f      	movs	r2, #15
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	43db      	mvns	r3, r3
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a4b      	ldr	r2, [pc, #300]	; (8000bd0 <HAL_GPIO_Init+0x2a0>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d013      	beq.n	8000ace <HAL_GPIO_Init+0x19e>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a4a      	ldr	r2, [pc, #296]	; (8000bd4 <HAL_GPIO_Init+0x2a4>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d00d      	beq.n	8000aca <HAL_GPIO_Init+0x19a>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a49      	ldr	r2, [pc, #292]	; (8000bd8 <HAL_GPIO_Init+0x2a8>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d007      	beq.n	8000ac6 <HAL_GPIO_Init+0x196>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a48      	ldr	r2, [pc, #288]	; (8000bdc <HAL_GPIO_Init+0x2ac>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d101      	bne.n	8000ac2 <HAL_GPIO_Init+0x192>
 8000abe:	2303      	movs	r3, #3
 8000ac0:	e006      	b.n	8000ad0 <HAL_GPIO_Init+0x1a0>
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	e004      	b.n	8000ad0 <HAL_GPIO_Init+0x1a0>
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	e002      	b.n	8000ad0 <HAL_GPIO_Init+0x1a0>
 8000aca:	2301      	movs	r3, #1
 8000acc:	e000      	b.n	8000ad0 <HAL_GPIO_Init+0x1a0>
 8000ace:	2300      	movs	r3, #0
 8000ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ad2:	f002 0203 	and.w	r2, r2, #3
 8000ad6:	0092      	lsls	r2, r2, #2
 8000ad8:	4093      	lsls	r3, r2
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ae0:	493a      	ldr	r1, [pc, #232]	; (8000bcc <HAL_GPIO_Init+0x29c>)
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae4:	089b      	lsrs	r3, r3, #2
 8000ae6:	3302      	adds	r3, #2
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d006      	beq.n	8000b08 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000afa:	4b39      	ldr	r3, [pc, #228]	; (8000be0 <HAL_GPIO_Init+0x2b0>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	4938      	ldr	r1, [pc, #224]	; (8000be0 <HAL_GPIO_Init+0x2b0>)
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	600b      	str	r3, [r1, #0]
 8000b06:	e006      	b.n	8000b16 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b08:	4b35      	ldr	r3, [pc, #212]	; (8000be0 <HAL_GPIO_Init+0x2b0>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	4933      	ldr	r1, [pc, #204]	; (8000be0 <HAL_GPIO_Init+0x2b0>)
 8000b12:	4013      	ands	r3, r2
 8000b14:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d006      	beq.n	8000b30 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b22:	4b2f      	ldr	r3, [pc, #188]	; (8000be0 <HAL_GPIO_Init+0x2b0>)
 8000b24:	685a      	ldr	r2, [r3, #4]
 8000b26:	492e      	ldr	r1, [pc, #184]	; (8000be0 <HAL_GPIO_Init+0x2b0>)
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	604b      	str	r3, [r1, #4]
 8000b2e:	e006      	b.n	8000b3e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b30:	4b2b      	ldr	r3, [pc, #172]	; (8000be0 <HAL_GPIO_Init+0x2b0>)
 8000b32:	685a      	ldr	r2, [r3, #4]
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	43db      	mvns	r3, r3
 8000b38:	4929      	ldr	r1, [pc, #164]	; (8000be0 <HAL_GPIO_Init+0x2b0>)
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d006      	beq.n	8000b58 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b4a:	4b25      	ldr	r3, [pc, #148]	; (8000be0 <HAL_GPIO_Init+0x2b0>)
 8000b4c:	689a      	ldr	r2, [r3, #8]
 8000b4e:	4924      	ldr	r1, [pc, #144]	; (8000be0 <HAL_GPIO_Init+0x2b0>)
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	608b      	str	r3, [r1, #8]
 8000b56:	e006      	b.n	8000b66 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b58:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <HAL_GPIO_Init+0x2b0>)
 8000b5a:	689a      	ldr	r2, [r3, #8]
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	491f      	ldr	r1, [pc, #124]	; (8000be0 <HAL_GPIO_Init+0x2b0>)
 8000b62:	4013      	ands	r3, r2
 8000b64:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d006      	beq.n	8000b80 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b72:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <HAL_GPIO_Init+0x2b0>)
 8000b74:	68da      	ldr	r2, [r3, #12]
 8000b76:	491a      	ldr	r1, [pc, #104]	; (8000be0 <HAL_GPIO_Init+0x2b0>)
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	60cb      	str	r3, [r1, #12]
 8000b7e:	e006      	b.n	8000b8e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b80:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <HAL_GPIO_Init+0x2b0>)
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	43db      	mvns	r3, r3
 8000b88:	4915      	ldr	r1, [pc, #84]	; (8000be0 <HAL_GPIO_Init+0x2b0>)
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b90:	3301      	adds	r3, #1
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f47f aed0 	bne.w	8000944 <HAL_GPIO_Init+0x14>
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	372c      	adds	r7, #44	; 0x2c
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	10210000 	.word	0x10210000
 8000bb4:	10110000 	.word	0x10110000
 8000bb8:	10120000 	.word	0x10120000
 8000bbc:	10310000 	.word	0x10310000
 8000bc0:	10320000 	.word	0x10320000
 8000bc4:	10220000 	.word	0x10220000
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40010000 	.word	0x40010000
 8000bd0:	40010800 	.word	0x40010800
 8000bd4:	40010c00 	.word	0x40010c00
 8000bd8:	40011000 	.word	0x40011000
 8000bdc:	40011400 	.word	0x40011400
 8000be0:	40010400 	.word	0x40010400

08000be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	807b      	strh	r3, [r7, #2]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bf4:	787b      	ldrb	r3, [r7, #1]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d003      	beq.n	8000c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bfa:	887a      	ldrh	r2, [r7, #2]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c00:	e003      	b.n	8000c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c02:	887b      	ldrh	r3, [r7, #2]
 8000c04:	041a      	lsls	r2, r3, #16
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	611a      	str	r2, [r3, #16]
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e26c      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f000 8087 	beq.w	8000d42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c34:	4b92      	ldr	r3, [pc, #584]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 030c 	and.w	r3, r3, #12
 8000c3c:	2b04      	cmp	r3, #4
 8000c3e:	d00c      	beq.n	8000c5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c40:	4b8f      	ldr	r3, [pc, #572]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f003 030c 	and.w	r3, r3, #12
 8000c48:	2b08      	cmp	r3, #8
 8000c4a:	d112      	bne.n	8000c72 <HAL_RCC_OscConfig+0x5e>
 8000c4c:	4b8c      	ldr	r3, [pc, #560]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c58:	d10b      	bne.n	8000c72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c5a:	4b89      	ldr	r3, [pc, #548]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d06c      	beq.n	8000d40 <HAL_RCC_OscConfig+0x12c>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d168      	bne.n	8000d40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e246      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c7a:	d106      	bne.n	8000c8a <HAL_RCC_OscConfig+0x76>
 8000c7c:	4b80      	ldr	r3, [pc, #512]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a7f      	ldr	r2, [pc, #508]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	e02e      	b.n	8000ce8 <HAL_RCC_OscConfig+0xd4>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d10c      	bne.n	8000cac <HAL_RCC_OscConfig+0x98>
 8000c92:	4b7b      	ldr	r3, [pc, #492]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a7a      	ldr	r2, [pc, #488]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	4b78      	ldr	r3, [pc, #480]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a77      	ldr	r2, [pc, #476]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	e01d      	b.n	8000ce8 <HAL_RCC_OscConfig+0xd4>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cb4:	d10c      	bne.n	8000cd0 <HAL_RCC_OscConfig+0xbc>
 8000cb6:	4b72      	ldr	r3, [pc, #456]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a71      	ldr	r2, [pc, #452]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	4b6f      	ldr	r3, [pc, #444]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a6e      	ldr	r2, [pc, #440]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	e00b      	b.n	8000ce8 <HAL_RCC_OscConfig+0xd4>
 8000cd0:	4b6b      	ldr	r3, [pc, #428]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a6a      	ldr	r2, [pc, #424]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cda:	6013      	str	r3, [r2, #0]
 8000cdc:	4b68      	ldr	r3, [pc, #416]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a67      	ldr	r2, [pc, #412]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ce6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d013      	beq.n	8000d18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf0:	f7ff fd06 	bl	8000700 <HAL_GetTick>
 8000cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf6:	e008      	b.n	8000d0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cf8:	f7ff fd02 	bl	8000700 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	2b64      	cmp	r3, #100	; 0x64
 8000d04:	d901      	bls.n	8000d0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d06:	2303      	movs	r3, #3
 8000d08:	e1fa      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0a:	4b5d      	ldr	r3, [pc, #372]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d0f0      	beq.n	8000cf8 <HAL_RCC_OscConfig+0xe4>
 8000d16:	e014      	b.n	8000d42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d18:	f7ff fcf2 	bl	8000700 <HAL_GetTick>
 8000d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d1e:	e008      	b.n	8000d32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d20:	f7ff fcee 	bl	8000700 <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	2b64      	cmp	r3, #100	; 0x64
 8000d2c:	d901      	bls.n	8000d32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e1e6      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d32:	4b53      	ldr	r3, [pc, #332]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d1f0      	bne.n	8000d20 <HAL_RCC_OscConfig+0x10c>
 8000d3e:	e000      	b.n	8000d42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d063      	beq.n	8000e16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d4e:	4b4c      	ldr	r3, [pc, #304]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f003 030c 	and.w	r3, r3, #12
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d00b      	beq.n	8000d72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d5a:	4b49      	ldr	r3, [pc, #292]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f003 030c 	and.w	r3, r3, #12
 8000d62:	2b08      	cmp	r3, #8
 8000d64:	d11c      	bne.n	8000da0 <HAL_RCC_OscConfig+0x18c>
 8000d66:	4b46      	ldr	r3, [pc, #280]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d116      	bne.n	8000da0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d72:	4b43      	ldr	r3, [pc, #268]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d005      	beq.n	8000d8a <HAL_RCC_OscConfig+0x176>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	691b      	ldr	r3, [r3, #16]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d001      	beq.n	8000d8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e1ba      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d8a:	4b3d      	ldr	r3, [pc, #244]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	4939      	ldr	r1, [pc, #228]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d9e:	e03a      	b.n	8000e16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	691b      	ldr	r3, [r3, #16]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d020      	beq.n	8000dea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000da8:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <HAL_RCC_OscConfig+0x270>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dae:	f7ff fca7 	bl	8000700 <HAL_GetTick>
 8000db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db4:	e008      	b.n	8000dc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000db6:	f7ff fca3 	bl	8000700 <HAL_GetTick>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d901      	bls.n	8000dc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	e19b      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dc8:	4b2d      	ldr	r3, [pc, #180]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d0f0      	beq.n	8000db6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dd4:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	4927      	ldr	r1, [pc, #156]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	4313      	orrs	r3, r2
 8000de6:	600b      	str	r3, [r1, #0]
 8000de8:	e015      	b.n	8000e16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dea:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <HAL_RCC_OscConfig+0x270>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df0:	f7ff fc86 	bl	8000700 <HAL_GetTick>
 8000df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000df8:	f7ff fc82 	bl	8000700 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e17a      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f0      	bne.n	8000df8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d03a      	beq.n	8000e98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d019      	beq.n	8000e5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e30:	f7ff fc66 	bl	8000700 <HAL_GetTick>
 8000e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e36:	e008      	b.n	8000e4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e38:	f7ff fc62 	bl	8000700 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d901      	bls.n	8000e4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e15a      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d0f0      	beq.n	8000e38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e56:	2001      	movs	r0, #1
 8000e58:	f000 fada 	bl	8001410 <RCC_Delay>
 8000e5c:	e01c      	b.n	8000e98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e64:	f7ff fc4c 	bl	8000700 <HAL_GetTick>
 8000e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e6a:	e00f      	b.n	8000e8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e6c:	f7ff fc48 	bl	8000700 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d908      	bls.n	8000e8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e140      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000
 8000e84:	42420000 	.word	0x42420000
 8000e88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e8c:	4b9e      	ldr	r3, [pc, #632]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1e9      	bne.n	8000e6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 0304 	and.w	r3, r3, #4
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f000 80a6 	beq.w	8000ff2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eaa:	4b97      	ldr	r3, [pc, #604]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d10d      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	4b94      	ldr	r3, [pc, #592]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	4a93      	ldr	r2, [pc, #588]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	61d3      	str	r3, [r2, #28]
 8000ec2:	4b91      	ldr	r3, [pc, #580]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed2:	4b8e      	ldr	r3, [pc, #568]	; (800110c <HAL_RCC_OscConfig+0x4f8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d118      	bne.n	8000f10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ede:	4b8b      	ldr	r3, [pc, #556]	; (800110c <HAL_RCC_OscConfig+0x4f8>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a8a      	ldr	r2, [pc, #552]	; (800110c <HAL_RCC_OscConfig+0x4f8>)
 8000ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eea:	f7ff fc09 	bl	8000700 <HAL_GetTick>
 8000eee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef0:	e008      	b.n	8000f04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ef2:	f7ff fc05 	bl	8000700 <HAL_GetTick>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b64      	cmp	r3, #100	; 0x64
 8000efe:	d901      	bls.n	8000f04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e0fd      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f04:	4b81      	ldr	r3, [pc, #516]	; (800110c <HAL_RCC_OscConfig+0x4f8>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0f0      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d106      	bne.n	8000f26 <HAL_RCC_OscConfig+0x312>
 8000f18:	4b7b      	ldr	r3, [pc, #492]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	4a7a      	ldr	r2, [pc, #488]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6213      	str	r3, [r2, #32]
 8000f24:	e02d      	b.n	8000f82 <HAL_RCC_OscConfig+0x36e>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10c      	bne.n	8000f48 <HAL_RCC_OscConfig+0x334>
 8000f2e:	4b76      	ldr	r3, [pc, #472]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f30:	6a1b      	ldr	r3, [r3, #32]
 8000f32:	4a75      	ldr	r2, [pc, #468]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f34:	f023 0301 	bic.w	r3, r3, #1
 8000f38:	6213      	str	r3, [r2, #32]
 8000f3a:	4b73      	ldr	r3, [pc, #460]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f3c:	6a1b      	ldr	r3, [r3, #32]
 8000f3e:	4a72      	ldr	r2, [pc, #456]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f40:	f023 0304 	bic.w	r3, r3, #4
 8000f44:	6213      	str	r3, [r2, #32]
 8000f46:	e01c      	b.n	8000f82 <HAL_RCC_OscConfig+0x36e>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	2b05      	cmp	r3, #5
 8000f4e:	d10c      	bne.n	8000f6a <HAL_RCC_OscConfig+0x356>
 8000f50:	4b6d      	ldr	r3, [pc, #436]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f52:	6a1b      	ldr	r3, [r3, #32]
 8000f54:	4a6c      	ldr	r2, [pc, #432]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f56:	f043 0304 	orr.w	r3, r3, #4
 8000f5a:	6213      	str	r3, [r2, #32]
 8000f5c:	4b6a      	ldr	r3, [pc, #424]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
 8000f60:	4a69      	ldr	r2, [pc, #420]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	6213      	str	r3, [r2, #32]
 8000f68:	e00b      	b.n	8000f82 <HAL_RCC_OscConfig+0x36e>
 8000f6a:	4b67      	ldr	r3, [pc, #412]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f6c:	6a1b      	ldr	r3, [r3, #32]
 8000f6e:	4a66      	ldr	r2, [pc, #408]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f70:	f023 0301 	bic.w	r3, r3, #1
 8000f74:	6213      	str	r3, [r2, #32]
 8000f76:	4b64      	ldr	r3, [pc, #400]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f78:	6a1b      	ldr	r3, [r3, #32]
 8000f7a:	4a63      	ldr	r2, [pc, #396]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f7c:	f023 0304 	bic.w	r3, r3, #4
 8000f80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d015      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f8a:	f7ff fbb9 	bl	8000700 <HAL_GetTick>
 8000f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f90:	e00a      	b.n	8000fa8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f92:	f7ff fbb5 	bl	8000700 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e0ab      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fa8:	4b57      	ldr	r3, [pc, #348]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000faa:	6a1b      	ldr	r3, [r3, #32]
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0ee      	beq.n	8000f92 <HAL_RCC_OscConfig+0x37e>
 8000fb4:	e014      	b.n	8000fe0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb6:	f7ff fba3 	bl	8000700 <HAL_GetTick>
 8000fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fbc:	e00a      	b.n	8000fd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fbe:	f7ff fb9f 	bl	8000700 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e095      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fd4:	4b4c      	ldr	r3, [pc, #304]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1ee      	bne.n	8000fbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fe0:	7dfb      	ldrb	r3, [r7, #23]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d105      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fe6:	4b48      	ldr	r3, [pc, #288]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	4a47      	ldr	r2, [pc, #284]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f000 8081 	beq.w	80010fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ffc:	4b42      	ldr	r3, [pc, #264]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 030c 	and.w	r3, r3, #12
 8001004:	2b08      	cmp	r3, #8
 8001006:	d061      	beq.n	80010cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	69db      	ldr	r3, [r3, #28]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d146      	bne.n	800109e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001010:	4b3f      	ldr	r3, [pc, #252]	; (8001110 <HAL_RCC_OscConfig+0x4fc>)
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001016:	f7ff fb73 	bl	8000700 <HAL_GetTick>
 800101a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800101e:	f7ff fb6f 	bl	8000700 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e067      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001030:	4b35      	ldr	r3, [pc, #212]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1f0      	bne.n	800101e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001044:	d108      	bne.n	8001058 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001046:	4b30      	ldr	r3, [pc, #192]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	492d      	ldr	r1, [pc, #180]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8001054:	4313      	orrs	r3, r2
 8001056:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001058:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a19      	ldr	r1, [r3, #32]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001068:	430b      	orrs	r3, r1
 800106a:	4927      	ldr	r1, [pc, #156]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 800106c:	4313      	orrs	r3, r2
 800106e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001070:	4b27      	ldr	r3, [pc, #156]	; (8001110 <HAL_RCC_OscConfig+0x4fc>)
 8001072:	2201      	movs	r2, #1
 8001074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001076:	f7ff fb43 	bl	8000700 <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800107e:	f7ff fb3f 	bl	8000700 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e037      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001090:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0f0      	beq.n	800107e <HAL_RCC_OscConfig+0x46a>
 800109c:	e02f      	b.n	80010fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800109e:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <HAL_RCC_OscConfig+0x4fc>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a4:	f7ff fb2c 	bl	8000700 <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ac:	f7ff fb28 	bl	8000700 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e020      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f0      	bne.n	80010ac <HAL_RCC_OscConfig+0x498>
 80010ca:	e018      	b.n	80010fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69db      	ldr	r3, [r3, #28]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d101      	bne.n	80010d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e013      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d106      	bne.n	80010fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d001      	beq.n	80010fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40021000 	.word	0x40021000
 800110c:	40007000 	.word	0x40007000
 8001110:	42420060 	.word	0x42420060

08001114 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e0d0      	b.n	80012ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001128:	4b6a      	ldr	r3, [pc, #424]	; (80012d4 <HAL_RCC_ClockConfig+0x1c0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d910      	bls.n	8001158 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001136:	4b67      	ldr	r3, [pc, #412]	; (80012d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f023 0207 	bic.w	r2, r3, #7
 800113e:	4965      	ldr	r1, [pc, #404]	; (80012d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	4313      	orrs	r3, r2
 8001144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001146:	4b63      	ldr	r3, [pc, #396]	; (80012d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	d001      	beq.n	8001158 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e0b8      	b.n	80012ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d020      	beq.n	80011a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	2b00      	cmp	r3, #0
 800116e:	d005      	beq.n	800117c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001170:	4b59      	ldr	r3, [pc, #356]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	4a58      	ldr	r2, [pc, #352]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001176:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800117a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	2b00      	cmp	r3, #0
 8001186:	d005      	beq.n	8001194 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001188:	4b53      	ldr	r3, [pc, #332]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	4a52      	ldr	r2, [pc, #328]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 800118e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001192:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001194:	4b50      	ldr	r3, [pc, #320]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	494d      	ldr	r1, [pc, #308]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d040      	beq.n	8001234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d107      	bne.n	80011ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	4b47      	ldr	r3, [pc, #284]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d115      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e07f      	b.n	80012ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d107      	bne.n	80011e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011d2:	4b41      	ldr	r3, [pc, #260]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d109      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e073      	b.n	80012ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e2:	4b3d      	ldr	r3, [pc, #244]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e06b      	b.n	80012ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011f2:	4b39      	ldr	r3, [pc, #228]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f023 0203 	bic.w	r2, r3, #3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	4936      	ldr	r1, [pc, #216]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001200:	4313      	orrs	r3, r2
 8001202:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001204:	f7ff fa7c 	bl	8000700 <HAL_GetTick>
 8001208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800120a:	e00a      	b.n	8001222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800120c:	f7ff fa78 	bl	8000700 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	f241 3288 	movw	r2, #5000	; 0x1388
 800121a:	4293      	cmp	r3, r2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e053      	b.n	80012ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001222:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 020c 	and.w	r2, r3, #12
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	429a      	cmp	r2, r3
 8001232:	d1eb      	bne.n	800120c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001234:	4b27      	ldr	r3, [pc, #156]	; (80012d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0307 	and.w	r3, r3, #7
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	429a      	cmp	r2, r3
 8001240:	d210      	bcs.n	8001264 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001242:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 0207 	bic.w	r2, r3, #7
 800124a:	4922      	ldr	r1, [pc, #136]	; (80012d4 <HAL_RCC_ClockConfig+0x1c0>)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	4313      	orrs	r3, r2
 8001250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	429a      	cmp	r2, r3
 800125e:	d001      	beq.n	8001264 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e032      	b.n	80012ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	2b00      	cmp	r3, #0
 800126e:	d008      	beq.n	8001282 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	4916      	ldr	r1, [pc, #88]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 800127e:	4313      	orrs	r3, r2
 8001280:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	2b00      	cmp	r3, #0
 800128c:	d009      	beq.n	80012a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	490e      	ldr	r1, [pc, #56]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012a2:	f000 f821 	bl	80012e8 <HAL_RCC_GetSysClockFreq>
 80012a6:	4601      	mov	r1, r0
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	091b      	lsrs	r3, r3, #4
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <HAL_RCC_ClockConfig+0x1c8>)
 80012b4:	5cd3      	ldrb	r3, [r2, r3]
 80012b6:	fa21 f303 	lsr.w	r3, r1, r3
 80012ba:	4a09      	ldr	r2, [pc, #36]	; (80012e0 <HAL_RCC_ClockConfig+0x1cc>)
 80012bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_RCC_ClockConfig+0x1d0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f9da 	bl	800067c <HAL_InitTick>

  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40022000 	.word	0x40022000
 80012d8:	40021000 	.word	0x40021000
 80012dc:	080021f4 	.word	0x080021f4
 80012e0:	20000000 	.word	0x20000000
 80012e4:	20000004 	.word	0x20000004

080012e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012e8:	b490      	push	{r4, r7}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80012ee:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <HAL_RCC_GetSysClockFreq+0xb0>)
 80012f0:	1d3c      	adds	r4, r7, #4
 80012f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012f8:	4b28      	ldr	r3, [pc, #160]	; (800139c <HAL_RCC_GetSysClockFreq+0xb4>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
 8001302:	2300      	movs	r3, #0
 8001304:	61bb      	str	r3, [r7, #24]
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800130e:	2300      	movs	r3, #0
 8001310:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001312:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b04      	cmp	r3, #4
 8001320:	d002      	beq.n	8001328 <HAL_RCC_GetSysClockFreq+0x40>
 8001322:	2b08      	cmp	r3, #8
 8001324:	d003      	beq.n	800132e <HAL_RCC_GetSysClockFreq+0x46>
 8001326:	e02d      	b.n	8001384 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001328:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800132a:	623b      	str	r3, [r7, #32]
      break;
 800132c:	e02d      	b.n	800138a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	0c9b      	lsrs	r3, r3, #18
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800133a:	4413      	add	r3, r2
 800133c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001340:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d013      	beq.n	8001374 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	0c5b      	lsrs	r3, r3, #17
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800135a:	4413      	add	r3, r2
 800135c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001360:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001366:	fb02 f203 	mul.w	r2, r2, r3
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
 8001372:	e004      	b.n	800137e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	4a0c      	ldr	r2, [pc, #48]	; (80013a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001378:	fb02 f303 	mul.w	r3, r2, r3
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	623b      	str	r3, [r7, #32]
      break;
 8001382:	e002      	b.n	800138a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001386:	623b      	str	r3, [r7, #32]
      break;
 8001388:	bf00      	nop
    }
  }
  return sysclockfreq;
 800138a:	6a3b      	ldr	r3, [r7, #32]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3728      	adds	r7, #40	; 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bc90      	pop	{r4, r7}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	080021e0 	.word	0x080021e0
 800139c:	080021f0 	.word	0x080021f0
 80013a0:	40021000 	.word	0x40021000
 80013a4:	007a1200 	.word	0x007a1200
 80013a8:	003d0900 	.word	0x003d0900

080013ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013b0:	4b02      	ldr	r3, [pc, #8]	; (80013bc <HAL_RCC_GetHCLKFreq+0x10>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	20000000 	.word	0x20000000

080013c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013c4:	f7ff fff2 	bl	80013ac <HAL_RCC_GetHCLKFreq>
 80013c8:	4601      	mov	r1, r0
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	0a1b      	lsrs	r3, r3, #8
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	4a03      	ldr	r2, [pc, #12]	; (80013e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013d6:	5cd3      	ldrb	r3, [r2, r3]
 80013d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013dc:	4618      	mov	r0, r3
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40021000 	.word	0x40021000
 80013e4:	08002204 	.word	0x08002204

080013e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013ec:	f7ff ffde 	bl	80013ac <HAL_RCC_GetHCLKFreq>
 80013f0:	4601      	mov	r1, r0
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	0adb      	lsrs	r3, r3, #11
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	4a03      	ldr	r2, [pc, #12]	; (800140c <HAL_RCC_GetPCLK2Freq+0x24>)
 80013fe:	5cd3      	ldrb	r3, [r2, r3]
 8001400:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001404:	4618      	mov	r0, r3
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40021000 	.word	0x40021000
 800140c:	08002204 	.word	0x08002204

08001410 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <RCC_Delay+0x34>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <RCC_Delay+0x38>)
 800141e:	fba2 2303 	umull	r2, r3, r2, r3
 8001422:	0a5b      	lsrs	r3, r3, #9
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	fb02 f303 	mul.w	r3, r2, r3
 800142a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800142c:	bf00      	nop
  }
  while (Delay --);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1e5a      	subs	r2, r3, #1
 8001432:	60fa      	str	r2, [r7, #12]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1f9      	bne.n	800142c <RCC_Delay+0x1c>
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000000 	.word	0x20000000
 8001448:	10624dd3 	.word	0x10624dd3

0800144c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b01      	cmp	r3, #1
 800145e:	d001      	beq.n	8001464 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e03a      	b.n	80014da <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2202      	movs	r2, #2
 8001468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f042 0201 	orr.w	r2, r2, #1
 800147a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a18      	ldr	r2, [pc, #96]	; (80014e4 <HAL_TIM_Base_Start_IT+0x98>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d00e      	beq.n	80014a4 <HAL_TIM_Base_Start_IT+0x58>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800148e:	d009      	beq.n	80014a4 <HAL_TIM_Base_Start_IT+0x58>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a14      	ldr	r2, [pc, #80]	; (80014e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d004      	beq.n	80014a4 <HAL_TIM_Base_Start_IT+0x58>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a13      	ldr	r2, [pc, #76]	; (80014ec <HAL_TIM_Base_Start_IT+0xa0>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d111      	bne.n	80014c8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2b06      	cmp	r3, #6
 80014b4:	d010      	beq.n	80014d8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f042 0201 	orr.w	r2, r2, #1
 80014c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014c6:	e007      	b.n	80014d8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f042 0201 	orr.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	40012c00 	.word	0x40012c00
 80014e8:	40000400 	.word	0x40000400
 80014ec:	40000800 	.word	0x40000800

080014f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e041      	b.n	8001586 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d106      	bne.n	800151c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7fe ffae 	bl	8000478 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2202      	movs	r2, #2
 8001520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3304      	adds	r3, #4
 800152c:	4619      	mov	r1, r3
 800152e:	4610      	mov	r0, r2
 8001530:	f000 fac4 	bl	8001abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d109      	bne.n	80015b4 <HAL_TIM_PWM_Start+0x24>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	bf14      	ite	ne
 80015ac:	2301      	movne	r3, #1
 80015ae:	2300      	moveq	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	e022      	b.n	80015fa <HAL_TIM_PWM_Start+0x6a>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	d109      	bne.n	80015ce <HAL_TIM_PWM_Start+0x3e>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	bf14      	ite	ne
 80015c6:	2301      	movne	r3, #1
 80015c8:	2300      	moveq	r3, #0
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	e015      	b.n	80015fa <HAL_TIM_PWM_Start+0x6a>
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	d109      	bne.n	80015e8 <HAL_TIM_PWM_Start+0x58>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b01      	cmp	r3, #1
 80015de:	bf14      	ite	ne
 80015e0:	2301      	movne	r3, #1
 80015e2:	2300      	moveq	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	e008      	b.n	80015fa <HAL_TIM_PWM_Start+0x6a>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	bf14      	ite	ne
 80015f4:	2301      	movne	r3, #1
 80015f6:	2300      	moveq	r3, #0
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e05e      	b.n	80016c0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d104      	bne.n	8001612 <HAL_TIM_PWM_Start+0x82>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2202      	movs	r2, #2
 800160c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001610:	e013      	b.n	800163a <HAL_TIM_PWM_Start+0xaa>
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	2b04      	cmp	r3, #4
 8001616:	d104      	bne.n	8001622 <HAL_TIM_PWM_Start+0x92>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2202      	movs	r2, #2
 800161c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001620:	e00b      	b.n	800163a <HAL_TIM_PWM_Start+0xaa>
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	2b08      	cmp	r3, #8
 8001626:	d104      	bne.n	8001632 <HAL_TIM_PWM_Start+0xa2>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2202      	movs	r2, #2
 800162c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001630:	e003      	b.n	800163a <HAL_TIM_PWM_Start+0xaa>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2202      	movs	r2, #2
 8001636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2201      	movs	r2, #1
 8001640:	6839      	ldr	r1, [r7, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f000 fc24 	bl	8001e90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a1e      	ldr	r2, [pc, #120]	; (80016c8 <HAL_TIM_PWM_Start+0x138>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d107      	bne.n	8001662 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001660:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a18      	ldr	r2, [pc, #96]	; (80016c8 <HAL_TIM_PWM_Start+0x138>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d00e      	beq.n	800168a <HAL_TIM_PWM_Start+0xfa>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001674:	d009      	beq.n	800168a <HAL_TIM_PWM_Start+0xfa>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a14      	ldr	r2, [pc, #80]	; (80016cc <HAL_TIM_PWM_Start+0x13c>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d004      	beq.n	800168a <HAL_TIM_PWM_Start+0xfa>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <HAL_TIM_PWM_Start+0x140>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d111      	bne.n	80016ae <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2b06      	cmp	r3, #6
 800169a:	d010      	beq.n	80016be <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0201 	orr.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016ac:	e007      	b.n	80016be <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f042 0201 	orr.w	r2, r2, #1
 80016bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40012c00 	.word	0x40012c00
 80016cc:	40000400 	.word	0x40000400
 80016d0:	40000800 	.word	0x40000800

080016d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d122      	bne.n	8001730 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d11b      	bne.n	8001730 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f06f 0202 	mvn.w	r2, #2
 8001700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f9b4 	bl	8001a84 <HAL_TIM_IC_CaptureCallback>
 800171c:	e005      	b.n	800172a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f9a7 	bl	8001a72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 f9b6 	bl	8001a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	2b04      	cmp	r3, #4
 800173c:	d122      	bne.n	8001784 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b04      	cmp	r3, #4
 800174a:	d11b      	bne.n	8001784 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f06f 0204 	mvn.w	r2, #4
 8001754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2202      	movs	r2, #2
 800175a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f98a 	bl	8001a84 <HAL_TIM_IC_CaptureCallback>
 8001770:	e005      	b.n	800177e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f97d 	bl	8001a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f98c 	bl	8001a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b08      	cmp	r3, #8
 8001790:	d122      	bne.n	80017d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	2b08      	cmp	r3, #8
 800179e:	d11b      	bne.n	80017d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f06f 0208 	mvn.w	r2, #8
 80017a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2204      	movs	r2, #4
 80017ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f960 	bl	8001a84 <HAL_TIM_IC_CaptureCallback>
 80017c4:	e005      	b.n	80017d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f953 	bl	8001a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 f962 	bl	8001a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	f003 0310 	and.w	r3, r3, #16
 80017e2:	2b10      	cmp	r3, #16
 80017e4:	d122      	bne.n	800182c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	f003 0310 	and.w	r3, r3, #16
 80017f0:	2b10      	cmp	r3, #16
 80017f2:	d11b      	bne.n	800182c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f06f 0210 	mvn.w	r2, #16
 80017fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2208      	movs	r2, #8
 8001802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f936 	bl	8001a84 <HAL_TIM_IC_CaptureCallback>
 8001818:	e005      	b.n	8001826 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f929 	bl	8001a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 f938 	bl	8001a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b01      	cmp	r3, #1
 8001838:	d10e      	bne.n	8001858 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b01      	cmp	r3, #1
 8001846:	d107      	bne.n	8001858 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f06f 0201 	mvn.w	r2, #1
 8001850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f904 	bl	8001a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001862:	2b80      	cmp	r3, #128	; 0x80
 8001864:	d10e      	bne.n	8001884 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001870:	2b80      	cmp	r3, #128	; 0x80
 8001872:	d107      	bne.n	8001884 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800187c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 fb91 	bl	8001fa6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800188e:	2b40      	cmp	r3, #64	; 0x40
 8001890:	d10e      	bne.n	80018b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800189c:	2b40      	cmp	r3, #64	; 0x40
 800189e:	d107      	bne.n	80018b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 f8fc 	bl	8001aa8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	f003 0320 	and.w	r3, r3, #32
 80018ba:	2b20      	cmp	r3, #32
 80018bc:	d10e      	bne.n	80018dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	f003 0320 	and.w	r3, r3, #32
 80018c8:	2b20      	cmp	r3, #32
 80018ca:	d107      	bne.n	80018dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f06f 0220 	mvn.w	r2, #32
 80018d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 fb5c 	bl	8001f94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d101      	bne.n	80018fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e0ac      	b.n	8001a58 <HAL_TIM_PWM_ConfigChannel+0x174>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b0c      	cmp	r3, #12
 800190a:	f200 809f 	bhi.w	8001a4c <HAL_TIM_PWM_ConfigChannel+0x168>
 800190e:	a201      	add	r2, pc, #4	; (adr r2, 8001914 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	08001949 	.word	0x08001949
 8001918:	08001a4d 	.word	0x08001a4d
 800191c:	08001a4d 	.word	0x08001a4d
 8001920:	08001a4d 	.word	0x08001a4d
 8001924:	08001989 	.word	0x08001989
 8001928:	08001a4d 	.word	0x08001a4d
 800192c:	08001a4d 	.word	0x08001a4d
 8001930:	08001a4d 	.word	0x08001a4d
 8001934:	080019cb 	.word	0x080019cb
 8001938:	08001a4d 	.word	0x08001a4d
 800193c:	08001a4d 	.word	0x08001a4d
 8001940:	08001a4d 	.word	0x08001a4d
 8001944:	08001a0b 	.word	0x08001a0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68b9      	ldr	r1, [r7, #8]
 800194e:	4618      	mov	r0, r3
 8001950:	f000 f916 	bl	8001b80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	699a      	ldr	r2, [r3, #24]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0208 	orr.w	r2, r2, #8
 8001962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	699a      	ldr	r2, [r3, #24]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 0204 	bic.w	r2, r2, #4
 8001972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6999      	ldr	r1, [r3, #24]
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	691a      	ldr	r2, [r3, #16]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	619a      	str	r2, [r3, #24]
      break;
 8001986:	e062      	b.n	8001a4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	4618      	mov	r0, r3
 8001990:	f000 f95c 	bl	8001c4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	699a      	ldr	r2, [r3, #24]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	699a      	ldr	r2, [r3, #24]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6999      	ldr	r1, [r3, #24]
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	021a      	lsls	r2, r3, #8
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	619a      	str	r2, [r3, #24]
      break;
 80019c8:	e041      	b.n	8001a4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68b9      	ldr	r1, [r7, #8]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 f9a5 	bl	8001d20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	69da      	ldr	r2, [r3, #28]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 0208 	orr.w	r2, r2, #8
 80019e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	69da      	ldr	r2, [r3, #28]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0204 	bic.w	r2, r2, #4
 80019f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	69d9      	ldr	r1, [r3, #28]
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	61da      	str	r2, [r3, #28]
      break;
 8001a08:	e021      	b.n	8001a4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68b9      	ldr	r1, [r7, #8]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 f9ef 	bl	8001df4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	69da      	ldr	r2, [r3, #28]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	69da      	ldr	r2, [r3, #28]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	69d9      	ldr	r1, [r3, #28]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	021a      	lsls	r2, r3, #8
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	61da      	str	r2, [r3, #28]
      break;
 8001a4a:	e000      	b.n	8001a4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001a4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr

08001a72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr

08001a96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr
	...

08001abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a29      	ldr	r2, [pc, #164]	; (8001b74 <TIM_Base_SetConfig+0xb8>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d00b      	beq.n	8001aec <TIM_Base_SetConfig+0x30>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ada:	d007      	beq.n	8001aec <TIM_Base_SetConfig+0x30>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a26      	ldr	r2, [pc, #152]	; (8001b78 <TIM_Base_SetConfig+0xbc>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d003      	beq.n	8001aec <TIM_Base_SetConfig+0x30>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a25      	ldr	r2, [pc, #148]	; (8001b7c <TIM_Base_SetConfig+0xc0>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d108      	bne.n	8001afe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a1c      	ldr	r2, [pc, #112]	; (8001b74 <TIM_Base_SetConfig+0xb8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d00b      	beq.n	8001b1e <TIM_Base_SetConfig+0x62>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b0c:	d007      	beq.n	8001b1e <TIM_Base_SetConfig+0x62>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a19      	ldr	r2, [pc, #100]	; (8001b78 <TIM_Base_SetConfig+0xbc>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d003      	beq.n	8001b1e <TIM_Base_SetConfig+0x62>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a18      	ldr	r2, [pc, #96]	; (8001b7c <TIM_Base_SetConfig+0xc0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d108      	bne.n	8001b30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a07      	ldr	r2, [pc, #28]	; (8001b74 <TIM_Base_SetConfig+0xb8>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d103      	bne.n	8001b64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	615a      	str	r2, [r3, #20]
}
 8001b6a:	bf00      	nop
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr
 8001b74:	40012c00 	.word	0x40012c00
 8001b78:	40000400 	.word	0x40000400
 8001b7c:	40000800 	.word	0x40000800

08001b80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b087      	sub	sp, #28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	f023 0201 	bic.w	r2, r3, #1
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f023 0303 	bic.w	r3, r3, #3
 8001bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f023 0302 	bic.w	r3, r3, #2
 8001bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a1c      	ldr	r2, [pc, #112]	; (8001c48 <TIM_OC1_SetConfig+0xc8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d10c      	bne.n	8001bf6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f023 0308 	bic.w	r3, r3, #8
 8001be2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f023 0304 	bic.w	r3, r3, #4
 8001bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a13      	ldr	r2, [pc, #76]	; (8001c48 <TIM_OC1_SetConfig+0xc8>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d111      	bne.n	8001c22 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	621a      	str	r2, [r3, #32]
}
 8001c3c:	bf00      	nop
 8001c3e:	371c      	adds	r7, #28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40012c00 	.word	0x40012c00

08001c4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	f023 0210 	bic.w	r2, r3, #16
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f023 0320 	bic.w	r3, r3, #32
 8001c96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a1d      	ldr	r2, [pc, #116]	; (8001d1c <TIM_OC2_SetConfig+0xd0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d10d      	bne.n	8001cc8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a14      	ldr	r2, [pc, #80]	; (8001d1c <TIM_OC2_SetConfig+0xd0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d113      	bne.n	8001cf8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001cd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001cde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	621a      	str	r2, [r3, #32]
}
 8001d12:	bf00      	nop
 8001d14:	371c      	adds	r7, #28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	40012c00 	.word	0x40012c00

08001d20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f023 0303 	bic.w	r3, r3, #3
 8001d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	021b      	lsls	r3, r3, #8
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a1d      	ldr	r2, [pc, #116]	; (8001df0 <TIM_OC3_SetConfig+0xd0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d10d      	bne.n	8001d9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	021b      	lsls	r3, r3, #8
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a14      	ldr	r2, [pc, #80]	; (8001df0 <TIM_OC3_SetConfig+0xd0>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d113      	bne.n	8001dca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	621a      	str	r2, [r3, #32]
}
 8001de4:	bf00      	nop
 8001de6:	371c      	adds	r7, #28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40012c00 	.word	0x40012c00

08001df4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b087      	sub	sp, #28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	021b      	lsls	r3, r3, #8
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	031b      	lsls	r3, r3, #12
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a0f      	ldr	r2, [pc, #60]	; (8001e8c <TIM_OC4_SetConfig+0x98>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d109      	bne.n	8001e68 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	019b      	lsls	r3, r3, #6
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	621a      	str	r2, [r3, #32]
}
 8001e82:	bf00      	nop
 8001e84:	371c      	adds	r7, #28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	40012c00 	.word	0x40012c00

08001e90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b087      	sub	sp, #28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f003 031f 	and.w	r3, r3, #31
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a1a      	ldr	r2, [r3, #32]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6a1a      	ldr	r2, [r3, #32]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	f003 031f 	and.w	r3, r3, #31
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	621a      	str	r2, [r3, #32]
}
 8001ece:	bf00      	nop
 8001ed0:	371c      	adds	r7, #28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e046      	b.n	8001f7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2202      	movs	r2, #2
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a16      	ldr	r2, [pc, #88]	; (8001f88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d00e      	beq.n	8001f52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f3c:	d009      	beq.n	8001f52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a12      	ldr	r2, [pc, #72]	; (8001f8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d004      	beq.n	8001f52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a10      	ldr	r2, [pc, #64]	; (8001f90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d10c      	bne.n	8001f6c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr
 8001f88:	40012c00 	.word	0x40012c00
 8001f8c:	40000400 	.word	0x40000400
 8001f90:	40000800 	.word	0x40000800

08001f94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e03f      	b.n	800204a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d106      	bne.n	8001fe4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7fe fac4 	bl	800056c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2224      	movs	r2, #36	; 0x24
 8001fe8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ffa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f829 	bl	8002054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002010:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	695a      	ldr	r2, [r3, #20]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002020:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002030:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	4313      	orrs	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800208e:	f023 030c 	bic.w	r3, r3, #12
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6812      	ldr	r2, [r2, #0]
 8002096:	68b9      	ldr	r1, [r7, #8]
 8002098:	430b      	orrs	r3, r1
 800209a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699a      	ldr	r2, [r3, #24]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a2c      	ldr	r2, [pc, #176]	; (8002168 <UART_SetConfig+0x114>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d103      	bne.n	80020c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020bc:	f7ff f994 	bl	80013e8 <HAL_RCC_GetPCLK2Freq>
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	e002      	b.n	80020ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80020c4:	f7ff f97c 	bl	80013c0 <HAL_RCC_GetPCLK1Freq>
 80020c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	009a      	lsls	r2, r3, #2
 80020d4:	441a      	add	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e0:	4a22      	ldr	r2, [pc, #136]	; (800216c <UART_SetConfig+0x118>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	0119      	lsls	r1, r3, #4
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	009a      	lsls	r2, r3, #2
 80020f4:	441a      	add	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002100:	4b1a      	ldr	r3, [pc, #104]	; (800216c <UART_SetConfig+0x118>)
 8002102:	fba3 0302 	umull	r0, r3, r3, r2
 8002106:	095b      	lsrs	r3, r3, #5
 8002108:	2064      	movs	r0, #100	; 0x64
 800210a:	fb00 f303 	mul.w	r3, r0, r3
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	3332      	adds	r3, #50	; 0x32
 8002114:	4a15      	ldr	r2, [pc, #84]	; (800216c <UART_SetConfig+0x118>)
 8002116:	fba2 2303 	umull	r2, r3, r2, r3
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002120:	4419      	add	r1, r3
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	009a      	lsls	r2, r3, #2
 800212c:	441a      	add	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	fbb2 f2f3 	udiv	r2, r2, r3
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <UART_SetConfig+0x118>)
 800213a:	fba3 0302 	umull	r0, r3, r3, r2
 800213e:	095b      	lsrs	r3, r3, #5
 8002140:	2064      	movs	r0, #100	; 0x64
 8002142:	fb00 f303 	mul.w	r3, r0, r3
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	3332      	adds	r3, #50	; 0x32
 800214c:	4a07      	ldr	r2, [pc, #28]	; (800216c <UART_SetConfig+0x118>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	f003 020f 	and.w	r2, r3, #15
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	440a      	add	r2, r1
 800215e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40013800 	.word	0x40013800
 800216c:	51eb851f 	.word	0x51eb851f

08002170 <__libc_init_array>:
 8002170:	b570      	push	{r4, r5, r6, lr}
 8002172:	2500      	movs	r5, #0
 8002174:	4e0c      	ldr	r6, [pc, #48]	; (80021a8 <__libc_init_array+0x38>)
 8002176:	4c0d      	ldr	r4, [pc, #52]	; (80021ac <__libc_init_array+0x3c>)
 8002178:	1ba4      	subs	r4, r4, r6
 800217a:	10a4      	asrs	r4, r4, #2
 800217c:	42a5      	cmp	r5, r4
 800217e:	d109      	bne.n	8002194 <__libc_init_array+0x24>
 8002180:	f000 f822 	bl	80021c8 <_init>
 8002184:	2500      	movs	r5, #0
 8002186:	4e0a      	ldr	r6, [pc, #40]	; (80021b0 <__libc_init_array+0x40>)
 8002188:	4c0a      	ldr	r4, [pc, #40]	; (80021b4 <__libc_init_array+0x44>)
 800218a:	1ba4      	subs	r4, r4, r6
 800218c:	10a4      	asrs	r4, r4, #2
 800218e:	42a5      	cmp	r5, r4
 8002190:	d105      	bne.n	800219e <__libc_init_array+0x2e>
 8002192:	bd70      	pop	{r4, r5, r6, pc}
 8002194:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002198:	4798      	blx	r3
 800219a:	3501      	adds	r5, #1
 800219c:	e7ee      	b.n	800217c <__libc_init_array+0xc>
 800219e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021a2:	4798      	blx	r3
 80021a4:	3501      	adds	r5, #1
 80021a6:	e7f2      	b.n	800218e <__libc_init_array+0x1e>
 80021a8:	0800220c 	.word	0x0800220c
 80021ac:	0800220c 	.word	0x0800220c
 80021b0:	0800220c 	.word	0x0800220c
 80021b4:	08002210 	.word	0x08002210

080021b8 <memset>:
 80021b8:	4603      	mov	r3, r0
 80021ba:	4402      	add	r2, r0
 80021bc:	4293      	cmp	r3, r2
 80021be:	d100      	bne.n	80021c2 <memset+0xa>
 80021c0:	4770      	bx	lr
 80021c2:	f803 1b01 	strb.w	r1, [r3], #1
 80021c6:	e7f9      	b.n	80021bc <memset+0x4>

080021c8 <_init>:
 80021c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ca:	bf00      	nop
 80021cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ce:	bc08      	pop	{r3}
 80021d0:	469e      	mov	lr, r3
 80021d2:	4770      	bx	lr

080021d4 <_fini>:
 80021d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d6:	bf00      	nop
 80021d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021da:	bc08      	pop	{r3}
 80021dc:	469e      	mov	lr, r3
 80021de:	4770      	bx	lr
