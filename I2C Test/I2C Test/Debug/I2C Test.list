
I2C Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a18  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08005b28  08005b28  00015b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cf0  08005cf0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005cf0  08005cf0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005cf0  08005cf0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cf0  08005cf0  00015cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cf4  08005cf4  00015cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000070  08005d68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08005d68  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a6d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029b9  00000000  00000000  00031b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  000344c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  00035498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000043e7  00000000  00000000  00036350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a51  00000000  00000000  0003a737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ec3a  00000000  00000000  0004d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dbdc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aa4  00000000  00000000  000dbe18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08005b10 	.word	0x08005b10

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08005b10 	.word	0x08005b10

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_f2uiz>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	d20e      	bcs.n	80007de <__aeabi_f2uiz+0x22>
 80007c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80007c4:	d30b      	bcc.n	80007de <__aeabi_f2uiz+0x22>
 80007c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80007ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007ce:	d409      	bmi.n	80007e4 <__aeabi_f2uiz+0x28>
 80007d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007d8:	fa23 f002 	lsr.w	r0, r3, r2
 80007dc:	4770      	bx	lr
 80007de:	f04f 0000 	mov.w	r0, #0
 80007e2:	4770      	bx	lr
 80007e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80007e8:	d101      	bne.n	80007ee <__aeabi_f2uiz+0x32>
 80007ea:	0242      	lsls	r2, r0, #9
 80007ec:	d102      	bne.n	80007f4 <__aeabi_f2uiz+0x38>
 80007ee:	f04f 30ff 	mov.w	r0, #4294967295
 80007f2:	4770      	bx	lr
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop

080007fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_GPIO_Init+0x78>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a17      	ldr	r2, [pc, #92]	; (8000874 <MX_GPIO_Init+0x78>)
 8000816:	f043 0304 	orr.w	r3, r3, #4
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_GPIO_Init+0x78>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0304 	and.w	r3, r3, #4
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_GPIO_Init+0x78>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a11      	ldr	r2, [pc, #68]	; (8000874 <MX_GPIO_Init+0x78>)
 800082e:	f043 0308 	orr.w	r3, r3, #8
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_GPIO_Init+0x78>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f003 0308 	and.w	r3, r3, #8
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000846:	480c      	ldr	r0, [pc, #48]	; (8000878 <MX_GPIO_Init+0x7c>)
 8000848:	f000 ff46 	bl	80016d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800084c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000850:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2302      	movs	r3, #2
 800085c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	4619      	mov	r1, r3
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <MX_GPIO_Init+0x7c>)
 8000866:	f000 fdb3 	bl	80013d0 <HAL_GPIO_Init>

}
 800086a:	bf00      	nop
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000
 8000878:	40010c00 	.word	0x40010c00

0800087c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_I2C1_Init+0x50>)
 8000882:	4a13      	ldr	r2, [pc, #76]	; (80008d0 <MX_I2C1_Init+0x54>)
 8000884:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_I2C1_Init+0x50>)
 8000888:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <MX_I2C1_Init+0x58>)
 800088a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_I2C1_Init+0x50>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_I2C1_Init+0x50>)
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_I2C1_Init+0x50>)
 800089a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800089e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a0:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <MX_I2C1_Init+0x50>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_I2C1_Init+0x50>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <MX_I2C1_Init+0x50>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_I2C1_Init+0x50>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008b8:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_I2C1_Init+0x50>)
 80008ba:	f000 ff3f 	bl	800173c <HAL_I2C_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008c4:	f000 f924 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	2000009c 	.word	0x2000009c
 80008d0:	40005400 	.word	0x40005400
 80008d4:	000186a0 	.word	0x000186a0

080008d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a1d      	ldr	r2, [pc, #116]	; (8000968 <HAL_I2C_MspInit+0x90>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d133      	bne.n	8000960 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f8:	4b1c      	ldr	r3, [pc, #112]	; (800096c <HAL_I2C_MspInit+0x94>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4a1b      	ldr	r2, [pc, #108]	; (800096c <HAL_I2C_MspInit+0x94>)
 80008fe:	f043 0308 	orr.w	r3, r3, #8
 8000902:	6193      	str	r3, [r2, #24]
 8000904:	4b19      	ldr	r3, [pc, #100]	; (800096c <HAL_I2C_MspInit+0x94>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f003 0308 	and.w	r3, r3, #8
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000910:	23c0      	movs	r3, #192	; 0xc0
 8000912:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000914:	2312      	movs	r3, #18
 8000916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000918:	2303      	movs	r3, #3
 800091a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	4619      	mov	r1, r3
 8000922:	4813      	ldr	r0, [pc, #76]	; (8000970 <HAL_I2C_MspInit+0x98>)
 8000924:	f000 fd54 	bl	80013d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <HAL_I2C_MspInit+0x94>)
 800092a:	69db      	ldr	r3, [r3, #28]
 800092c:	4a0f      	ldr	r2, [pc, #60]	; (800096c <HAL_I2C_MspInit+0x94>)
 800092e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000932:	61d3      	str	r3, [r2, #28]
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <HAL_I2C_MspInit+0x94>)
 8000936:	69db      	ldr	r3, [r3, #28]
 8000938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2100      	movs	r1, #0
 8000944:	201f      	movs	r0, #31
 8000946:	f000 fc96 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800094a:	201f      	movs	r0, #31
 800094c:	f000 fcaf 	bl	80012ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	2020      	movs	r0, #32
 8000956:	f000 fc8e 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800095a:	2020      	movs	r0, #32
 800095c:	f000 fca7 	bl	80012ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000960:	bf00      	nop
 8000962:	3720      	adds	r7, #32
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40005400 	.word	0x40005400
 800096c:	40021000 	.word	0x40021000
 8000970:	40010c00 	.word	0x40010c00

08000974 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800097c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000980:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000984:	f003 0301 	and.w	r3, r3, #1
 8000988:	2b00      	cmp	r3, #0
 800098a:	d013      	beq.n	80009b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800098c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000990:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000994:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000998:	2b00      	cmp	r3, #0
 800099a:	d00b      	beq.n	80009b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800099c:	e000      	b.n	80009a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800099e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80009a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d0f9      	beq.n	800099e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80009aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	b2d2      	uxtb	r2, r2
 80009b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80009b4:	687b      	ldr	r3, [r7, #4]
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr

080009c0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
	int i = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
	for(i=0; i<len; i++)
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	e009      	b.n	80009ea <_write+0x2a>
		ITM_SendChar((*p++));
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	1c5a      	adds	r2, r3, #1
 80009da:	60ba      	str	r2, [r7, #8]
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ffc8 	bl	8000974 <ITM_SendChar>
	for(i=0; i<len; i++)
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	3301      	adds	r3, #1
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	697a      	ldr	r2, [r7, #20]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	dbf1      	blt.n	80009d6 <_write+0x16>
	return len;
 80009f2:	687b      	ldr	r3, [r7, #4]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a02:	f000 fb2d 	bl	8001060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a06:	f000 f831 	bl	8000a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0a:	f7ff fef7 	bl	80007fc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a0e:	f7ff ff35 	bl	800087c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000a12:	f000 fa89 	bl	8000f28 <MX_USART1_UART_Init>


  while (1)
  {

	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8000a16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a1a:	4811      	ldr	r0, [pc, #68]	; (8000a60 <main+0x64>)
 8000a1c:	f000 fe74 	bl	8001708 <HAL_GPIO_TogglePin>
	  count++;
 8000a20:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <main+0x68>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	3301      	adds	r3, #1
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <main+0x68>)
 8000a2a:	701a      	strb	r2, [r3, #0]
	  //printf("HELLO WORLD count = %d \n", count);
	  HAL_Delay(250);
 8000a2c:	20fa      	movs	r0, #250	; 0xfa
 8000a2e:	f000 fb49 	bl	80010c4 <HAL_Delay>

	  temp = MLX90614_ReadTemp(0x5A, 0x07);
 8000a32:	2107      	movs	r1, #7
 8000a34:	205a      	movs	r0, #90	; 0x5a
 8000a36:	f000 f8e7 	bl	8000c08 <MLX90614_ReadTemp>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff febd 	bl	80007bc <__aeabi_f2uiz>
 8000a42:	4603      	mov	r3, r0
 8000a44:	80fb      	strh	r3, [r7, #6]
	  HAL_Delay(3);
 8000a46:	2003      	movs	r0, #3
 8000a48:	f000 fb3c 	bl	80010c4 <HAL_Delay>
	  printf("%d %d \n", count, temp);
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <main+0x68>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4619      	mov	r1, r3
 8000a52:	88fb      	ldrh	r3, [r7, #6]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4804      	ldr	r0, [pc, #16]	; (8000a68 <main+0x6c>)
 8000a58:	f004 f8fa 	bl	8004c50 <iprintf>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8000a5c:	e7db      	b.n	8000a16 <main+0x1a>
 8000a5e:	bf00      	nop
 8000a60:	40010c00 	.word	0x40010c00
 8000a64:	2000008c 	.word	0x2000008c
 8000a68:	08005b28 	.word	0x08005b28

08000a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b090      	sub	sp, #64	; 0x40
 8000a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a72:	f107 0318 	add.w	r3, r7, #24
 8000a76:	2228      	movs	r2, #40	; 0x28
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f004 f8e0 	bl	8004c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a92:	2301      	movs	r3, #1
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a96:	2310      	movs	r3, #16
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000aa2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa8:	f107 0318 	add.w	r3, r7, #24
 8000aac:	4618      	mov	r0, r3
 8000aae:	f003 f92d 	bl	8003d0c <HAL_RCC_OscConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000ab8:	f000 f82a 	bl	8000b10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000abc:	230f      	movs	r3, #15
 8000abe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f003 fb99 	bl	800420c <HAL_RCC_ClockConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000ae0:	f000 f816 	bl	8000b10 <Error_Handler>
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	3740      	adds	r7, #64	; 0x40
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d101      	bne.n	8000b02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000afe:	f000 fac5 	bl	800108c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40000800 	.word	0x40000800

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <Error_Handler+0x8>
	...

08000b1c <CRC8_Calc>:
    0xb2, 0xb5, 0xbc, 0xbb, 0x96, 0x91, 0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83,
    0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb, 0xe6, 0xe1, 0xe8, 0xef,
    0xfa, 0xfd, 0xf4, 0xf3
};

uint8_t CRC8_Calc (uint8_t *p, uint8_t len) {
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	70fb      	strb	r3, [r7, #3]
        uint16_t i;
        uint16_t crc = 0x0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	81fb      	strh	r3, [r7, #14]

        while (len--) {
 8000b2c:	e015      	b.n	8000b5a <CRC8_Calc+0x3e>
                i = (crc ^ *p++) & 0xFF;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	1c5a      	adds	r2, r3, #1
 8000b32:	607a      	str	r2, [r7, #4]
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	89fb      	ldrh	r3, [r7, #14]
 8000b3a:	4053      	eors	r3, r2
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	81bb      	strh	r3, [r7, #12]
                crc = (crc_table[i] ^ (crc << 8)) & 0xFF;
 8000b42:	89bb      	ldrh	r3, [r7, #12]
 8000b44:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <CRC8_Calc+0x58>)
 8000b46:	5cd3      	ldrb	r3, [r2, r3]
 8000b48:	b21a      	sxth	r2, r3
 8000b4a:	89fb      	ldrh	r3, [r7, #14]
 8000b4c:	021b      	lsls	r3, r3, #8
 8000b4e:	b21b      	sxth	r3, r3
 8000b50:	4053      	eors	r3, r2
 8000b52:	b21b      	sxth	r3, r3
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	81fb      	strh	r3, [r7, #14]
        while (len--) {
 8000b5a:	78fb      	ldrb	r3, [r7, #3]
 8000b5c:	1e5a      	subs	r2, r3, #1
 8000b5e:	70fa      	strb	r2, [r7, #3]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d1e4      	bne.n	8000b2e <CRC8_Calc+0x12>
        }

        return crc & 0xFF;
 8000b64:	89fb      	ldrh	r3, [r7, #14]
 8000b66:	b2db      	uxtb	r3, r3
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	08005b40 	.word	0x08005b40

08000b78 <MLX90614_ReadReg>:
	HAL_I2C_Master_Transmit(&hi2c1, (devAddr << 1), i2cdata, 4, 0xFFFF);
	HAL_Delay(10);
	MLX90614_SendDebugMsg(MLX90614_DBG_MSG_W, devAddr, i2cdata[0], data, i2cdata[3], 0x00);
}

uint16_t MLX90614_ReadReg(uint8_t devAddr, uint8_t regAddr, uint8_t dbg_lvl) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af04      	add	r7, sp, #16
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
 8000b82:	460b      	mov	r3, r1
 8000b84:	71bb      	strb	r3, [r7, #6]
 8000b86:	4613      	mov	r3, r2
 8000b88:	717b      	strb	r3, [r7, #5]
	uint16_t data;
	uint8_t in_buff[3], crc_buff[5], crc;

	HAL_I2C_Mem_Read(&hi2c1, (devAddr<<1), regAddr, I2C_MEMADD_SIZE_8BIT, in_buff, 3, 100);
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	b299      	uxth	r1, r3
 8000b92:	79bb      	ldrb	r3, [r7, #6]
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	2364      	movs	r3, #100	; 0x64
 8000b98:	9302      	str	r3, [sp, #8]
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	9301      	str	r3, [sp, #4]
 8000b9e:	f107 0310 	add.w	r3, r7, #16
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	4817      	ldr	r0, [pc, #92]	; (8000c04 <MLX90614_ReadReg+0x8c>)
 8000ba8:	f000 ff0c 	bl	80019c4 <HAL_I2C_Mem_Read>

	// For a read word command, in the crc8 calculus, you have to include [SA_W, Command, SA_R, LSB, MSB]
	crc_buff[0] = (devAddr<<1);
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	723b      	strb	r3, [r7, #8]
	crc_buff[1] = regAddr;
 8000bb4:	79bb      	ldrb	r3, [r7, #6]
 8000bb6:	727b      	strb	r3, [r7, #9]
	crc_buff[2] = (devAddr<<1) + 1;
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	72bb      	strb	r3, [r7, #10]
	crc_buff[3] = in_buff[0];
 8000bc4:	7c3b      	ldrb	r3, [r7, #16]
 8000bc6:	72fb      	strb	r3, [r7, #11]
	crc_buff[4] = in_buff[1];
 8000bc8:	7c7b      	ldrb	r3, [r7, #17]
 8000bca:	733b      	strb	r3, [r7, #12]
	crc = CRC8_Calc(crc_buff, 5);
 8000bcc:	f107 0308 	add.w	r3, r7, #8
 8000bd0:	2105      	movs	r1, #5
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ffa2 	bl	8000b1c <CRC8_Calc>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	757b      	strb	r3, [r7, #21]

	data = (in_buff[1] <<8 | in_buff[0]);
 8000bdc:	7c7b      	ldrb	r3, [r7, #17]
 8000bde:	021b      	lsls	r3, r3, #8
 8000be0:	b21a      	sxth	r2, r3
 8000be2:	7c3b      	ldrb	r3, [r7, #16]
 8000be4:	b21b      	sxth	r3, r3
 8000be6:	4313      	orrs	r3, r2
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	82fb      	strh	r3, [r7, #22]

	//TODO: implement CRC8 check on data received
	if (crc != in_buff[2]) {
 8000bec:	7cbb      	ldrb	r3, [r7, #18]
 8000bee:	7d7a      	ldrb	r2, [r7, #21]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d001      	beq.n	8000bf8 <MLX90614_ReadReg+0x80>
		data = 0x00;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	82fb      	strh	r3, [r7, #22]
	}
	//if(dbg_lvl == MLX90614_DBG_ON)	MLX90614_SendDebugMsg(MLX90614_DBG_MSG_R, devAddr, regAddr, data, in_buff[2], crc);

	//HAL_Delay(1);
	return data;
 8000bf8:	8afb      	ldrh	r3, [r7, #22]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	2000009c 	.word	0x2000009c

08000c08 <MLX90614_ReadTemp>:

float MLX90614_ReadTemp(uint8_t devAddr, uint8_t regAddr) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	460a      	mov	r2, r1
 8000c12:	71fb      	strb	r3, [r7, #7]
 8000c14:	4613      	mov	r3, r2
 8000c16:	71bb      	strb	r3, [r7, #6]
	float temp;
	uint16_t data;

	data = MLX90614_ReadReg(devAddr, regAddr, MLX90614_DBG_OFF);
 8000c18:	79b9      	ldrb	r1, [r7, #6]
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ffaa 	bl	8000b78 <MLX90614_ReadReg>
 8000c24:	4603      	mov	r3, r0
 8000c26:	81fb      	strh	r3, [r7, #14]
	temp = data*0.02 - 273.15;
 8000c28:	89fb      	ldrh	r3, [r7, #14]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fd0c 	bl	8000648 <__aeabi_i2d>
 8000c30:	a30d      	add	r3, pc, #52	; (adr r3, 8000c68 <MLX90614_ReadTemp+0x60>)
 8000c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c36:	f7ff fa8b 	bl	8000150 <__aeabi_dmul>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	4610      	mov	r0, r2
 8000c40:	4619      	mov	r1, r3
 8000c42:	a30b      	add	r3, pc, #44	; (adr r3, 8000c70 <MLX90614_ReadTemp+0x68>)
 8000c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c48:	f7ff fbb0 	bl	80003ac <__aeabi_dsub>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	460b      	mov	r3, r1
 8000c50:	4610      	mov	r0, r2
 8000c52:	4619      	mov	r1, r3
 8000c54:	f7ff fd62 	bl	800071c <__aeabi_d2f>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	60bb      	str	r3, [r7, #8]

	return temp;
 8000c5c:	68bb      	ldr	r3, [r7, #8]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	47ae147b 	.word	0x47ae147b
 8000c6c:	3f947ae1 	.word	0x3f947ae1
 8000c70:	66666666 	.word	0x66666666
 8000c74:	40711266 	.word	0x40711266

08000c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <HAL_MspInit+0x5c>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <HAL_MspInit+0x5c>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6193      	str	r3, [r2, #24]
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_MspInit+0x5c>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <HAL_MspInit+0x5c>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <HAL_MspInit+0x5c>)
 8000c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	61d3      	str	r3, [r2, #28]
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <HAL_MspInit+0x5c>)
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <HAL_MspInit+0x60>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <HAL_MspInit+0x60>)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40010000 	.word	0x40010000

08000cdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08c      	sub	sp, #48	; 0x30
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	201e      	movs	r0, #30
 8000cf2:	f000 fac0 	bl	8001276 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000cf6:	201e      	movs	r0, #30
 8000cf8:	f000 fad9 	bl	80012ae <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <HAL_InitTick+0x9c>)
 8000cfe:	69db      	ldr	r3, [r3, #28]
 8000d00:	4a1d      	ldr	r2, [pc, #116]	; (8000d78 <HAL_InitTick+0x9c>)
 8000d02:	f043 0304 	orr.w	r3, r3, #4
 8000d06:	61d3      	str	r3, [r2, #28]
 8000d08:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <HAL_InitTick+0x9c>)
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d14:	f107 0210 	add.w	r2, r7, #16
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f003 fbf0 	bl	8004504 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d24:	f003 fbc6 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 8000d28:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d2c:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <HAL_InitTick+0xa0>)
 8000d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d32:	0c9b      	lsrs	r3, r3, #18
 8000d34:	3b01      	subs	r3, #1
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <HAL_InitTick+0xa4>)
 8000d3a:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <HAL_InitTick+0xa8>)
 8000d3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <HAL_InitTick+0xa4>)
 8000d40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d44:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000d46:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <HAL_InitTick+0xa4>)
 8000d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d4a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <HAL_InitTick+0xa4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <HAL_InitTick+0xa4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000d58:	4809      	ldr	r0, [pc, #36]	; (8000d80 <HAL_InitTick+0xa4>)
 8000d5a:	f003 fc21 	bl	80045a0 <HAL_TIM_Base_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d104      	bne.n	8000d6e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000d64:	4806      	ldr	r0, [pc, #24]	; (8000d80 <HAL_InitTick+0xa4>)
 8000d66:	f003 fc73 	bl	8004650 <HAL_TIM_Base_Start_IT>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	e000      	b.n	8000d70 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3730      	adds	r7, #48	; 0x30
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	431bde83 	.word	0x431bde83
 8000d80:	200000f0 	.word	0x200000f0
 8000d84:	40000800 	.word	0x40000800

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <NMI_Handler+0x4>

08000d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr

08000db2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr

08000dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr

08000dca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
	...

08000dd8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <TIM4_IRQHandler+0x10>)
 8000dde:	f003 fc89 	bl	80046f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200000f0 	.word	0x200000f0

08000dec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <I2C1_EV_IRQHandler+0x10>)
 8000df2:	f001 f84f 	bl	8001e94 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000009c 	.word	0x2000009c

08000e00 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <I2C1_ER_IRQHandler+0x10>)
 8000e06:	f001 f9b2 	bl	800216e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	2000009c 	.word	0x2000009c

08000e14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	e00a      	b.n	8000e3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e26:	f3af 8000 	nop.w
 8000e2a:	4601      	mov	r1, r0
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	60ba      	str	r2, [r7, #8]
 8000e32:	b2ca      	uxtb	r2, r1
 8000e34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	dbf0      	blt.n	8000e26 <_read+0x12>
	}

return len;
 8000e44:	687b      	ldr	r3, [r7, #4]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
	return -1;
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e74:	605a      	str	r2, [r3, #4]
	return 0;
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr

08000e82 <_isatty>:

int _isatty(int file)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
	return 1;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr

08000e96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b085      	sub	sp, #20
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	60f8      	str	r0, [r7, #12]
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
	return 0;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
	...

08000eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb8:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <_sbrk+0x5c>)
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <_sbrk+0x60>)
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec4:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d102      	bne.n	8000ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <_sbrk+0x64>)
 8000ece:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <_sbrk+0x68>)
 8000ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d207      	bcs.n	8000ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee0:	f003 fe84 	bl	8004bec <__errno>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
 8000eee:	e009      	b.n	8000f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <_sbrk+0x64>)
 8000f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f02:	68fb      	ldr	r3, [r7, #12]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20005000 	.word	0x20005000
 8000f10:	00000400 	.word	0x00000400
 8000f14:	20000090 	.word	0x20000090
 8000f18:	20000190 	.word	0x20000190

08000f1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <MX_USART1_UART_Init+0x4c>)
 8000f2e:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <MX_USART1_UART_Init+0x50>)
 8000f30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <MX_USART1_UART_Init+0x4c>)
 8000f34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <MX_USART1_UART_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <MX_USART1_UART_Init+0x4c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <MX_USART1_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <MX_USART1_UART_Init+0x4c>)
 8000f4e:	220c      	movs	r2, #12
 8000f50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f52:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <MX_USART1_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <MX_USART1_UART_Init+0x4c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f5e:	4805      	ldr	r0, [pc, #20]	; (8000f74 <MX_USART1_UART_Init+0x4c>)
 8000f60:	f003 fd68 	bl	8004a34 <HAL_UART_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f6a:	f7ff fdd1 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000138 	.word	0x20000138
 8000f78:	40013800 	.word	0x40013800

08000f7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a1c      	ldr	r2, [pc, #112]	; (8001008 <HAL_UART_MspInit+0x8c>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d131      	bne.n	8001000 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	; (800100c <HAL_UART_MspInit+0x90>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	4a1a      	ldr	r2, [pc, #104]	; (800100c <HAL_UART_MspInit+0x90>)
 8000fa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa6:	6193      	str	r3, [r2, #24]
 8000fa8:	4b18      	ldr	r3, [pc, #96]	; (800100c <HAL_UART_MspInit+0x90>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_UART_MspInit+0x90>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a14      	ldr	r2, [pc, #80]	; (800100c <HAL_UART_MspInit+0x90>)
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <HAL_UART_MspInit+0x90>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0304 	and.w	r3, r3, #4
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 0310 	add.w	r3, r7, #16
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480b      	ldr	r0, [pc, #44]	; (8001010 <HAL_UART_MspInit+0x94>)
 8000fe2:	f000 f9f5 	bl	80013d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <HAL_UART_MspInit+0x94>)
 8000ffc:	f000 f9e8 	bl	80013d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001000:	bf00      	nop
 8001002:	3720      	adds	r7, #32
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40013800 	.word	0x40013800
 800100c:	40021000 	.word	0x40021000
 8001010:	40010800 	.word	0x40010800

08001014 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001014:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001016:	e003      	b.n	8001020 <LoopCopyDataInit>

08001018 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800101a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800101c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800101e:	3104      	adds	r1, #4

08001020 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001020:	480a      	ldr	r0, [pc, #40]	; (800104c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001024:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001026:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001028:	d3f6      	bcc.n	8001018 <CopyDataInit>
  ldr r2, =_sbss
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800102c:	e002      	b.n	8001034 <LoopFillZerobss>

0800102e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001030:	f842 3b04 	str.w	r3, [r2], #4

08001034 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001036:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001038:	d3f9      	bcc.n	800102e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800103a:	f7ff ff6f 	bl	8000f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800103e:	f003 fddb 	bl	8004bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001042:	f7ff fcdb 	bl	80009fc <main>
  bx lr
 8001046:	4770      	bx	lr
  ldr r3, =_sidata
 8001048:	08005cf8 	.word	0x08005cf8
  ldr r0, =_sdata
 800104c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001050:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001054:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001058:	2000018c 	.word	0x2000018c

0800105c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC1_2_IRQHandler>
	...

08001060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <HAL_Init+0x28>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a07      	ldr	r2, [pc, #28]	; (8001088 <HAL_Init+0x28>)
 800106a:	f043 0310 	orr.w	r3, r3, #16
 800106e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001070:	2003      	movs	r0, #3
 8001072:	f000 f8f5 	bl	8001260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001076:	2000      	movs	r0, #0
 8001078:	f7ff fe30 	bl	8000cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800107c:	f7ff fdfc 	bl	8000c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40022000 	.word	0x40022000

0800108c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_IncTick+0x1c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <HAL_IncTick+0x20>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a03      	ldr	r2, [pc, #12]	; (80010ac <HAL_IncTick+0x20>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	20000008 	.word	0x20000008
 80010ac:	20000178 	.word	0x20000178

080010b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return uwTick;
 80010b4:	4b02      	ldr	r3, [pc, #8]	; (80010c0 <HAL_GetTick+0x10>)
 80010b6:	681b      	ldr	r3, [r3, #0]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	20000178 	.word	0x20000178

080010c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff fff0 	bl	80010b0 <HAL_GetTick>
 80010d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010dc:	d005      	beq.n	80010ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_Delay+0x44>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ea:	bf00      	nop
 80010ec:	f7ff ffe0 	bl	80010b0 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d8f7      	bhi.n	80010ec <HAL_Delay+0x28>
  {
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000008 	.word	0x20000008

0800110c <__NVIC_SetPriorityGrouping>:
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113e:	4a04      	ldr	r2, [pc, #16]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	60d3      	str	r3, [r2, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_GetPriorityGrouping>:
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_EnableIRQ>:
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	2b00      	cmp	r3, #0
 8001180:	db0b      	blt.n	800119a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f003 021f 	and.w	r2, r3, #31
 8001188:	4906      	ldr	r1, [pc, #24]	; (80011a4 <__NVIC_EnableIRQ+0x34>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	2001      	movs	r0, #1
 8001192:	fa00 f202 	lsl.w	r2, r0, r2
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	e000e100 	.word	0xe000e100

080011a8 <__NVIC_SetPriority>:
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	6039      	str	r1, [r7, #0]
 80011b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	db0a      	blt.n	80011d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	490c      	ldr	r1, [pc, #48]	; (80011f4 <__NVIC_SetPriority+0x4c>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	0112      	lsls	r2, r2, #4
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	440b      	add	r3, r1
 80011cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011d0:	e00a      	b.n	80011e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4908      	ldr	r1, [pc, #32]	; (80011f8 <__NVIC_SetPriority+0x50>)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	3b04      	subs	r3, #4
 80011e0:	0112      	lsls	r2, r2, #4
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	440b      	add	r3, r1
 80011e6:	761a      	strb	r2, [r3, #24]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000e100 	.word	0xe000e100
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <NVIC_EncodePriority>:
{
 80011fc:	b480      	push	{r7}
 80011fe:	b089      	sub	sp, #36	; 0x24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f1c3 0307 	rsb	r3, r3, #7
 8001216:	2b04      	cmp	r3, #4
 8001218:	bf28      	it	cs
 800121a:	2304      	movcs	r3, #4
 800121c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3304      	adds	r3, #4
 8001222:	2b06      	cmp	r3, #6
 8001224:	d902      	bls.n	800122c <NVIC_EncodePriority+0x30>
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3b03      	subs	r3, #3
 800122a:	e000      	b.n	800122e <NVIC_EncodePriority+0x32>
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	f04f 32ff 	mov.w	r2, #4294967295
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43da      	mvns	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	401a      	ands	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001244:	f04f 31ff 	mov.w	r1, #4294967295
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	43d9      	mvns	r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	4313      	orrs	r3, r2
}
 8001256:	4618      	mov	r0, r3
 8001258:	3724      	adds	r7, #36	; 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff4f 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001288:	f7ff ff64 	bl	8001154 <__NVIC_GetPriorityGrouping>
 800128c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	6978      	ldr	r0, [r7, #20]
 8001294:	f7ff ffb2 	bl	80011fc <NVIC_EncodePriority>
 8001298:	4602      	mov	r2, r0
 800129a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129e:	4611      	mov	r1, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff81 	bl	80011a8 <__NVIC_SetPriority>
}
 80012a6:	bf00      	nop
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff57 	bl	8001170 <__NVIC_EnableIRQ>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012d4:	2300      	movs	r3, #0
 80012d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d005      	beq.n	80012ee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2204      	movs	r2, #4
 80012e6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]
 80012ec:	e051      	b.n	8001392 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 020e 	bic.w	r2, r2, #14
 80012fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f022 0201 	bic.w	r2, r2, #1
 800130c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a22      	ldr	r2, [pc, #136]	; (800139c <HAL_DMA_Abort_IT+0xd0>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d029      	beq.n	800136c <HAL_DMA_Abort_IT+0xa0>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a20      	ldr	r2, [pc, #128]	; (80013a0 <HAL_DMA_Abort_IT+0xd4>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d022      	beq.n	8001368 <HAL_DMA_Abort_IT+0x9c>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a1f      	ldr	r2, [pc, #124]	; (80013a4 <HAL_DMA_Abort_IT+0xd8>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d01a      	beq.n	8001362 <HAL_DMA_Abort_IT+0x96>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a1d      	ldr	r2, [pc, #116]	; (80013a8 <HAL_DMA_Abort_IT+0xdc>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d012      	beq.n	800135c <HAL_DMA_Abort_IT+0x90>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a1c      	ldr	r2, [pc, #112]	; (80013ac <HAL_DMA_Abort_IT+0xe0>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d00a      	beq.n	8001356 <HAL_DMA_Abort_IT+0x8a>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a1a      	ldr	r2, [pc, #104]	; (80013b0 <HAL_DMA_Abort_IT+0xe4>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d102      	bne.n	8001350 <HAL_DMA_Abort_IT+0x84>
 800134a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800134e:	e00e      	b.n	800136e <HAL_DMA_Abort_IT+0xa2>
 8001350:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001354:	e00b      	b.n	800136e <HAL_DMA_Abort_IT+0xa2>
 8001356:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800135a:	e008      	b.n	800136e <HAL_DMA_Abort_IT+0xa2>
 800135c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001360:	e005      	b.n	800136e <HAL_DMA_Abort_IT+0xa2>
 8001362:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001366:	e002      	b.n	800136e <HAL_DMA_Abort_IT+0xa2>
 8001368:	2310      	movs	r3, #16
 800136a:	e000      	b.n	800136e <HAL_DMA_Abort_IT+0xa2>
 800136c:	2301      	movs	r3, #1
 800136e:	4a11      	ldr	r2, [pc, #68]	; (80013b4 <HAL_DMA_Abort_IT+0xe8>)
 8001370:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	4798      	blx	r3
    } 
  }
  return status;
 8001392:	7bfb      	ldrb	r3, [r7, #15]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40020008 	.word	0x40020008
 80013a0:	4002001c 	.word	0x4002001c
 80013a4:	40020030 	.word	0x40020030
 80013a8:	40020044 	.word	0x40020044
 80013ac:	40020058 	.word	0x40020058
 80013b0:	4002006c 	.word	0x4002006c
 80013b4:	40020000 	.word	0x40020000

080013b8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr

080013d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b08b      	sub	sp, #44	; 0x2c
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e2:	e169      	b.n	80016b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013e4:	2201      	movs	r2, #1
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	69fa      	ldr	r2, [r7, #28]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	f040 8158 	bne.w	80016b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	4a9a      	ldr	r2, [pc, #616]	; (8001670 <HAL_GPIO_Init+0x2a0>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d05e      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 800140c:	4a98      	ldr	r2, [pc, #608]	; (8001670 <HAL_GPIO_Init+0x2a0>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d875      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 8001412:	4a98      	ldr	r2, [pc, #608]	; (8001674 <HAL_GPIO_Init+0x2a4>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d058      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 8001418:	4a96      	ldr	r2, [pc, #600]	; (8001674 <HAL_GPIO_Init+0x2a4>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d86f      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 800141e:	4a96      	ldr	r2, [pc, #600]	; (8001678 <HAL_GPIO_Init+0x2a8>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d052      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 8001424:	4a94      	ldr	r2, [pc, #592]	; (8001678 <HAL_GPIO_Init+0x2a8>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d869      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 800142a:	4a94      	ldr	r2, [pc, #592]	; (800167c <HAL_GPIO_Init+0x2ac>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d04c      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 8001430:	4a92      	ldr	r2, [pc, #584]	; (800167c <HAL_GPIO_Init+0x2ac>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d863      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 8001436:	4a92      	ldr	r2, [pc, #584]	; (8001680 <HAL_GPIO_Init+0x2b0>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d046      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 800143c:	4a90      	ldr	r2, [pc, #576]	; (8001680 <HAL_GPIO_Init+0x2b0>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d85d      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 8001442:	2b12      	cmp	r3, #18
 8001444:	d82a      	bhi.n	800149c <HAL_GPIO_Init+0xcc>
 8001446:	2b12      	cmp	r3, #18
 8001448:	d859      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 800144a:	a201      	add	r2, pc, #4	; (adr r2, 8001450 <HAL_GPIO_Init+0x80>)
 800144c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001450:	080014cb 	.word	0x080014cb
 8001454:	080014a5 	.word	0x080014a5
 8001458:	080014b7 	.word	0x080014b7
 800145c:	080014f9 	.word	0x080014f9
 8001460:	080014ff 	.word	0x080014ff
 8001464:	080014ff 	.word	0x080014ff
 8001468:	080014ff 	.word	0x080014ff
 800146c:	080014ff 	.word	0x080014ff
 8001470:	080014ff 	.word	0x080014ff
 8001474:	080014ff 	.word	0x080014ff
 8001478:	080014ff 	.word	0x080014ff
 800147c:	080014ff 	.word	0x080014ff
 8001480:	080014ff 	.word	0x080014ff
 8001484:	080014ff 	.word	0x080014ff
 8001488:	080014ff 	.word	0x080014ff
 800148c:	080014ff 	.word	0x080014ff
 8001490:	080014ff 	.word	0x080014ff
 8001494:	080014ad 	.word	0x080014ad
 8001498:	080014c1 	.word	0x080014c1
 800149c:	4a79      	ldr	r2, [pc, #484]	; (8001684 <HAL_GPIO_Init+0x2b4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d013      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014a2:	e02c      	b.n	80014fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	623b      	str	r3, [r7, #32]
          break;
 80014aa:	e029      	b.n	8001500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	3304      	adds	r3, #4
 80014b2:	623b      	str	r3, [r7, #32]
          break;
 80014b4:	e024      	b.n	8001500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	3308      	adds	r3, #8
 80014bc:	623b      	str	r3, [r7, #32]
          break;
 80014be:	e01f      	b.n	8001500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	330c      	adds	r3, #12
 80014c6:	623b      	str	r3, [r7, #32]
          break;
 80014c8:	e01a      	b.n	8001500 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d102      	bne.n	80014d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014d2:	2304      	movs	r3, #4
 80014d4:	623b      	str	r3, [r7, #32]
          break;
 80014d6:	e013      	b.n	8001500 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d105      	bne.n	80014ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014e0:	2308      	movs	r3, #8
 80014e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69fa      	ldr	r2, [r7, #28]
 80014e8:	611a      	str	r2, [r3, #16]
          break;
 80014ea:	e009      	b.n	8001500 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014ec:	2308      	movs	r3, #8
 80014ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	615a      	str	r2, [r3, #20]
          break;
 80014f6:	e003      	b.n	8001500 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
          break;
 80014fc:	e000      	b.n	8001500 <HAL_GPIO_Init+0x130>
          break;
 80014fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	2bff      	cmp	r3, #255	; 0xff
 8001504:	d801      	bhi.n	800150a <HAL_GPIO_Init+0x13a>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	e001      	b.n	800150e <HAL_GPIO_Init+0x13e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3304      	adds	r3, #4
 800150e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	2bff      	cmp	r3, #255	; 0xff
 8001514:	d802      	bhi.n	800151c <HAL_GPIO_Init+0x14c>
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	e002      	b.n	8001522 <HAL_GPIO_Init+0x152>
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	3b08      	subs	r3, #8
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	210f      	movs	r1, #15
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	fa01 f303 	lsl.w	r3, r1, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	401a      	ands	r2, r3
 8001534:	6a39      	ldr	r1, [r7, #32]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	fa01 f303 	lsl.w	r3, r1, r3
 800153c:	431a      	orrs	r2, r3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 80b1 	beq.w	80016b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001550:	4b4d      	ldr	r3, [pc, #308]	; (8001688 <HAL_GPIO_Init+0x2b8>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4a4c      	ldr	r2, [pc, #304]	; (8001688 <HAL_GPIO_Init+0x2b8>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6193      	str	r3, [r2, #24]
 800155c:	4b4a      	ldr	r3, [pc, #296]	; (8001688 <HAL_GPIO_Init+0x2b8>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001568:	4a48      	ldr	r2, [pc, #288]	; (800168c <HAL_GPIO_Init+0x2bc>)
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	089b      	lsrs	r3, r3, #2
 800156e:	3302      	adds	r3, #2
 8001570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001574:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	220f      	movs	r2, #15
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	4013      	ands	r3, r2
 800158a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a40      	ldr	r2, [pc, #256]	; (8001690 <HAL_GPIO_Init+0x2c0>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d013      	beq.n	80015bc <HAL_GPIO_Init+0x1ec>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a3f      	ldr	r2, [pc, #252]	; (8001694 <HAL_GPIO_Init+0x2c4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d00d      	beq.n	80015b8 <HAL_GPIO_Init+0x1e8>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a3e      	ldr	r2, [pc, #248]	; (8001698 <HAL_GPIO_Init+0x2c8>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d007      	beq.n	80015b4 <HAL_GPIO_Init+0x1e4>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a3d      	ldr	r2, [pc, #244]	; (800169c <HAL_GPIO_Init+0x2cc>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d101      	bne.n	80015b0 <HAL_GPIO_Init+0x1e0>
 80015ac:	2303      	movs	r3, #3
 80015ae:	e006      	b.n	80015be <HAL_GPIO_Init+0x1ee>
 80015b0:	2304      	movs	r3, #4
 80015b2:	e004      	b.n	80015be <HAL_GPIO_Init+0x1ee>
 80015b4:	2302      	movs	r3, #2
 80015b6:	e002      	b.n	80015be <HAL_GPIO_Init+0x1ee>
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <HAL_GPIO_Init+0x1ee>
 80015bc:	2300      	movs	r3, #0
 80015be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c0:	f002 0203 	and.w	r2, r2, #3
 80015c4:	0092      	lsls	r2, r2, #2
 80015c6:	4093      	lsls	r3, r2
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015ce:	492f      	ldr	r1, [pc, #188]	; (800168c <HAL_GPIO_Init+0x2bc>)
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	089b      	lsrs	r3, r3, #2
 80015d4:	3302      	adds	r3, #2
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d006      	beq.n	80015f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015e8:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	492c      	ldr	r1, [pc, #176]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	600b      	str	r3, [r1, #0]
 80015f4:	e006      	b.n	8001604 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015f6:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	4928      	ldr	r1, [pc, #160]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001600:	4013      	ands	r3, r2
 8001602:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d006      	beq.n	800161e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001610:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	4922      	ldr	r1, [pc, #136]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	604b      	str	r3, [r1, #4]
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	43db      	mvns	r3, r3
 8001626:	491e      	ldr	r1, [pc, #120]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001628:	4013      	ands	r3, r2
 800162a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d006      	beq.n	8001646 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001638:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	4918      	ldr	r1, [pc, #96]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	608b      	str	r3, [r1, #8]
 8001644:	e006      	b.n	8001654 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	43db      	mvns	r3, r3
 800164e:	4914      	ldr	r1, [pc, #80]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001650:	4013      	ands	r3, r2
 8001652:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d021      	beq.n	80016a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	490e      	ldr	r1, [pc, #56]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	60cb      	str	r3, [r1, #12]
 800166c:	e021      	b.n	80016b2 <HAL_GPIO_Init+0x2e2>
 800166e:	bf00      	nop
 8001670:	10320000 	.word	0x10320000
 8001674:	10310000 	.word	0x10310000
 8001678:	10220000 	.word	0x10220000
 800167c:	10210000 	.word	0x10210000
 8001680:	10120000 	.word	0x10120000
 8001684:	10110000 	.word	0x10110000
 8001688:	40021000 	.word	0x40021000
 800168c:	40010000 	.word	0x40010000
 8001690:	40010800 	.word	0x40010800
 8001694:	40010c00 	.word	0x40010c00
 8001698:	40011000 	.word	0x40011000
 800169c:	40011400 	.word	0x40011400
 80016a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <HAL_GPIO_Init+0x304>)
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	4909      	ldr	r1, [pc, #36]	; (80016d4 <HAL_GPIO_Init+0x304>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	3301      	adds	r3, #1
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	fa22 f303 	lsr.w	r3, r2, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f47f ae8e 	bne.w	80013e4 <HAL_GPIO_Init+0x14>
  }
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	372c      	adds	r7, #44	; 0x2c
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	40010400 	.word	0x40010400

080016d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	807b      	strh	r3, [r7, #2]
 80016e4:	4613      	mov	r3, r2
 80016e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016e8:	787b      	ldrb	r3, [r7, #1]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ee:	887a      	ldrh	r2, [r7, #2]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016f4:	e003      	b.n	80016fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016f6:	887b      	ldrh	r3, [r7, #2]
 80016f8:	041a      	lsls	r2, r3, #16
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	611a      	str	r2, [r3, #16]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800171a:	887a      	ldrh	r2, [r7, #2]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4013      	ands	r3, r2
 8001720:	041a      	lsls	r2, r3, #16
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	43d9      	mvns	r1, r3
 8001726:	887b      	ldrh	r3, [r7, #2]
 8001728:	400b      	ands	r3, r1
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	611a      	str	r2, [r3, #16]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
	...

0800173c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e12b      	b.n	80019a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d106      	bne.n	8001768 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff f8b8 	bl	80008d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2224      	movs	r2, #36	; 0x24
 800176c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0201 	bic.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800178e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800179e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017a0:	f002 fe88 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 80017a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	4a81      	ldr	r2, [pc, #516]	; (80019b0 <HAL_I2C_Init+0x274>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d807      	bhi.n	80017c0 <HAL_I2C_Init+0x84>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4a80      	ldr	r2, [pc, #512]	; (80019b4 <HAL_I2C_Init+0x278>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	bf94      	ite	ls
 80017b8:	2301      	movls	r3, #1
 80017ba:	2300      	movhi	r3, #0
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	e006      	b.n	80017ce <HAL_I2C_Init+0x92>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4a7d      	ldr	r2, [pc, #500]	; (80019b8 <HAL_I2C_Init+0x27c>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	bf94      	ite	ls
 80017c8:	2301      	movls	r3, #1
 80017ca:	2300      	movhi	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e0e7      	b.n	80019a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4a78      	ldr	r2, [pc, #480]	; (80019bc <HAL_I2C_Init+0x280>)
 80017da:	fba2 2303 	umull	r2, r3, r2, r3
 80017de:	0c9b      	lsrs	r3, r3, #18
 80017e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68ba      	ldr	r2, [r7, #8]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	4a6a      	ldr	r2, [pc, #424]	; (80019b0 <HAL_I2C_Init+0x274>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d802      	bhi.n	8001810 <HAL_I2C_Init+0xd4>
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	3301      	adds	r3, #1
 800180e:	e009      	b.n	8001824 <HAL_I2C_Init+0xe8>
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001816:	fb02 f303 	mul.w	r3, r2, r3
 800181a:	4a69      	ldr	r2, [pc, #420]	; (80019c0 <HAL_I2C_Init+0x284>)
 800181c:	fba2 2303 	umull	r2, r3, r2, r3
 8001820:	099b      	lsrs	r3, r3, #6
 8001822:	3301      	adds	r3, #1
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	430b      	orrs	r3, r1
 800182a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001836:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	495c      	ldr	r1, [pc, #368]	; (80019b0 <HAL_I2C_Init+0x274>)
 8001840:	428b      	cmp	r3, r1
 8001842:	d819      	bhi.n	8001878 <HAL_I2C_Init+0x13c>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	1e59      	subs	r1, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001852:	1c59      	adds	r1, r3, #1
 8001854:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001858:	400b      	ands	r3, r1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00a      	beq.n	8001874 <HAL_I2C_Init+0x138>
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1e59      	subs	r1, r3, #1
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	fbb1 f3f3 	udiv	r3, r1, r3
 800186c:	3301      	adds	r3, #1
 800186e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001872:	e051      	b.n	8001918 <HAL_I2C_Init+0x1dc>
 8001874:	2304      	movs	r3, #4
 8001876:	e04f      	b.n	8001918 <HAL_I2C_Init+0x1dc>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d111      	bne.n	80018a4 <HAL_I2C_Init+0x168>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	1e58      	subs	r0, r3, #1
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6859      	ldr	r1, [r3, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	440b      	add	r3, r1
 800188e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001892:	3301      	adds	r3, #1
 8001894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001898:	2b00      	cmp	r3, #0
 800189a:	bf0c      	ite	eq
 800189c:	2301      	moveq	r3, #1
 800189e:	2300      	movne	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	e012      	b.n	80018ca <HAL_I2C_Init+0x18e>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	1e58      	subs	r0, r3, #1
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6859      	ldr	r1, [r3, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	0099      	lsls	r1, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ba:	3301      	adds	r3, #1
 80018bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	bf0c      	ite	eq
 80018c4:	2301      	moveq	r3, #1
 80018c6:	2300      	movne	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_I2C_Init+0x196>
 80018ce:	2301      	movs	r3, #1
 80018d0:	e022      	b.n	8001918 <HAL_I2C_Init+0x1dc>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10e      	bne.n	80018f8 <HAL_I2C_Init+0x1bc>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	1e58      	subs	r0, r3, #1
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6859      	ldr	r1, [r3, #4]
 80018e2:	460b      	mov	r3, r1
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	440b      	add	r3, r1
 80018e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ec:	3301      	adds	r3, #1
 80018ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018f6:	e00f      	b.n	8001918 <HAL_I2C_Init+0x1dc>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	1e58      	subs	r0, r3, #1
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6859      	ldr	r1, [r3, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	0099      	lsls	r1, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	fbb0 f3f3 	udiv	r3, r0, r3
 800190e:	3301      	adds	r3, #1
 8001910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001914:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	6809      	ldr	r1, [r1, #0]
 800191c:	4313      	orrs	r3, r2
 800191e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69da      	ldr	r2, [r3, #28]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001946:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6911      	ldr	r1, [r2, #16]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	68d2      	ldr	r2, [r2, #12]
 8001952:	4311      	orrs	r1, r2
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	430b      	orrs	r3, r1
 800195a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	695a      	ldr	r2, [r3, #20]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f042 0201 	orr.w	r2, r2, #1
 8001986:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2220      	movs	r2, #32
 8001992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	000186a0 	.word	0x000186a0
 80019b4:	001e847f 	.word	0x001e847f
 80019b8:	003d08ff 	.word	0x003d08ff
 80019bc:	431bde83 	.word	0x431bde83
 80019c0:	10624dd3 	.word	0x10624dd3

080019c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08c      	sub	sp, #48	; 0x30
 80019c8:	af02      	add	r7, sp, #8
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	4608      	mov	r0, r1
 80019ce:	4611      	mov	r1, r2
 80019d0:	461a      	mov	r2, r3
 80019d2:	4603      	mov	r3, r0
 80019d4:	817b      	strh	r3, [r7, #10]
 80019d6:	460b      	mov	r3, r1
 80019d8:	813b      	strh	r3, [r7, #8]
 80019da:	4613      	mov	r3, r2
 80019dc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019e2:	f7ff fb65 	bl	80010b0 <HAL_GetTick>
 80019e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b20      	cmp	r3, #32
 80019f2:	f040 8244 	bne.w	8001e7e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	2319      	movs	r3, #25
 80019fc:	2201      	movs	r2, #1
 80019fe:	4982      	ldr	r1, [pc, #520]	; (8001c08 <HAL_I2C_Mem_Read+0x244>)
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f001 ff9b 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e237      	b.n	8001e80 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_I2C_Mem_Read+0x5a>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e230      	b.n	8001e80 <HAL_I2C_Mem_Read+0x4bc>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d007      	beq.n	8001a44 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0201 	orr.w	r2, r2, #1
 8001a42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2222      	movs	r2, #34	; 0x22
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2240      	movs	r2, #64	; 0x40
 8001a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001a74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4a62      	ldr	r2, [pc, #392]	; (8001c0c <HAL_I2C_Mem_Read+0x248>)
 8001a84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a86:	88f8      	ldrh	r0, [r7, #6]
 8001a88:	893a      	ldrh	r2, [r7, #8]
 8001a8a:	8979      	ldrh	r1, [r7, #10]
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	4603      	mov	r3, r0
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f001 fdc0 	bl	800361c <I2C_RequestMemoryRead>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e1ec      	b.n	8001e80 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d113      	bne.n	8001ad6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	e1c0      	b.n	8001e58 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d11e      	bne.n	8001b1c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001aee:	b672      	cpsid	i
}
 8001af0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	61bb      	str	r3, [r7, #24]
 8001b06:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b18:	b662      	cpsie	i
}
 8001b1a:	e035      	b.n	8001b88 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d11e      	bne.n	8001b62 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b34:	b672      	cpsid	i
}
 8001b36:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b5e:	b662      	cpsie	i
}
 8001b60:	e012      	b.n	8001b88 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b70:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001b88:	e166      	b.n	8001e58 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	f200 811f 	bhi.w	8001dd2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d123      	bne.n	8001be4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f002 f815 	bl	8003bd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e167      	b.n	8001e80 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691a      	ldr	r2, [r3, #16]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001be2:	e139      	b.n	8001e58 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d152      	bne.n	8001c92 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	4906      	ldr	r1, [pc, #24]	; (8001c10 <HAL_I2C_Mem_Read+0x24c>)
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f001 fea0 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d008      	beq.n	8001c14 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e13c      	b.n	8001e80 <HAL_I2C_Mem_Read+0x4bc>
 8001c06:	bf00      	nop
 8001c08:	00100002 	.word	0x00100002
 8001c0c:	ffff0000 	.word	0xffff0000
 8001c10:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001c14:	b672      	cpsid	i
}
 8001c16:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	691a      	ldr	r2, [r3, #16]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c44:	3b01      	subs	r3, #1
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001c5a:	b662      	cpsie	i
}
 8001c5c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c90:	e0e2      	b.n	8001e58 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c98:	2200      	movs	r2, #0
 8001c9a:	497b      	ldr	r1, [pc, #492]	; (8001e88 <HAL_I2C_Mem_Read+0x4c4>)
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f001 fe4d 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0e9      	b.n	8001e80 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001cbc:	b672      	cpsid	i
}
 8001cbe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691a      	ldr	r2, [r3, #16]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	3b01      	subs	r3, #1
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001cf2:	4b66      	ldr	r3, [pc, #408]	; (8001e8c <HAL_I2C_Mem_Read+0x4c8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	08db      	lsrs	r3, r3, #3
 8001cf8:	4a65      	ldr	r2, [pc, #404]	; (8001e90 <HAL_I2C_Mem_Read+0x4cc>)
 8001cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfe:	0a1a      	lsrs	r2, r3, #8
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	00da      	lsls	r2, r3, #3
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001d12:	6a3b      	ldr	r3, [r7, #32]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d118      	bne.n	8001d4a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2220      	movs	r2, #32
 8001d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f043 0220 	orr.w	r2, r3, #32
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001d3a:	b662      	cpsie	i
}
 8001d3c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e09a      	b.n	8001e80 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d1d9      	bne.n	8001d0c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691a      	ldr	r2, [r3, #16]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	1c5a      	adds	r2, r3, #1
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	3b01      	subs	r3, #1
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001d9a:	b662      	cpsie	i
}
 8001d9c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	691a      	ldr	r2, [r3, #16]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001dd0:	e042      	b.n	8001e58 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f001 fefa 	bl	8003bd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e04c      	b.n	8001e80 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e02:	3b01      	subs	r3, #1
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	3b01      	subs	r3, #1
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d118      	bne.n	8001e58 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f47f ae94 	bne.w	8001b8a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2220      	movs	r2, #32
 8001e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e000      	b.n	8001e80 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001e7e:	2302      	movs	r3, #2
  }
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3728      	adds	r7, #40	; 0x28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	00010004 	.word	0x00010004
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	14f8b589 	.word	0x14f8b589

08001e94 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001eb4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ebc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	2b10      	cmp	r3, #16
 8001ec2:	d003      	beq.n	8001ecc <HAL_I2C_EV_IRQHandler+0x38>
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	2b40      	cmp	r3, #64	; 0x40
 8001ec8:	f040 80bd 	bne.w	8002046 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10d      	bne.n	8001f02 <HAL_I2C_EV_IRQHandler+0x6e>
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001eec:	d003      	beq.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x62>
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001ef4:	d101      	bne.n	8001efa <HAL_I2C_EV_IRQHandler+0x66>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <HAL_I2C_EV_IRQHandler+0x68>
 8001efa:	2300      	movs	r3, #0
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	f000 812e 	beq.w	800215e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00c      	beq.n	8001f26 <HAL_I2C_EV_IRQHandler+0x92>
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	0a5b      	lsrs	r3, r3, #9
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d006      	beq.n	8001f26 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f001 fedd 	bl	8003cd8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 fd60 	bl	80029e4 <I2C_Master_SB>
 8001f24:	e08e      	b.n	8002044 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	08db      	lsrs	r3, r3, #3
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d009      	beq.n	8001f46 <HAL_I2C_EV_IRQHandler+0xb2>
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	0a5b      	lsrs	r3, r3, #9
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 fdd5 	bl	8002aee <I2C_Master_ADD10>
 8001f44:	e07e      	b.n	8002044 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	085b      	lsrs	r3, r3, #1
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d009      	beq.n	8001f66 <HAL_I2C_EV_IRQHandler+0xd2>
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	0a5b      	lsrs	r3, r3, #9
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 fdee 	bl	8002b40 <I2C_Master_ADDR>
 8001f64:	e06e      	b.n	8002044 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	089b      	lsrs	r3, r3, #2
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d037      	beq.n	8001fe2 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f80:	f000 80ef 	beq.w	8002162 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	09db      	lsrs	r3, r3, #7
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00f      	beq.n	8001fb0 <HAL_I2C_EV_IRQHandler+0x11c>
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	0a9b      	lsrs	r3, r3, #10
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d009      	beq.n	8001fb0 <HAL_I2C_EV_IRQHandler+0x11c>
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	089b      	lsrs	r3, r3, #2
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d103      	bne.n	8001fb0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f9ed 	bl	8002388 <I2C_MasterTransmit_TXE>
 8001fae:	e049      	b.n	8002044 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 80d2 	beq.w	8002162 <HAL_I2C_EV_IRQHandler+0x2ce>
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	0a5b      	lsrs	r3, r3, #9
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 80cb 	beq.w	8002162 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	2b10      	cmp	r3, #16
 8001fd0:	d103      	bne.n	8001fda <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 fa74 	bl	80024c0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fd8:	e0c3      	b.n	8002162 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fad8 	bl	8002590 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fe0:	e0bf      	b.n	8002162 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ff0:	f000 80b7 	beq.w	8002162 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	099b      	lsrs	r3, r3, #6
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00f      	beq.n	8002020 <HAL_I2C_EV_IRQHandler+0x18c>
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	0a9b      	lsrs	r3, r3, #10
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b00      	cmp	r3, #0
 800200a:	d009      	beq.n	8002020 <HAL_I2C_EV_IRQHandler+0x18c>
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d103      	bne.n	8002020 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 fb48 	bl	80026ae <I2C_MasterReceive_RXNE>
 800201e:	e011      	b.n	8002044 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 809a 	beq.w	8002162 <HAL_I2C_EV_IRQHandler+0x2ce>
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	0a5b      	lsrs	r3, r3, #9
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 8093 	beq.w	8002162 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 fbe7 	bl	8002810 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002042:	e08e      	b.n	8002162 <HAL_I2C_EV_IRQHandler+0x2ce>
 8002044:	e08d      	b.n	8002162 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	2b00      	cmp	r3, #0
 800204c:	d004      	beq.n	8002058 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	61fb      	str	r3, [r7, #28]
 8002056:	e007      	b.n	8002068 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	085b      	lsrs	r3, r3, #1
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d012      	beq.n	800209a <HAL_I2C_EV_IRQHandler+0x206>
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	0a5b      	lsrs	r3, r3, #9
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00c      	beq.n	800209a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002090:	69b9      	ldr	r1, [r7, #24]
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 ffab 	bl	8002fee <I2C_Slave_ADDR>
 8002098:	e066      	b.n	8002168 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d009      	beq.n	80020ba <HAL_I2C_EV_IRQHandler+0x226>
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	0a5b      	lsrs	r3, r3, #9
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 ffe0 	bl	8003078 <I2C_Slave_STOPF>
 80020b8:	e056      	b.n	8002168 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80020ba:	7bbb      	ldrb	r3, [r7, #14]
 80020bc:	2b21      	cmp	r3, #33	; 0x21
 80020be:	d002      	beq.n	80020c6 <HAL_I2C_EV_IRQHandler+0x232>
 80020c0:	7bbb      	ldrb	r3, [r7, #14]
 80020c2:	2b29      	cmp	r3, #41	; 0x29
 80020c4:	d125      	bne.n	8002112 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	09db      	lsrs	r3, r3, #7
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00f      	beq.n	80020f2 <HAL_I2C_EV_IRQHandler+0x25e>
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	0a9b      	lsrs	r3, r3, #10
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <HAL_I2C_EV_IRQHandler+0x25e>
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d103      	bne.n	80020f2 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 fec3 	bl	8002e76 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020f0:	e039      	b.n	8002166 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	089b      	lsrs	r3, r3, #2
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d033      	beq.n	8002166 <HAL_I2C_EV_IRQHandler+0x2d2>
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	0a5b      	lsrs	r3, r3, #9
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d02d      	beq.n	8002166 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 fef0 	bl	8002ef0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002110:	e029      	b.n	8002166 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	099b      	lsrs	r3, r3, #6
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00f      	beq.n	800213e <HAL_I2C_EV_IRQHandler+0x2aa>
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	0a9b      	lsrs	r3, r3, #10
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d009      	beq.n	800213e <HAL_I2C_EV_IRQHandler+0x2aa>
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	089b      	lsrs	r3, r3, #2
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d103      	bne.n	800213e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 fefa 	bl	8002f30 <I2C_SlaveReceive_RXNE>
 800213c:	e014      	b.n	8002168 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00e      	beq.n	8002168 <HAL_I2C_EV_IRQHandler+0x2d4>
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	0a5b      	lsrs	r3, r3, #9
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d008      	beq.n	8002168 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 ff28 	bl	8002fac <I2C_SlaveReceive_BTF>
 800215c:	e004      	b.n	8002168 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800215e:	bf00      	nop
 8002160:	e002      	b.n	8002168 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002162:	bf00      	nop
 8002164:	e000      	b.n	8002168 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002166:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002168:	3720      	adds	r7, #32
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b08a      	sub	sp, #40	; 0x28
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002190:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d016      	beq.n	80021cc <HAL_I2C_ER_IRQHandler+0x5e>
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d010      	beq.n	80021cc <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80021ba:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ca:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	0a5b      	lsrs	r3, r3, #9
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00e      	beq.n	80021f6 <HAL_I2C_ER_IRQHandler+0x88>
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	0a1b      	lsrs	r3, r3, #8
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d008      	beq.n	80021f6 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	f043 0302 	orr.w	r3, r3, #2
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80021f4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	0a9b      	lsrs	r3, r3, #10
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d03f      	beq.n	8002282 <HAL_I2C_ER_IRQHandler+0x114>
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	0a1b      	lsrs	r3, r3, #8
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d039      	beq.n	8002282 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 800220e:	7efb      	ldrb	r3, [r7, #27]
 8002210:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002216:	b29b      	uxth	r3, r3
 8002218:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002220:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002228:	7ebb      	ldrb	r3, [r7, #26]
 800222a:	2b20      	cmp	r3, #32
 800222c:	d112      	bne.n	8002254 <HAL_I2C_ER_IRQHandler+0xe6>
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10f      	bne.n	8002254 <HAL_I2C_ER_IRQHandler+0xe6>
 8002234:	7cfb      	ldrb	r3, [r7, #19]
 8002236:	2b21      	cmp	r3, #33	; 0x21
 8002238:	d008      	beq.n	800224c <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800223a:	7cfb      	ldrb	r3, [r7, #19]
 800223c:	2b29      	cmp	r3, #41	; 0x29
 800223e:	d005      	beq.n	800224c <HAL_I2C_ER_IRQHandler+0xde>
 8002240:	7cfb      	ldrb	r3, [r7, #19]
 8002242:	2b28      	cmp	r3, #40	; 0x28
 8002244:	d106      	bne.n	8002254 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2b21      	cmp	r3, #33	; 0x21
 800224a:	d103      	bne.n	8002254 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f001 f843 	bl	80032d8 <I2C_Slave_AF>
 8002252:	e016      	b.n	8002282 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800225c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	f043 0304 	orr.w	r3, r3, #4
 8002264:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002266:	7efb      	ldrb	r3, [r7, #27]
 8002268:	2b10      	cmp	r3, #16
 800226a:	d002      	beq.n	8002272 <HAL_I2C_ER_IRQHandler+0x104>
 800226c:	7efb      	ldrb	r3, [r7, #27]
 800226e:	2b40      	cmp	r3, #64	; 0x40
 8002270:	d107      	bne.n	8002282 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002280:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	0adb      	lsrs	r3, r3, #11
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00e      	beq.n	80022ac <HAL_I2C_ER_IRQHandler+0x13e>
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	0a1b      	lsrs	r3, r3, #8
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d008      	beq.n	80022ac <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	f043 0308 	orr.w	r3, r3, #8
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80022aa:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d008      	beq.n	80022c4 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f001 f87a 	bl	80033b8 <I2C_ITError>
  }
}
 80022c4:	bf00      	nop
 80022c6:	3728      	adds	r7, #40	; 0x28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr

080022de <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr

080022f0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr

08002302 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr

08002314 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	70fb      	strb	r3, [r7, #3]
 8002320:	4613      	mov	r3, r2
 8002322:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr

0800232e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr

08002352 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr

08002376 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002396:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800239e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d150      	bne.n	8002450 <I2C_MasterTransmit_TXE+0xc8>
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
 80023b0:	2b21      	cmp	r3, #33	; 0x21
 80023b2:	d14d      	bne.n	8002450 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d01d      	beq.n	80023f6 <I2C_MasterTransmit_TXE+0x6e>
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d01a      	beq.n	80023f6 <I2C_MasterTransmit_TXE+0x6e>
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023c6:	d016      	beq.n	80023f6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023d6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2211      	movs	r2, #17
 80023dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2220      	movs	r2, #32
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff ff6c 	bl	80022cc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023f4:	e060      	b.n	80024b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002404:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002414:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2220      	movs	r2, #32
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b40      	cmp	r3, #64	; 0x40
 800242e:	d107      	bne.n	8002440 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff ff81 	bl	8002340 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800243e:	e03b      	b.n	80024b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff ff3f 	bl	80022cc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800244e:	e033      	b.n	80024b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	2b21      	cmp	r3, #33	; 0x21
 8002454:	d005      	beq.n	8002462 <I2C_MasterTransmit_TXE+0xda>
 8002456:	7bbb      	ldrb	r3, [r7, #14]
 8002458:	2b40      	cmp	r3, #64	; 0x40
 800245a:	d12d      	bne.n	80024b8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	2b22      	cmp	r3, #34	; 0x22
 8002460:	d12a      	bne.n	80024b8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002466:	b29b      	uxth	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d108      	bne.n	800247e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800247a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800247c:	e01c      	b.n	80024b8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b40      	cmp	r3, #64	; 0x40
 8002488:	d103      	bne.n	8002492 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f880 	bl	8002590 <I2C_MemoryTransmit_TXE_BTF>
}
 8002490:	e012      	b.n	80024b8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	781a      	ldrb	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80024b6:	e7ff      	b.n	80024b8 <I2C_MasterTransmit_TXE+0x130>
 80024b8:	bf00      	nop
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b21      	cmp	r3, #33	; 0x21
 80024d8:	d156      	bne.n	8002588 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d012      	beq.n	800250a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	781a      	ldrb	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fe:	b29b      	uxth	r3, r3
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002508:	e03e      	b.n	8002588 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2b08      	cmp	r3, #8
 800250e:	d01d      	beq.n	800254c <I2C_MasterTransmit_BTF+0x8c>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b20      	cmp	r3, #32
 8002514:	d01a      	beq.n	800254c <I2C_MasterTransmit_BTF+0x8c>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800251c:	d016      	beq.n	800254c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800252c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2211      	movs	r2, #17
 8002532:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff fec1 	bl	80022cc <HAL_I2C_MasterTxCpltCallback>
}
 800254a:	e01d      	b.n	8002588 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800255a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800256a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2220      	movs	r2, #32
 8002576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff fea2 	bl	80022cc <HAL_I2C_MasterTxCpltCallback>
}
 8002588:	bf00      	nop
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d11d      	bne.n	80025e4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d10b      	bne.n	80025c8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c0:	1c9a      	adds	r2, r3, #2
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80025c6:	e06e      	b.n	80026a6 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	121b      	asrs	r3, r3, #8
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80025e2:	e060      	b.n	80026a6 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d10b      	bne.n	8002604 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002602:	e050      	b.n	80026a6 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002608:	2b02      	cmp	r3, #2
 800260a:	d14c      	bne.n	80026a6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	2b22      	cmp	r3, #34	; 0x22
 8002610:	d108      	bne.n	8002624 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002620:	601a      	str	r2, [r3, #0]
}
 8002622:	e040      	b.n	80026a6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d015      	beq.n	800265a <I2C_MemoryTransmit_TXE_BTF+0xca>
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	2b21      	cmp	r3, #33	; 0x21
 8002632:	d112      	bne.n	800265a <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	781a      	ldrb	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264e:	b29b      	uxth	r3, r3
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002658:	e025      	b.n	80026a6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265e:	b29b      	uxth	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d120      	bne.n	80026a6 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	2b21      	cmp	r3, #33	; 0x21
 8002668:	d11d      	bne.n	80026a6 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002678:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002688:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7ff fe4d 	bl	8002340 <HAL_I2C_MemTxCpltCallback>
}
 80026a6:	bf00      	nop
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b22      	cmp	r3, #34	; 0x22
 80026c0:	f040 80a2 	bne.w	8002808 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	d921      	bls.n	8002716 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2b03      	cmp	r3, #3
 8002700:	f040 8082 	bne.w	8002808 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002712:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002714:	e078      	b.n	8002808 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271a:	2b02      	cmp	r3, #2
 800271c:	d074      	beq.n	8002808 <I2C_MasterReceive_RXNE+0x15a>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d002      	beq.n	800272a <I2C_MasterReceive_RXNE+0x7c>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d16e      	bne.n	8002808 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f001 fa1e 	bl	8003b6c <I2C_WaitOnSTOPRequestThroughIT>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d142      	bne.n	80027bc <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002744:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002754:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b40      	cmp	r3, #64	; 0x40
 800278e:	d10a      	bne.n	80027a6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff fdd7 	bl	8002352 <HAL_I2C_MemRxCpltCallback>
}
 80027a4:	e030      	b.n	8002808 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2212      	movs	r2, #18
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff fd92 	bl	80022de <HAL_I2C_MasterRxCpltCallback>
}
 80027ba:	e025      	b.n	8002808 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027ca:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2220      	movs	r2, #32
 80027f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff fdae 	bl	8002364 <HAL_I2C_ErrorCallback>
}
 8002808:	bf00      	nop
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002822:	b29b      	uxth	r3, r3
 8002824:	2b04      	cmp	r3, #4
 8002826:	d11b      	bne.n	8002860 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002836:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691a      	ldr	r2, [r3, #16]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800285e:	e0bd      	b.n	80029dc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002864:	b29b      	uxth	r3, r3
 8002866:	2b03      	cmp	r3, #3
 8002868:	d129      	bne.n	80028be <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002878:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2b04      	cmp	r3, #4
 800287e:	d00a      	beq.n	8002896 <I2C_MasterReceive_BTF+0x86>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d007      	beq.n	8002896 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002894:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80028bc:	e08e      	b.n	80029dc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d176      	bne.n	80029b6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d002      	beq.n	80028d4 <I2C_MasterReceive_BTF+0xc4>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b10      	cmp	r3, #16
 80028d2:	d108      	bne.n	80028e6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	e019      	b.n	800291a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d002      	beq.n	80028f2 <I2C_MasterReceive_BTF+0xe2>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d108      	bne.n	8002904 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	e00a      	b.n	800291a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2b10      	cmp	r3, #16
 8002908:	d007      	beq.n	800291a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002918:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002936:	b29b      	uxth	r3, r3
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	1c5a      	adds	r2, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295c:	b29b      	uxth	r3, r3
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002974:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b40      	cmp	r3, #64	; 0x40
 8002988:	d10a      	bne.n	80029a0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff fcda 	bl	8002352 <HAL_I2C_MemRxCpltCallback>
}
 800299e:	e01d      	b.n	80029dc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2212      	movs	r2, #18
 80029ac:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff fc95 	bl	80022de <HAL_I2C_MasterRxCpltCallback>
}
 80029b4:	e012      	b.n	80029dc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80029dc:	bf00      	nop
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b40      	cmp	r3, #64	; 0x40
 80029f6:	d117      	bne.n	8002a28 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d109      	bne.n	8002a14 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	461a      	mov	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a10:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002a12:	e067      	b.n	8002ae4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	611a      	str	r2, [r3, #16]
}
 8002a26:	e05d      	b.n	8002ae4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a30:	d133      	bne.n	8002a9a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b21      	cmp	r3, #33	; 0x21
 8002a3c:	d109      	bne.n	8002a52 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	461a      	mov	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a4e:	611a      	str	r2, [r3, #16]
 8002a50:	e008      	b.n	8002a64 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d004      	beq.n	8002a76 <I2C_Master_SB+0x92>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d108      	bne.n	8002a88 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d032      	beq.n	8002ae4 <I2C_Master_SB+0x100>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d02d      	beq.n	8002ae4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a96:	605a      	str	r2, [r3, #4]
}
 8002a98:	e024      	b.n	8002ae4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10e      	bne.n	8002ac0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	11db      	asrs	r3, r3, #7
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	f003 0306 	and.w	r3, r3, #6
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	f063 030f 	orn	r3, r3, #15
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	611a      	str	r2, [r3, #16]
}
 8002abe:	e011      	b.n	8002ae4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d10d      	bne.n	8002ae4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	11db      	asrs	r3, r3, #7
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	f003 0306 	and.w	r3, r3, #6
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	f063 030e 	orn	r3, r3, #14
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	611a      	str	r2, [r3, #16]
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr

08002aee <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d103      	bne.n	8002b12 <I2C_Master_ADD10+0x24>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d011      	beq.n	8002b36 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d104      	bne.n	8002b26 <I2C_Master_ADD10+0x38>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d007      	beq.n	8002b36 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b34:	605a      	str	r2, [r3, #4]
    }
  }
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr

08002b40 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b091      	sub	sp, #68	; 0x44
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b56:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b22      	cmp	r3, #34	; 0x22
 8002b68:	f040 8174 	bne.w	8002e54 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10f      	bne.n	8002b94 <I2C_Master_ADDR+0x54>
 8002b74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b78:	2b40      	cmp	r3, #64	; 0x40
 8002b7a:	d10b      	bne.n	8002b94 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	633b      	str	r3, [r7, #48]	; 0x30
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	633b      	str	r3, [r7, #48]	; 0x30
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8002b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b92:	e16b      	b.n	8002e6c <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d11d      	bne.n	8002bd8 <I2C_Master_ADDR+0x98>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ba4:	d118      	bne.n	8002bd8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bca:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	651a      	str	r2, [r3, #80]	; 0x50
 8002bd6:	e149      	b.n	8002e6c <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d113      	bne.n	8002c0a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002be2:	2300      	movs	r3, #0
 8002be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	e120      	b.n	8002e4c <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	f040 808a 	bne.w	8002d2a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c1c:	d137      	bne.n	8002c8e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c2c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c3c:	d113      	bne.n	8002c66 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c4c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c4e:	2300      	movs	r3, #0
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	e0f2      	b.n	8002e4c <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c66:	2300      	movs	r3, #0
 8002c68:	623b      	str	r3, [r7, #32]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	623b      	str	r3, [r7, #32]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	623b      	str	r3, [r7, #32]
 8002c7a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	e0de      	b.n	8002e4c <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c90:	2b08      	cmp	r3, #8
 8002c92:	d02e      	beq.n	8002cf2 <I2C_Master_ADDR+0x1b2>
 8002c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	d02b      	beq.n	8002cf2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9c:	2b12      	cmp	r3, #18
 8002c9e:	d102      	bne.n	8002ca6 <I2C_Master_ADDR+0x166>
 8002ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d125      	bne.n	8002cf2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d00e      	beq.n	8002cca <I2C_Master_ADDR+0x18a>
 8002cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d00b      	beq.n	8002cca <I2C_Master_ADDR+0x18a>
 8002cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb4:	2b10      	cmp	r3, #16
 8002cb6:	d008      	beq.n	8002cca <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	e007      	b.n	8002cda <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cd8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	61fb      	str	r3, [r7, #28]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	e0ac      	b.n	8002e4c <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d00:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d02:	2300      	movs	r3, #0
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	e090      	b.n	8002e4c <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d158      	bne.n	8002de6 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d021      	beq.n	8002d7e <I2C_Master_ADDR+0x23e>
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d01e      	beq.n	8002d7e <I2C_Master_ADDR+0x23e>
 8002d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d42:	2b10      	cmp	r3, #16
 8002d44:	d01b      	beq.n	8002d7e <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d54:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	e012      	b.n	8002da4 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d8c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d8e:	2300      	movs	r3, #0
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002db2:	d14b      	bne.n	8002e4c <I2C_Master_ADDR+0x30c>
 8002db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dba:	d00b      	beq.n	8002dd4 <I2C_Master_ADDR+0x294>
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d008      	beq.n	8002dd4 <I2C_Master_ADDR+0x294>
 8002dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d005      	beq.n	8002dd4 <I2C_Master_ADDR+0x294>
 8002dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dca:	2b10      	cmp	r3, #16
 8002dcc:	d002      	beq.n	8002dd4 <I2C_Master_ADDR+0x294>
 8002dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd0:	2b20      	cmp	r3, #32
 8002dd2:	d13b      	bne.n	8002e4c <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	e032      	b.n	8002e4c <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002df4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e04:	d117      	bne.n	8002e36 <I2C_Master_ADDR+0x2f6>
 8002e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e0c:	d00b      	beq.n	8002e26 <I2C_Master_ADDR+0x2e6>
 8002e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d008      	beq.n	8002e26 <I2C_Master_ADDR+0x2e6>
 8002e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d005      	beq.n	8002e26 <I2C_Master_ADDR+0x2e6>
 8002e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1c:	2b10      	cmp	r3, #16
 8002e1e:	d002      	beq.n	8002e26 <I2C_Master_ADDR+0x2e6>
 8002e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e22:	2b20      	cmp	r3, #32
 8002e24:	d107      	bne.n	8002e36 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e34:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002e52:	e00b      	b.n	8002e6c <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e54:	2300      	movs	r3, #0
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	60bb      	str	r3, [r7, #8]
 8002e68:	68bb      	ldr	r3, [r7, #8]
}
 8002e6a:	e7ff      	b.n	8002e6c <I2C_Master_ADDR+0x32c>
 8002e6c:	bf00      	nop
 8002e6e:	3744      	adds	r7, #68	; 0x44
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr

08002e76 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b084      	sub	sp, #16
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d02b      	beq.n	8002ee8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	781a      	ldrb	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d114      	bne.n	8002ee8 <I2C_SlaveTransmit_TXE+0x72>
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	2b29      	cmp	r3, #41	; 0x29
 8002ec2:	d111      	bne.n	8002ee8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2221      	movs	r2, #33	; 0x21
 8002ed8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2228      	movs	r2, #40	; 0x28
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff fa04 	bl	80022f0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002ee8:	bf00      	nop
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d011      	beq.n	8002f26 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	781a      	ldrb	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d02c      	beq.n	8002fa4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d114      	bne.n	8002fa4 <I2C_SlaveReceive_RXNE+0x74>
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8002f7e:	d111      	bne.n	8002fa4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f8e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2222      	movs	r2, #34	; 0x22
 8002f94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2228      	movs	r2, #40	; 0x28
 8002f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff f9af 	bl	8002302 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d012      	beq.n	8002fe4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr

08002fee <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003002:	b2db      	uxtb	r3, r3
 8003004:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003008:	2b28      	cmp	r3, #40	; 0x28
 800300a:	d127      	bne.n	800305c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800301a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	089b      	lsrs	r3, r3, #2
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003028:	2301      	movs	r3, #1
 800302a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	09db      	lsrs	r3, r3, #7
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	d103      	bne.n	8003040 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	81bb      	strh	r3, [r7, #12]
 800303e:	e002      	b.n	8003046 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800304e:	89ba      	ldrh	r2, [r7, #12]
 8003050:	7bfb      	ldrb	r3, [r7, #15]
 8003052:	4619      	mov	r1, r3
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff f95d 	bl	8002314 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800305a:	e008      	b.n	800306e <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0202 	mvn.w	r2, #2
 8003064:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003086:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003096:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003098:	2300      	movs	r3, #0
 800309a:	60bb      	str	r3, [r7, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0201 	orr.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030c4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d4:	d172      	bne.n	80031bc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	2b22      	cmp	r3, #34	; 0x22
 80030da:	d002      	beq.n	80030e2 <I2C_Slave_STOPF+0x6a>
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	2b2a      	cmp	r3, #42	; 0x2a
 80030e0:	d135      	bne.n	800314e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d005      	beq.n	8003106 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f043 0204 	orr.w	r2, r3, #4
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003114:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311a:	4618      	mov	r0, r3
 800311c:	f7fe f94c 	bl	80013b8 <HAL_DMA_GetState>
 8003120:	4603      	mov	r3, r0
 8003122:	2b01      	cmp	r3, #1
 8003124:	d049      	beq.n	80031ba <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312a:	4a69      	ldr	r2, [pc, #420]	; (80032d0 <I2C_Slave_STOPF+0x258>)
 800312c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003132:	4618      	mov	r0, r3
 8003134:	f7fe f8ca 	bl	80012cc <HAL_DMA_Abort_IT>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d03d      	beq.n	80031ba <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003148:	4610      	mov	r0, r2
 800314a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800314c:	e035      	b.n	80031ba <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	b29a      	uxth	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d005      	beq.n	8003172 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f043 0204 	orr.w	r2, r3, #4
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003180:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003186:	4618      	mov	r0, r3
 8003188:	f7fe f916 	bl	80013b8 <HAL_DMA_GetState>
 800318c:	4603      	mov	r3, r0
 800318e:	2b01      	cmp	r3, #1
 8003190:	d014      	beq.n	80031bc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003196:	4a4e      	ldr	r2, [pc, #312]	; (80032d0 <I2C_Slave_STOPF+0x258>)
 8003198:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fe f894 	bl	80012cc <HAL_DMA_Abort_IT>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d008      	beq.n	80031bc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031b4:	4610      	mov	r0, r2
 80031b6:	4798      	blx	r3
 80031b8:	e000      	b.n	80031bc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031ba:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d03e      	beq.n	8003244 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d112      	bne.n	80031fa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691a      	ldr	r2, [r3, #16]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003204:	2b40      	cmp	r3, #64	; 0x40
 8003206:	d112      	bne.n	800322e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691a      	ldr	r2, [r3, #16]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003224:	b29b      	uxth	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003232:	b29b      	uxth	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	f043 0204 	orr.w	r2, r3, #4
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f8b3 	bl	80033b8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003252:	e039      	b.n	80032c8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003254:	7bfb      	ldrb	r3, [r7, #15]
 8003256:	2b2a      	cmp	r3, #42	; 0x2a
 8003258:	d109      	bne.n	800326e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2228      	movs	r2, #40	; 0x28
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff f84a 	bl	8002302 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b28      	cmp	r3, #40	; 0x28
 8003278:	d111      	bne.n	800329e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a15      	ldr	r2, [pc, #84]	; (80032d4 <I2C_Slave_STOPF+0x25c>)
 800327e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2220      	movs	r2, #32
 800328a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff f849 	bl	800232e <HAL_I2C_ListenCpltCallback>
}
 800329c:	e014      	b.n	80032c8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	2b22      	cmp	r3, #34	; 0x22
 80032a4:	d002      	beq.n	80032ac <I2C_Slave_STOPF+0x234>
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	2b22      	cmp	r3, #34	; 0x22
 80032aa:	d10d      	bne.n	80032c8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff f81d 	bl	8002302 <HAL_I2C_SlaveRxCpltCallback>
}
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	080037ed 	.word	0x080037ed
 80032d4:	ffff0000 	.word	0xffff0000

080032d8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d002      	beq.n	80032fa <I2C_Slave_AF+0x22>
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b20      	cmp	r3, #32
 80032f8:	d129      	bne.n	800334e <I2C_Slave_AF+0x76>
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
 80032fc:	2b28      	cmp	r3, #40	; 0x28
 80032fe:	d126      	bne.n	800334e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a2c      	ldr	r2, [pc, #176]	; (80033b4 <I2C_Slave_AF+0xdc>)
 8003304:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003314:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800331e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800332e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fe fff1 	bl	800232e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800334c:	e02e      	b.n	80033ac <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800334e:	7bfb      	ldrb	r3, [r7, #15]
 8003350:	2b21      	cmp	r3, #33	; 0x21
 8003352:	d126      	bne.n	80033a2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a17      	ldr	r2, [pc, #92]	; (80033b4 <I2C_Slave_AF+0xdc>)
 8003358:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2221      	movs	r2, #33	; 0x21
 800335e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800337e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003388:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003398:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fe ffa8 	bl	80022f0 <HAL_I2C_SlaveTxCpltCallback>
}
 80033a0:	e004      	b.n	80033ac <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033aa:	615a      	str	r2, [r3, #20]
}
 80033ac:	bf00      	nop
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	ffff0000 	.word	0xffff0000

080033b8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80033d0:	7bbb      	ldrb	r3, [r7, #14]
 80033d2:	2b10      	cmp	r3, #16
 80033d4:	d002      	beq.n	80033dc <I2C_ITError+0x24>
 80033d6:	7bbb      	ldrb	r3, [r7, #14]
 80033d8:	2b40      	cmp	r3, #64	; 0x40
 80033da:	d10a      	bne.n	80033f2 <I2C_ITError+0x3a>
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	2b22      	cmp	r3, #34	; 0x22
 80033e0:	d107      	bne.n	80033f2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033f0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033f8:	2b28      	cmp	r3, #40	; 0x28
 80033fa:	d107      	bne.n	800340c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2228      	movs	r2, #40	; 0x28
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800340a:	e015      	b.n	8003438 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003416:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800341a:	d00a      	beq.n	8003432 <I2C_ITError+0x7a>
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	2b60      	cmp	r3, #96	; 0x60
 8003420:	d007      	beq.n	8003432 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003446:	d161      	bne.n	800350c <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003456:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003460:	2b01      	cmp	r3, #1
 8003462:	d020      	beq.n	80034a6 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003468:	4a6a      	ldr	r2, [pc, #424]	; (8003614 <I2C_ITError+0x25c>)
 800346a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003470:	4618      	mov	r0, r3
 8003472:	f7fd ff2b 	bl	80012cc <HAL_DMA_Abort_IT>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 8089 	beq.w	8003590 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0201 	bic.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2220      	movs	r2, #32
 8003492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034a0:	4610      	mov	r0, r2
 80034a2:	4798      	blx	r3
 80034a4:	e074      	b.n	8003590 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034aa:	4a5a      	ldr	r2, [pc, #360]	; (8003614 <I2C_ITError+0x25c>)
 80034ac:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fd ff0a 	bl	80012cc <HAL_DMA_Abort_IT>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d068      	beq.n	8003590 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c8:	2b40      	cmp	r3, #64	; 0x40
 80034ca:	d10b      	bne.n	80034e4 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691a      	ldr	r2, [r3, #16]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0201 	bic.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003506:	4610      	mov	r0, r2
 8003508:	4798      	blx	r3
 800350a:	e041      	b.n	8003590 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b60      	cmp	r3, #96	; 0x60
 8003516:	d125      	bne.n	8003564 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003530:	2b40      	cmp	r3, #64	; 0x40
 8003532:	d10b      	bne.n	800354c <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	691a      	ldr	r2, [r3, #16]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0201 	bic.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7fe ff0a 	bl	8002376 <HAL_I2C_AbortCpltCallback>
 8003562:	e015      	b.n	8003590 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356e:	2b40      	cmp	r3, #64	; 0x40
 8003570:	d10b      	bne.n	800358a <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	691a      	ldr	r2, [r3, #16]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fe feea 	bl	8002364 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10e      	bne.n	80035be <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d109      	bne.n	80035be <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d104      	bne.n	80035be <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d007      	beq.n	80035ce <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035cc:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d4:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d113      	bne.n	800360a <I2C_ITError+0x252>
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	2b28      	cmp	r3, #40	; 0x28
 80035e6:	d110      	bne.n	800360a <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a0b      	ldr	r2, [pc, #44]	; (8003618 <I2C_ITError+0x260>)
 80035ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7fe fe92 	bl	800232e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800360a:	bf00      	nop
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	080037ed 	.word	0x080037ed
 8003618:	ffff0000 	.word	0xffff0000

0800361c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af02      	add	r7, sp, #8
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	4608      	mov	r0, r1
 8003626:	4611      	mov	r1, r2
 8003628:	461a      	mov	r2, r3
 800362a:	4603      	mov	r3, r0
 800362c:	817b      	strh	r3, [r7, #10]
 800362e:	460b      	mov	r3, r1
 8003630:	813b      	strh	r3, [r7, #8]
 8003632:	4613      	mov	r3, r2
 8003634:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003644:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003654:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	2200      	movs	r2, #0
 800365e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f96a 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00d      	beq.n	800368a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800367c:	d103      	bne.n	8003686 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003684:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e0aa      	b.n	80037e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800368a:	897b      	ldrh	r3, [r7, #10]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	461a      	mov	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003698:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	6a3a      	ldr	r2, [r7, #32]
 800369e:	4952      	ldr	r1, [pc, #328]	; (80037e8 <I2C_RequestMemoryRead+0x1cc>)
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f9a2 	bl	80039ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e097      	b.n	80037e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c8:	6a39      	ldr	r1, [r7, #32]
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fa0c 	bl	8003ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00d      	beq.n	80036f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d107      	bne.n	80036ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e076      	b.n	80037e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d105      	bne.n	8003704 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036f8:	893b      	ldrh	r3, [r7, #8]
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	611a      	str	r2, [r3, #16]
 8003702:	e021      	b.n	8003748 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003704:	893b      	ldrh	r3, [r7, #8]
 8003706:	0a1b      	lsrs	r3, r3, #8
 8003708:	b29b      	uxth	r3, r3
 800370a:	b2da      	uxtb	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003714:	6a39      	ldr	r1, [r7, #32]
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f9e6 	bl	8003ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00d      	beq.n	800373e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	2b04      	cmp	r3, #4
 8003728:	d107      	bne.n	800373a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003738:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e050      	b.n	80037e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800373e:	893b      	ldrh	r3, [r7, #8]
 8003740:	b2da      	uxtb	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374a:	6a39      	ldr	r1, [r7, #32]
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 f9cb 	bl	8003ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00d      	beq.n	8003774 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	2b04      	cmp	r3, #4
 800375e:	d107      	bne.n	8003770 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e035      	b.n	80037e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003782:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	2200      	movs	r2, #0
 800378c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 f8d3 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00d      	beq.n	80037b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037aa:	d103      	bne.n	80037b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e013      	b.n	80037e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037b8:	897b      	ldrh	r3, [r7, #10]
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	f043 0301 	orr.w	r3, r3, #1
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	6a3a      	ldr	r2, [r7, #32]
 80037cc:	4906      	ldr	r1, [pc, #24]	; (80037e8 <I2C_RequestMemoryRead+0x1cc>)
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f90b 	bl	80039ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	00010002 	.word	0x00010002

080037ec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003804:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003806:	4b4b      	ldr	r3, [pc, #300]	; (8003934 <I2C_DMAAbort+0x148>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	08db      	lsrs	r3, r3, #3
 800380c:	4a4a      	ldr	r2, [pc, #296]	; (8003938 <I2C_DMAAbort+0x14c>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	0a1a      	lsrs	r2, r3, #8
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	00da      	lsls	r2, r3, #3
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d106      	bne.n	8003834 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	f043 0220 	orr.w	r2, r3, #32
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003832:	e00a      	b.n	800384a <I2C_DMAAbort+0x5e>
    }
    count--;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	3b01      	subs	r3, #1
 8003838:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003848:	d0ea      	beq.n	8003820 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003856:	2200      	movs	r2, #0
 8003858:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003866:	2200      	movs	r2, #0
 8003868:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003878:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2200      	movs	r2, #0
 800387e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388c:	2200      	movs	r2, #0
 800388e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389c:	2200      	movs	r2, #0
 800389e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0201 	bic.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b60      	cmp	r3, #96	; 0x60
 80038ba:	d10e      	bne.n	80038da <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2200      	movs	r2, #0
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80038d2:	6978      	ldr	r0, [r7, #20]
 80038d4:	f7fe fd4f 	bl	8002376 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80038d8:	e027      	b.n	800392a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80038da:	7cfb      	ldrb	r3, [r7, #19]
 80038dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038e0:	2b28      	cmp	r3, #40	; 0x28
 80038e2:	d117      	bne.n	8003914 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003902:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	2200      	movs	r2, #0
 8003908:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2228      	movs	r2, #40	; 0x28
 800390e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003912:	e007      	b.n	8003924 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003924:	6978      	ldr	r0, [r7, #20]
 8003926:	f7fe fd1d 	bl	8002364 <HAL_I2C_ErrorCallback>
}
 800392a:	bf00      	nop
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20000000 	.word	0x20000000
 8003938:	14f8b589 	.word	0x14f8b589

0800393c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	4613      	mov	r3, r2
 800394a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800394c:	e025      	b.n	800399a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d021      	beq.n	800399a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003956:	f7fd fbab 	bl	80010b0 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d302      	bcc.n	800396c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d116      	bne.n	800399a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f043 0220 	orr.w	r2, r3, #32
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e023      	b.n	80039e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	0c1b      	lsrs	r3, r3, #16
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d10d      	bne.n	80039c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	43da      	mvns	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4013      	ands	r3, r2
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	bf0c      	ite	eq
 80039b6:	2301      	moveq	r3, #1
 80039b8:	2300      	movne	r3, #0
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	e00c      	b.n	80039da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	43da      	mvns	r2, r3
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	4013      	ands	r3, r2
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	bf0c      	ite	eq
 80039d2:	2301      	moveq	r3, #1
 80039d4:	2300      	movne	r3, #0
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	461a      	mov	r2, r3
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d0b6      	beq.n	800394e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	607a      	str	r2, [r7, #4]
 80039f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039f8:	e051      	b.n	8003a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a08:	d123      	bne.n	8003a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a18:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a22:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	f043 0204 	orr.w	r2, r3, #4
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e046      	b.n	8003ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a58:	d021      	beq.n	8003a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5a:	f7fd fb29 	bl	80010b0 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d302      	bcc.n	8003a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d116      	bne.n	8003a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f043 0220 	orr.w	r2, r3, #32
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e020      	b.n	8003ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	0c1b      	lsrs	r3, r3, #16
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d10c      	bne.n	8003ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	43da      	mvns	r2, r3
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	bf14      	ite	ne
 8003aba:	2301      	movne	r3, #1
 8003abc:	2300      	moveq	r3, #0
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	e00b      	b.n	8003ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	43da      	mvns	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4013      	ands	r3, r2
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf14      	ite	ne
 8003ad4:	2301      	movne	r3, #1
 8003ad6:	2300      	moveq	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d18d      	bne.n	80039fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003af4:	e02d      	b.n	8003b52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 f8c0 	bl	8003c7c <I2C_IsAcknowledgeFailed>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e02d      	b.n	8003b62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0c:	d021      	beq.n	8003b52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0e:	f7fd facf 	bl	80010b0 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d302      	bcc.n	8003b24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d116      	bne.n	8003b52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f043 0220 	orr.w	r2, r3, #32
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e007      	b.n	8003b62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5c:	2b80      	cmp	r3, #128	; 0x80
 8003b5e:	d1ca      	bne.n	8003af6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b78:	4b13      	ldr	r3, [pc, #76]	; (8003bc8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	08db      	lsrs	r3, r3, #3
 8003b7e:	4a13      	ldr	r2, [pc, #76]	; (8003bcc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003b80:	fba2 2303 	umull	r2, r3, r2, r3
 8003b84:	0a1a      	lsrs	r2, r3, #8
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	3b01      	subs	r3, #1
 8003b92:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d107      	bne.n	8003baa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f043 0220 	orr.w	r2, r3, #32
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e008      	b.n	8003bbc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bb8:	d0e9      	beq.n	8003b8e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20000000 	.word	0x20000000
 8003bcc:	14f8b589 	.word	0x14f8b589

08003bd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bdc:	e042      	b.n	8003c64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d119      	bne.n	8003c20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f06f 0210 	mvn.w	r2, #16
 8003bf4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e029      	b.n	8003c74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c20:	f7fd fa46 	bl	80010b0 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d302      	bcc.n	8003c36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d116      	bne.n	8003c64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c50:	f043 0220 	orr.w	r2, r3, #32
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e007      	b.n	8003c74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6e:	2b40      	cmp	r3, #64	; 0x40
 8003c70:	d1b5      	bne.n	8003bde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c92:	d11b      	bne.n	8003ccc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	f043 0204 	orr.w	r2, r3, #4
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e000      	b.n	8003cce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr

08003cd8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003ce8:	d103      	bne.n	8003cf2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003cf0:	e007      	b.n	8003d02 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003cfa:	d102      	bne.n	8003d02 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2208      	movs	r2, #8
 8003d00:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr

08003d0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e26c      	b.n	80041f8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8087 	beq.w	8003e3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d2c:	4b92      	ldr	r3, [pc, #584]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 030c 	and.w	r3, r3, #12
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d00c      	beq.n	8003d52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d38:	4b8f      	ldr	r3, [pc, #572]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 030c 	and.w	r3, r3, #12
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d112      	bne.n	8003d6a <HAL_RCC_OscConfig+0x5e>
 8003d44:	4b8c      	ldr	r3, [pc, #560]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d50:	d10b      	bne.n	8003d6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d52:	4b89      	ldr	r3, [pc, #548]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d06c      	beq.n	8003e38 <HAL_RCC_OscConfig+0x12c>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d168      	bne.n	8003e38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e246      	b.n	80041f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d72:	d106      	bne.n	8003d82 <HAL_RCC_OscConfig+0x76>
 8003d74:	4b80      	ldr	r3, [pc, #512]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a7f      	ldr	r2, [pc, #508]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	e02e      	b.n	8003de0 <HAL_RCC_OscConfig+0xd4>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCC_OscConfig+0x98>
 8003d8a:	4b7b      	ldr	r3, [pc, #492]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a7a      	ldr	r2, [pc, #488]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	4b78      	ldr	r3, [pc, #480]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a77      	ldr	r2, [pc, #476]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	e01d      	b.n	8003de0 <HAL_RCC_OscConfig+0xd4>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dac:	d10c      	bne.n	8003dc8 <HAL_RCC_OscConfig+0xbc>
 8003dae:	4b72      	ldr	r3, [pc, #456]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a71      	ldr	r2, [pc, #452]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	4b6f      	ldr	r3, [pc, #444]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a6e      	ldr	r2, [pc, #440]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	e00b      	b.n	8003de0 <HAL_RCC_OscConfig+0xd4>
 8003dc8:	4b6b      	ldr	r3, [pc, #428]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a6a      	ldr	r2, [pc, #424]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	4b68      	ldr	r3, [pc, #416]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a67      	ldr	r2, [pc, #412]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d013      	beq.n	8003e10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de8:	f7fd f962 	bl	80010b0 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003df0:	f7fd f95e 	bl	80010b0 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b64      	cmp	r3, #100	; 0x64
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e1fa      	b.n	80041f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e02:	4b5d      	ldr	r3, [pc, #372]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0f0      	beq.n	8003df0 <HAL_RCC_OscConfig+0xe4>
 8003e0e:	e014      	b.n	8003e3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e10:	f7fd f94e 	bl	80010b0 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e18:	f7fd f94a 	bl	80010b0 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b64      	cmp	r3, #100	; 0x64
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e1e6      	b.n	80041f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e2a:	4b53      	ldr	r3, [pc, #332]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f0      	bne.n	8003e18 <HAL_RCC_OscConfig+0x10c>
 8003e36:	e000      	b.n	8003e3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d063      	beq.n	8003f0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e46:	4b4c      	ldr	r3, [pc, #304]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00b      	beq.n	8003e6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e52:	4b49      	ldr	r3, [pc, #292]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f003 030c 	and.w	r3, r3, #12
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d11c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x18c>
 8003e5e:	4b46      	ldr	r3, [pc, #280]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d116      	bne.n	8003e98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6a:	4b43      	ldr	r3, [pc, #268]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <HAL_RCC_OscConfig+0x176>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d001      	beq.n	8003e82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e1ba      	b.n	80041f8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e82:	4b3d      	ldr	r3, [pc, #244]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	4939      	ldr	r1, [pc, #228]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e96:	e03a      	b.n	8003f0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d020      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ea0:	4b36      	ldr	r3, [pc, #216]	; (8003f7c <HAL_RCC_OscConfig+0x270>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea6:	f7fd f903 	bl	80010b0 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eae:	f7fd f8ff 	bl	80010b0 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e19b      	b.n	80041f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec0:	4b2d      	ldr	r3, [pc, #180]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0f0      	beq.n	8003eae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ecc:	4b2a      	ldr	r3, [pc, #168]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	4927      	ldr	r1, [pc, #156]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	600b      	str	r3, [r1, #0]
 8003ee0:	e015      	b.n	8003f0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ee2:	4b26      	ldr	r3, [pc, #152]	; (8003f7c <HAL_RCC_OscConfig+0x270>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee8:	f7fd f8e2 	bl	80010b0 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ef0:	f7fd f8de 	bl	80010b0 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e17a      	b.n	80041f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f02:	4b1d      	ldr	r3, [pc, #116]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f0      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d03a      	beq.n	8003f90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d019      	beq.n	8003f56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f22:	4b17      	ldr	r3, [pc, #92]	; (8003f80 <HAL_RCC_OscConfig+0x274>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f28:	f7fd f8c2 	bl	80010b0 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f30:	f7fd f8be 	bl	80010b0 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e15a      	b.n	80041f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f42:	4b0d      	ldr	r3, [pc, #52]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f0      	beq.n	8003f30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f4e:	2001      	movs	r0, #1
 8003f50:	f000 fb08 	bl	8004564 <RCC_Delay>
 8003f54:	e01c      	b.n	8003f90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f56:	4b0a      	ldr	r3, [pc, #40]	; (8003f80 <HAL_RCC_OscConfig+0x274>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f5c:	f7fd f8a8 	bl	80010b0 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f62:	e00f      	b.n	8003f84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f64:	f7fd f8a4 	bl	80010b0 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d908      	bls.n	8003f84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e140      	b.n	80041f8 <HAL_RCC_OscConfig+0x4ec>
 8003f76:	bf00      	nop
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	42420000 	.word	0x42420000
 8003f80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f84:	4b9e      	ldr	r3, [pc, #632]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e9      	bne.n	8003f64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 80a6 	beq.w	80040ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa2:	4b97      	ldr	r3, [pc, #604]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10d      	bne.n	8003fca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fae:	4b94      	ldr	r3, [pc, #592]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	4a93      	ldr	r2, [pc, #588]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 8003fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb8:	61d3      	str	r3, [r2, #28]
 8003fba:	4b91      	ldr	r3, [pc, #580]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc2:	60bb      	str	r3, [r7, #8]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fca:	4b8e      	ldr	r3, [pc, #568]	; (8004204 <HAL_RCC_OscConfig+0x4f8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d118      	bne.n	8004008 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fd6:	4b8b      	ldr	r3, [pc, #556]	; (8004204 <HAL_RCC_OscConfig+0x4f8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a8a      	ldr	r2, [pc, #552]	; (8004204 <HAL_RCC_OscConfig+0x4f8>)
 8003fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fe2:	f7fd f865 	bl	80010b0 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fea:	f7fd f861 	bl	80010b0 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b64      	cmp	r3, #100	; 0x64
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e0fd      	b.n	80041f8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffc:	4b81      	ldr	r3, [pc, #516]	; (8004204 <HAL_RCC_OscConfig+0x4f8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0f0      	beq.n	8003fea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d106      	bne.n	800401e <HAL_RCC_OscConfig+0x312>
 8004010:	4b7b      	ldr	r3, [pc, #492]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	4a7a      	ldr	r2, [pc, #488]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 8004016:	f043 0301 	orr.w	r3, r3, #1
 800401a:	6213      	str	r3, [r2, #32]
 800401c:	e02d      	b.n	800407a <HAL_RCC_OscConfig+0x36e>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10c      	bne.n	8004040 <HAL_RCC_OscConfig+0x334>
 8004026:	4b76      	ldr	r3, [pc, #472]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	4a75      	ldr	r2, [pc, #468]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 800402c:	f023 0301 	bic.w	r3, r3, #1
 8004030:	6213      	str	r3, [r2, #32]
 8004032:	4b73      	ldr	r3, [pc, #460]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	4a72      	ldr	r2, [pc, #456]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 8004038:	f023 0304 	bic.w	r3, r3, #4
 800403c:	6213      	str	r3, [r2, #32]
 800403e:	e01c      	b.n	800407a <HAL_RCC_OscConfig+0x36e>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	2b05      	cmp	r3, #5
 8004046:	d10c      	bne.n	8004062 <HAL_RCC_OscConfig+0x356>
 8004048:	4b6d      	ldr	r3, [pc, #436]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	4a6c      	ldr	r2, [pc, #432]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 800404e:	f043 0304 	orr.w	r3, r3, #4
 8004052:	6213      	str	r3, [r2, #32]
 8004054:	4b6a      	ldr	r3, [pc, #424]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	4a69      	ldr	r2, [pc, #420]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 800405a:	f043 0301 	orr.w	r3, r3, #1
 800405e:	6213      	str	r3, [r2, #32]
 8004060:	e00b      	b.n	800407a <HAL_RCC_OscConfig+0x36e>
 8004062:	4b67      	ldr	r3, [pc, #412]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	4a66      	ldr	r2, [pc, #408]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 8004068:	f023 0301 	bic.w	r3, r3, #1
 800406c:	6213      	str	r3, [r2, #32]
 800406e:	4b64      	ldr	r3, [pc, #400]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	4a63      	ldr	r2, [pc, #396]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 8004074:	f023 0304 	bic.w	r3, r3, #4
 8004078:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d015      	beq.n	80040ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004082:	f7fd f815 	bl	80010b0 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004088:	e00a      	b.n	80040a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408a:	f7fd f811 	bl	80010b0 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	f241 3288 	movw	r2, #5000	; 0x1388
 8004098:	4293      	cmp	r3, r2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e0ab      	b.n	80041f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a0:	4b57      	ldr	r3, [pc, #348]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0ee      	beq.n	800408a <HAL_RCC_OscConfig+0x37e>
 80040ac:	e014      	b.n	80040d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ae:	f7fc ffff 	bl	80010b0 <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b4:	e00a      	b.n	80040cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b6:	f7fc fffb 	bl	80010b0 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e095      	b.n	80041f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040cc:	4b4c      	ldr	r3, [pc, #304]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1ee      	bne.n	80040b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040d8:	7dfb      	ldrb	r3, [r7, #23]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d105      	bne.n	80040ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040de:	4b48      	ldr	r3, [pc, #288]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	4a47      	ldr	r2, [pc, #284]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 80040e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 8081 	beq.w	80041f6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040f4:	4b42      	ldr	r3, [pc, #264]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f003 030c 	and.w	r3, r3, #12
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d061      	beq.n	80041c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	2b02      	cmp	r3, #2
 8004106:	d146      	bne.n	8004196 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004108:	4b3f      	ldr	r3, [pc, #252]	; (8004208 <HAL_RCC_OscConfig+0x4fc>)
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410e:	f7fc ffcf 	bl	80010b0 <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004114:	e008      	b.n	8004128 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004116:	f7fc ffcb 	bl	80010b0 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e067      	b.n	80041f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004128:	4b35      	ldr	r3, [pc, #212]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1f0      	bne.n	8004116 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413c:	d108      	bne.n	8004150 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800413e:	4b30      	ldr	r3, [pc, #192]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	492d      	ldr	r1, [pc, #180]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 800414c:	4313      	orrs	r3, r2
 800414e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004150:	4b2b      	ldr	r3, [pc, #172]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a19      	ldr	r1, [r3, #32]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	430b      	orrs	r3, r1
 8004162:	4927      	ldr	r1, [pc, #156]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 8004164:	4313      	orrs	r3, r2
 8004166:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004168:	4b27      	ldr	r3, [pc, #156]	; (8004208 <HAL_RCC_OscConfig+0x4fc>)
 800416a:	2201      	movs	r2, #1
 800416c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416e:	f7fc ff9f 	bl	80010b0 <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004176:	f7fc ff9b 	bl	80010b0 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e037      	b.n	80041f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004188:	4b1d      	ldr	r3, [pc, #116]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0f0      	beq.n	8004176 <HAL_RCC_OscConfig+0x46a>
 8004194:	e02f      	b.n	80041f6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004196:	4b1c      	ldr	r3, [pc, #112]	; (8004208 <HAL_RCC_OscConfig+0x4fc>)
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419c:	f7fc ff88 	bl	80010b0 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a4:	f7fc ff84 	bl	80010b0 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e020      	b.n	80041f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041b6:	4b12      	ldr	r3, [pc, #72]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1f0      	bne.n	80041a4 <HAL_RCC_OscConfig+0x498>
 80041c2:	e018      	b.n	80041f6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e013      	b.n	80041f8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041d0:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <HAL_RCC_OscConfig+0x4f4>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d106      	bne.n	80041f2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d001      	beq.n	80041f6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40021000 	.word	0x40021000
 8004204:	40007000 	.word	0x40007000
 8004208:	42420060 	.word	0x42420060

0800420c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e0d0      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004220:	4b6a      	ldr	r3, [pc, #424]	; (80043cc <HAL_RCC_ClockConfig+0x1c0>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d910      	bls.n	8004250 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422e:	4b67      	ldr	r3, [pc, #412]	; (80043cc <HAL_RCC_ClockConfig+0x1c0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f023 0207 	bic.w	r2, r3, #7
 8004236:	4965      	ldr	r1, [pc, #404]	; (80043cc <HAL_RCC_ClockConfig+0x1c0>)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	4313      	orrs	r3, r2
 800423c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800423e:	4b63      	ldr	r3, [pc, #396]	; (80043cc <HAL_RCC_ClockConfig+0x1c0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0307 	and.w	r3, r3, #7
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d001      	beq.n	8004250 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e0b8      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d020      	beq.n	800429e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004268:	4b59      	ldr	r3, [pc, #356]	; (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	4a58      	ldr	r2, [pc, #352]	; (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 800426e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004272:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d005      	beq.n	800428c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004280:	4b53      	ldr	r3, [pc, #332]	; (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	4a52      	ldr	r2, [pc, #328]	; (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004286:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800428a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800428c:	4b50      	ldr	r3, [pc, #320]	; (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	494d      	ldr	r1, [pc, #308]	; (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 800429a:	4313      	orrs	r3, r2
 800429c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d040      	beq.n	800432c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d107      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b2:	4b47      	ldr	r3, [pc, #284]	; (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d115      	bne.n	80042ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e07f      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d107      	bne.n	80042da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ca:	4b41      	ldr	r3, [pc, #260]	; (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d109      	bne.n	80042ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e073      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042da:	4b3d      	ldr	r3, [pc, #244]	; (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e06b      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ea:	4b39      	ldr	r3, [pc, #228]	; (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f023 0203 	bic.w	r2, r3, #3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	4936      	ldr	r1, [pc, #216]	; (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042fc:	f7fc fed8 	bl	80010b0 <HAL_GetTick>
 8004300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004302:	e00a      	b.n	800431a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004304:	f7fc fed4 	bl	80010b0 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004312:	4293      	cmp	r3, r2
 8004314:	d901      	bls.n	800431a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e053      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800431a:	4b2d      	ldr	r3, [pc, #180]	; (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f003 020c 	and.w	r2, r3, #12
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	429a      	cmp	r2, r3
 800432a:	d1eb      	bne.n	8004304 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800432c:	4b27      	ldr	r3, [pc, #156]	; (80043cc <HAL_RCC_ClockConfig+0x1c0>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d210      	bcs.n	800435c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800433a:	4b24      	ldr	r3, [pc, #144]	; (80043cc <HAL_RCC_ClockConfig+0x1c0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f023 0207 	bic.w	r2, r3, #7
 8004342:	4922      	ldr	r1, [pc, #136]	; (80043cc <HAL_RCC_ClockConfig+0x1c0>)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	4313      	orrs	r3, r2
 8004348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800434a:	4b20      	ldr	r3, [pc, #128]	; (80043cc <HAL_RCC_ClockConfig+0x1c0>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d001      	beq.n	800435c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e032      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004368:	4b19      	ldr	r3, [pc, #100]	; (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4916      	ldr	r1, [pc, #88]	; (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004376:	4313      	orrs	r3, r2
 8004378:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004386:	4b12      	ldr	r3, [pc, #72]	; (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	490e      	ldr	r1, [pc, #56]	; (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004396:	4313      	orrs	r3, r2
 8004398:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800439a:	f000 f821 	bl	80043e0 <HAL_RCC_GetSysClockFreq>
 800439e:	4602      	mov	r2, r0
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	490a      	ldr	r1, [pc, #40]	; (80043d4 <HAL_RCC_ClockConfig+0x1c8>)
 80043ac:	5ccb      	ldrb	r3, [r1, r3]
 80043ae:	fa22 f303 	lsr.w	r3, r2, r3
 80043b2:	4a09      	ldr	r2, [pc, #36]	; (80043d8 <HAL_RCC_ClockConfig+0x1cc>)
 80043b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043b6:	4b09      	ldr	r3, [pc, #36]	; (80043dc <HAL_RCC_ClockConfig+0x1d0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fc fc8e 	bl	8000cdc <HAL_InitTick>

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40022000 	.word	0x40022000
 80043d0:	40021000 	.word	0x40021000
 80043d4:	08005c40 	.word	0x08005c40
 80043d8:	20000000 	.word	0x20000000
 80043dc:	20000004 	.word	0x20000004

080043e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043e0:	b490      	push	{r4, r7}
 80043e2:	b08a      	sub	sp, #40	; 0x28
 80043e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80043e6:	4b2a      	ldr	r3, [pc, #168]	; (8004490 <HAL_RCC_GetSysClockFreq+0xb0>)
 80043e8:	1d3c      	adds	r4, r7, #4
 80043ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80043f0:	f240 2301 	movw	r3, #513	; 0x201
 80043f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61fb      	str	r3, [r7, #28]
 80043fa:	2300      	movs	r3, #0
 80043fc:	61bb      	str	r3, [r7, #24]
 80043fe:	2300      	movs	r3, #0
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
 8004402:	2300      	movs	r3, #0
 8004404:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800440a:	4b22      	ldr	r3, [pc, #136]	; (8004494 <HAL_RCC_GetSysClockFreq+0xb4>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f003 030c 	and.w	r3, r3, #12
 8004416:	2b04      	cmp	r3, #4
 8004418:	d002      	beq.n	8004420 <HAL_RCC_GetSysClockFreq+0x40>
 800441a:	2b08      	cmp	r3, #8
 800441c:	d003      	beq.n	8004426 <HAL_RCC_GetSysClockFreq+0x46>
 800441e:	e02d      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004420:	4b1d      	ldr	r3, [pc, #116]	; (8004498 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004422:	623b      	str	r3, [r7, #32]
      break;
 8004424:	e02d      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	0c9b      	lsrs	r3, r3, #18
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004432:	4413      	add	r3, r2
 8004434:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004438:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d013      	beq.n	800446c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004444:	4b13      	ldr	r3, [pc, #76]	; (8004494 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	0c5b      	lsrs	r3, r3, #17
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004452:	4413      	add	r3, r2
 8004454:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004458:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	4a0e      	ldr	r2, [pc, #56]	; (8004498 <HAL_RCC_GetSysClockFreq+0xb8>)
 800445e:	fb02 f203 	mul.w	r2, r2, r3
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	fbb2 f3f3 	udiv	r3, r2, r3
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
 800446a:	e004      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	4a0b      	ldr	r2, [pc, #44]	; (800449c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004470:	fb02 f303 	mul.w	r3, r2, r3
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	623b      	str	r3, [r7, #32]
      break;
 800447a:	e002      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800447c:	4b06      	ldr	r3, [pc, #24]	; (8004498 <HAL_RCC_GetSysClockFreq+0xb8>)
 800447e:	623b      	str	r3, [r7, #32]
      break;
 8004480:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004482:	6a3b      	ldr	r3, [r7, #32]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3728      	adds	r7, #40	; 0x28
 8004488:	46bd      	mov	sp, r7
 800448a:	bc90      	pop	{r4, r7}
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	08005b30 	.word	0x08005b30
 8004494:	40021000 	.word	0x40021000
 8004498:	007a1200 	.word	0x007a1200
 800449c:	003d0900 	.word	0x003d0900

080044a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a4:	4b02      	ldr	r3, [pc, #8]	; (80044b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80044a6:	681b      	ldr	r3, [r3, #0]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr
 80044b0:	20000000 	.word	0x20000000

080044b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044b8:	f7ff fff2 	bl	80044a0 <HAL_RCC_GetHCLKFreq>
 80044bc:	4602      	mov	r2, r0
 80044be:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	0a1b      	lsrs	r3, r3, #8
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	4903      	ldr	r1, [pc, #12]	; (80044d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ca:	5ccb      	ldrb	r3, [r1, r3]
 80044cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40021000 	.word	0x40021000
 80044d8:	08005c50 	.word	0x08005c50

080044dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044e0:	f7ff ffde 	bl	80044a0 <HAL_RCC_GetHCLKFreq>
 80044e4:	4602      	mov	r2, r0
 80044e6:	4b05      	ldr	r3, [pc, #20]	; (80044fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	0adb      	lsrs	r3, r3, #11
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	4903      	ldr	r1, [pc, #12]	; (8004500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044f2:	5ccb      	ldrb	r3, [r1, r3]
 80044f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40021000 	.word	0x40021000
 8004500:	08005c50 	.word	0x08005c50

08004504 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	220f      	movs	r2, #15
 8004512:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004514:	4b11      	ldr	r3, [pc, #68]	; (800455c <HAL_RCC_GetClockConfig+0x58>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f003 0203 	and.w	r2, r3, #3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004520:	4b0e      	ldr	r3, [pc, #56]	; (800455c <HAL_RCC_GetClockConfig+0x58>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <HAL_RCC_GetClockConfig+0x58>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004538:	4b08      	ldr	r3, [pc, #32]	; (800455c <HAL_RCC_GetClockConfig+0x58>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	08db      	lsrs	r3, r3, #3
 800453e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004546:	4b06      	ldr	r3, [pc, #24]	; (8004560 <HAL_RCC_GetClockConfig+0x5c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0207 	and.w	r2, r3, #7
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr
 800455c:	40021000 	.word	0x40021000
 8004560:	40022000 	.word	0x40022000

08004564 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800456c:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <RCC_Delay+0x34>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a0a      	ldr	r2, [pc, #40]	; (800459c <RCC_Delay+0x38>)
 8004572:	fba2 2303 	umull	r2, r3, r2, r3
 8004576:	0a5b      	lsrs	r3, r3, #9
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	fb02 f303 	mul.w	r3, r2, r3
 800457e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004580:	bf00      	nop
  }
  while (Delay --);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	1e5a      	subs	r2, r3, #1
 8004586:	60fa      	str	r2, [r7, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1f9      	bne.n	8004580 <RCC_Delay+0x1c>
}
 800458c:	bf00      	nop
 800458e:	bf00      	nop
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	bc80      	pop	{r7}
 8004596:	4770      	bx	lr
 8004598:	20000000 	.word	0x20000000
 800459c:	10624dd3 	.word	0x10624dd3

080045a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e041      	b.n	8004636 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d106      	bne.n	80045cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f839 	bl	800463e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3304      	adds	r3, #4
 80045dc:	4619      	mov	r1, r3
 80045de:	4610      	mov	r0, r2
 80045e0:	f000 f9b4 	bl	800494c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr

08004650 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b01      	cmp	r3, #1
 8004662:	d001      	beq.n	8004668 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e03a      	b.n	80046de <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a18      	ldr	r2, [pc, #96]	; (80046e8 <HAL_TIM_Base_Start_IT+0x98>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d00e      	beq.n	80046a8 <HAL_TIM_Base_Start_IT+0x58>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004692:	d009      	beq.n	80046a8 <HAL_TIM_Base_Start_IT+0x58>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a14      	ldr	r2, [pc, #80]	; (80046ec <HAL_TIM_Base_Start_IT+0x9c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d004      	beq.n	80046a8 <HAL_TIM_Base_Start_IT+0x58>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a13      	ldr	r2, [pc, #76]	; (80046f0 <HAL_TIM_Base_Start_IT+0xa0>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d111      	bne.n	80046cc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2b06      	cmp	r3, #6
 80046b8:	d010      	beq.n	80046dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f042 0201 	orr.w	r2, r2, #1
 80046c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ca:	e007      	b.n	80046dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0201 	orr.w	r2, r2, #1
 80046da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr
 80046e8:	40012c00 	.word	0x40012c00
 80046ec:	40000400 	.word	0x40000400
 80046f0:	40000800 	.word	0x40000800

080046f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b02      	cmp	r3, #2
 8004708:	d122      	bne.n	8004750 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b02      	cmp	r3, #2
 8004716:	d11b      	bne.n	8004750 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f06f 0202 	mvn.w	r2, #2
 8004720:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f8ed 	bl	8004916 <HAL_TIM_IC_CaptureCallback>
 800473c:	e005      	b.n	800474a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f8e0 	bl	8004904 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f8ef 	bl	8004928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f003 0304 	and.w	r3, r3, #4
 800475a:	2b04      	cmp	r3, #4
 800475c:	d122      	bne.n	80047a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b04      	cmp	r3, #4
 800476a:	d11b      	bne.n	80047a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f06f 0204 	mvn.w	r2, #4
 8004774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2202      	movs	r2, #2
 800477a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f8c3 	bl	8004916 <HAL_TIM_IC_CaptureCallback>
 8004790:	e005      	b.n	800479e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f8b6 	bl	8004904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f8c5 	bl	8004928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	d122      	bne.n	80047f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d11b      	bne.n	80047f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f06f 0208 	mvn.w	r2, #8
 80047c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2204      	movs	r2, #4
 80047ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f899 	bl	8004916 <HAL_TIM_IC_CaptureCallback>
 80047e4:	e005      	b.n	80047f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f88c 	bl	8004904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f89b 	bl	8004928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	f003 0310 	and.w	r3, r3, #16
 8004802:	2b10      	cmp	r3, #16
 8004804:	d122      	bne.n	800484c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f003 0310 	and.w	r3, r3, #16
 8004810:	2b10      	cmp	r3, #16
 8004812:	d11b      	bne.n	800484c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f06f 0210 	mvn.w	r2, #16
 800481c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2208      	movs	r2, #8
 8004822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f86f 	bl	8004916 <HAL_TIM_IC_CaptureCallback>
 8004838:	e005      	b.n	8004846 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f862 	bl	8004904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f871 	bl	8004928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b01      	cmp	r3, #1
 8004858:	d10e      	bne.n	8004878 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b01      	cmp	r3, #1
 8004866:	d107      	bne.n	8004878 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f06f 0201 	mvn.w	r2, #1
 8004870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7fc f93a 	bl	8000aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004882:	2b80      	cmp	r3, #128	; 0x80
 8004884:	d10e      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004890:	2b80      	cmp	r3, #128	; 0x80
 8004892:	d107      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800489c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f8bf 	bl	8004a22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ae:	2b40      	cmp	r3, #64	; 0x40
 80048b0:	d10e      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048bc:	2b40      	cmp	r3, #64	; 0x40
 80048be:	d107      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f835 	bl	800493a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b20      	cmp	r3, #32
 80048dc:	d10e      	bne.n	80048fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f003 0320 	and.w	r3, r3, #32
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d107      	bne.n	80048fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f06f 0220 	mvn.w	r2, #32
 80048f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f88a 	bl	8004a10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048fc:	bf00      	nop
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr

08004916 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr

08004928 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	bc80      	pop	{r7}
 8004938:	4770      	bx	lr

0800493a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr

0800494c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a29      	ldr	r2, [pc, #164]	; (8004a04 <TIM_Base_SetConfig+0xb8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d00b      	beq.n	800497c <TIM_Base_SetConfig+0x30>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496a:	d007      	beq.n	800497c <TIM_Base_SetConfig+0x30>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a26      	ldr	r2, [pc, #152]	; (8004a08 <TIM_Base_SetConfig+0xbc>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d003      	beq.n	800497c <TIM_Base_SetConfig+0x30>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a25      	ldr	r2, [pc, #148]	; (8004a0c <TIM_Base_SetConfig+0xc0>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d108      	bne.n	800498e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a1c      	ldr	r2, [pc, #112]	; (8004a04 <TIM_Base_SetConfig+0xb8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d00b      	beq.n	80049ae <TIM_Base_SetConfig+0x62>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800499c:	d007      	beq.n	80049ae <TIM_Base_SetConfig+0x62>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a19      	ldr	r2, [pc, #100]	; (8004a08 <TIM_Base_SetConfig+0xbc>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d003      	beq.n	80049ae <TIM_Base_SetConfig+0x62>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a18      	ldr	r2, [pc, #96]	; (8004a0c <TIM_Base_SetConfig+0xc0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d108      	bne.n	80049c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	4313      	orrs	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a07      	ldr	r2, [pc, #28]	; (8004a04 <TIM_Base_SetConfig+0xb8>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d103      	bne.n	80049f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	615a      	str	r2, [r3, #20]
}
 80049fa:	bf00      	nop
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bc80      	pop	{r7}
 8004a02:	4770      	bx	lr
 8004a04:	40012c00 	.word	0x40012c00
 8004a08:	40000400 	.word	0x40000400
 8004a0c:	40000800 	.word	0x40000800

08004a10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bc80      	pop	{r7}
 8004a20:	4770      	bx	lr

08004a22 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bc80      	pop	{r7}
 8004a32:	4770      	bx	lr

08004a34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e03f      	b.n	8004ac6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fc fa8e 	bl	8000f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2224      	movs	r2, #36	; 0x24
 8004a64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f829 	bl	8004ad0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695a      	ldr	r2, [r3, #20]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68da      	ldr	r2, [r3, #12]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004aac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68da      	ldr	r2, [r3, #12]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004b0a:	f023 030c 	bic.w	r3, r3, #12
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6812      	ldr	r2, [r2, #0]
 8004b12:	68b9      	ldr	r1, [r7, #8]
 8004b14:	430b      	orrs	r3, r1
 8004b16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699a      	ldr	r2, [r3, #24]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a2c      	ldr	r2, [pc, #176]	; (8004be4 <UART_SetConfig+0x114>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d103      	bne.n	8004b40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b38:	f7ff fcd0 	bl	80044dc <HAL_RCC_GetPCLK2Freq>
 8004b3c:	60f8      	str	r0, [r7, #12]
 8004b3e:	e002      	b.n	8004b46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b40:	f7ff fcb8 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 8004b44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009a      	lsls	r2, r3, #2
 8004b50:	441a      	add	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5c:	4a22      	ldr	r2, [pc, #136]	; (8004be8 <UART_SetConfig+0x118>)
 8004b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b62:	095b      	lsrs	r3, r3, #5
 8004b64:	0119      	lsls	r1, r3, #4
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	009a      	lsls	r2, r3, #2
 8004b70:	441a      	add	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b7c:	4b1a      	ldr	r3, [pc, #104]	; (8004be8 <UART_SetConfig+0x118>)
 8004b7e:	fba3 0302 	umull	r0, r3, r3, r2
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	2064      	movs	r0, #100	; 0x64
 8004b86:	fb00 f303 	mul.w	r3, r0, r3
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	3332      	adds	r3, #50	; 0x32
 8004b90:	4a15      	ldr	r2, [pc, #84]	; (8004be8 <UART_SetConfig+0x118>)
 8004b92:	fba2 2303 	umull	r2, r3, r2, r3
 8004b96:	095b      	lsrs	r3, r3, #5
 8004b98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b9c:	4419      	add	r1, r3
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	009a      	lsls	r2, r3, #2
 8004ba8:	441a      	add	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bb4:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <UART_SetConfig+0x118>)
 8004bb6:	fba3 0302 	umull	r0, r3, r3, r2
 8004bba:	095b      	lsrs	r3, r3, #5
 8004bbc:	2064      	movs	r0, #100	; 0x64
 8004bbe:	fb00 f303 	mul.w	r3, r0, r3
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	3332      	adds	r3, #50	; 0x32
 8004bc8:	4a07      	ldr	r2, [pc, #28]	; (8004be8 <UART_SetConfig+0x118>)
 8004bca:	fba2 2303 	umull	r2, r3, r2, r3
 8004bce:	095b      	lsrs	r3, r3, #5
 8004bd0:	f003 020f 	and.w	r2, r3, #15
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	440a      	add	r2, r1
 8004bda:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004bdc:	bf00      	nop
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40013800 	.word	0x40013800
 8004be8:	51eb851f 	.word	0x51eb851f

08004bec <__errno>:
 8004bec:	4b01      	ldr	r3, [pc, #4]	; (8004bf4 <__errno+0x8>)
 8004bee:	6818      	ldr	r0, [r3, #0]
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	2000000c 	.word	0x2000000c

08004bf8 <__libc_init_array>:
 8004bf8:	b570      	push	{r4, r5, r6, lr}
 8004bfa:	2600      	movs	r6, #0
 8004bfc:	4d0c      	ldr	r5, [pc, #48]	; (8004c30 <__libc_init_array+0x38>)
 8004bfe:	4c0d      	ldr	r4, [pc, #52]	; (8004c34 <__libc_init_array+0x3c>)
 8004c00:	1b64      	subs	r4, r4, r5
 8004c02:	10a4      	asrs	r4, r4, #2
 8004c04:	42a6      	cmp	r6, r4
 8004c06:	d109      	bne.n	8004c1c <__libc_init_array+0x24>
 8004c08:	f000 ff82 	bl	8005b10 <_init>
 8004c0c:	2600      	movs	r6, #0
 8004c0e:	4d0a      	ldr	r5, [pc, #40]	; (8004c38 <__libc_init_array+0x40>)
 8004c10:	4c0a      	ldr	r4, [pc, #40]	; (8004c3c <__libc_init_array+0x44>)
 8004c12:	1b64      	subs	r4, r4, r5
 8004c14:	10a4      	asrs	r4, r4, #2
 8004c16:	42a6      	cmp	r6, r4
 8004c18:	d105      	bne.n	8004c26 <__libc_init_array+0x2e>
 8004c1a:	bd70      	pop	{r4, r5, r6, pc}
 8004c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c20:	4798      	blx	r3
 8004c22:	3601      	adds	r6, #1
 8004c24:	e7ee      	b.n	8004c04 <__libc_init_array+0xc>
 8004c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c2a:	4798      	blx	r3
 8004c2c:	3601      	adds	r6, #1
 8004c2e:	e7f2      	b.n	8004c16 <__libc_init_array+0x1e>
 8004c30:	08005cf0 	.word	0x08005cf0
 8004c34:	08005cf0 	.word	0x08005cf0
 8004c38:	08005cf0 	.word	0x08005cf0
 8004c3c:	08005cf4 	.word	0x08005cf4

08004c40 <memset>:
 8004c40:	4603      	mov	r3, r0
 8004c42:	4402      	add	r2, r0
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d100      	bne.n	8004c4a <memset+0xa>
 8004c48:	4770      	bx	lr
 8004c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c4e:	e7f9      	b.n	8004c44 <memset+0x4>

08004c50 <iprintf>:
 8004c50:	b40f      	push	{r0, r1, r2, r3}
 8004c52:	4b0a      	ldr	r3, [pc, #40]	; (8004c7c <iprintf+0x2c>)
 8004c54:	b513      	push	{r0, r1, r4, lr}
 8004c56:	681c      	ldr	r4, [r3, #0]
 8004c58:	b124      	cbz	r4, 8004c64 <iprintf+0x14>
 8004c5a:	69a3      	ldr	r3, [r4, #24]
 8004c5c:	b913      	cbnz	r3, 8004c64 <iprintf+0x14>
 8004c5e:	4620      	mov	r0, r4
 8004c60:	f000 f866 	bl	8004d30 <__sinit>
 8004c64:	ab05      	add	r3, sp, #20
 8004c66:	4620      	mov	r0, r4
 8004c68:	9a04      	ldr	r2, [sp, #16]
 8004c6a:	68a1      	ldr	r1, [r4, #8]
 8004c6c:	9301      	str	r3, [sp, #4]
 8004c6e:	f000 f981 	bl	8004f74 <_vfiprintf_r>
 8004c72:	b002      	add	sp, #8
 8004c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c78:	b004      	add	sp, #16
 8004c7a:	4770      	bx	lr
 8004c7c:	2000000c 	.word	0x2000000c

08004c80 <std>:
 8004c80:	2300      	movs	r3, #0
 8004c82:	b510      	push	{r4, lr}
 8004c84:	4604      	mov	r4, r0
 8004c86:	e9c0 3300 	strd	r3, r3, [r0]
 8004c8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c8e:	6083      	str	r3, [r0, #8]
 8004c90:	8181      	strh	r1, [r0, #12]
 8004c92:	6643      	str	r3, [r0, #100]	; 0x64
 8004c94:	81c2      	strh	r2, [r0, #14]
 8004c96:	6183      	str	r3, [r0, #24]
 8004c98:	4619      	mov	r1, r3
 8004c9a:	2208      	movs	r2, #8
 8004c9c:	305c      	adds	r0, #92	; 0x5c
 8004c9e:	f7ff ffcf 	bl	8004c40 <memset>
 8004ca2:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <std+0x38>)
 8004ca4:	6224      	str	r4, [r4, #32]
 8004ca6:	6263      	str	r3, [r4, #36]	; 0x24
 8004ca8:	4b04      	ldr	r3, [pc, #16]	; (8004cbc <std+0x3c>)
 8004caa:	62a3      	str	r3, [r4, #40]	; 0x28
 8004cac:	4b04      	ldr	r3, [pc, #16]	; (8004cc0 <std+0x40>)
 8004cae:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004cb0:	4b04      	ldr	r3, [pc, #16]	; (8004cc4 <std+0x44>)
 8004cb2:	6323      	str	r3, [r4, #48]	; 0x30
 8004cb4:	bd10      	pop	{r4, pc}
 8004cb6:	bf00      	nop
 8004cb8:	08005521 	.word	0x08005521
 8004cbc:	08005543 	.word	0x08005543
 8004cc0:	0800557b 	.word	0x0800557b
 8004cc4:	0800559f 	.word	0x0800559f

08004cc8 <_cleanup_r>:
 8004cc8:	4901      	ldr	r1, [pc, #4]	; (8004cd0 <_cleanup_r+0x8>)
 8004cca:	f000 b8af 	b.w	8004e2c <_fwalk_reent>
 8004cce:	bf00      	nop
 8004cd0:	08005879 	.word	0x08005879

08004cd4 <__sfmoreglue>:
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	2568      	movs	r5, #104	; 0x68
 8004cd8:	1e4a      	subs	r2, r1, #1
 8004cda:	4355      	muls	r5, r2
 8004cdc:	460e      	mov	r6, r1
 8004cde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ce2:	f000 f8c5 	bl	8004e70 <_malloc_r>
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	b140      	cbz	r0, 8004cfc <__sfmoreglue+0x28>
 8004cea:	2100      	movs	r1, #0
 8004cec:	e9c0 1600 	strd	r1, r6, [r0]
 8004cf0:	300c      	adds	r0, #12
 8004cf2:	60a0      	str	r0, [r4, #8]
 8004cf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004cf8:	f7ff ffa2 	bl	8004c40 <memset>
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	bd70      	pop	{r4, r5, r6, pc}

08004d00 <__sfp_lock_acquire>:
 8004d00:	4801      	ldr	r0, [pc, #4]	; (8004d08 <__sfp_lock_acquire+0x8>)
 8004d02:	f000 b8b3 	b.w	8004e6c <__retarget_lock_acquire_recursive>
 8004d06:	bf00      	nop
 8004d08:	20000184 	.word	0x20000184

08004d0c <__sfp_lock_release>:
 8004d0c:	4801      	ldr	r0, [pc, #4]	; (8004d14 <__sfp_lock_release+0x8>)
 8004d0e:	f000 b8ae 	b.w	8004e6e <__retarget_lock_release_recursive>
 8004d12:	bf00      	nop
 8004d14:	20000184 	.word	0x20000184

08004d18 <__sinit_lock_acquire>:
 8004d18:	4801      	ldr	r0, [pc, #4]	; (8004d20 <__sinit_lock_acquire+0x8>)
 8004d1a:	f000 b8a7 	b.w	8004e6c <__retarget_lock_acquire_recursive>
 8004d1e:	bf00      	nop
 8004d20:	2000017f 	.word	0x2000017f

08004d24 <__sinit_lock_release>:
 8004d24:	4801      	ldr	r0, [pc, #4]	; (8004d2c <__sinit_lock_release+0x8>)
 8004d26:	f000 b8a2 	b.w	8004e6e <__retarget_lock_release_recursive>
 8004d2a:	bf00      	nop
 8004d2c:	2000017f 	.word	0x2000017f

08004d30 <__sinit>:
 8004d30:	b510      	push	{r4, lr}
 8004d32:	4604      	mov	r4, r0
 8004d34:	f7ff fff0 	bl	8004d18 <__sinit_lock_acquire>
 8004d38:	69a3      	ldr	r3, [r4, #24]
 8004d3a:	b11b      	cbz	r3, 8004d44 <__sinit+0x14>
 8004d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d40:	f7ff bff0 	b.w	8004d24 <__sinit_lock_release>
 8004d44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004d48:	6523      	str	r3, [r4, #80]	; 0x50
 8004d4a:	4b13      	ldr	r3, [pc, #76]	; (8004d98 <__sinit+0x68>)
 8004d4c:	4a13      	ldr	r2, [pc, #76]	; (8004d9c <__sinit+0x6c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	62a2      	str	r2, [r4, #40]	; 0x28
 8004d52:	42a3      	cmp	r3, r4
 8004d54:	bf08      	it	eq
 8004d56:	2301      	moveq	r3, #1
 8004d58:	4620      	mov	r0, r4
 8004d5a:	bf08      	it	eq
 8004d5c:	61a3      	streq	r3, [r4, #24]
 8004d5e:	f000 f81f 	bl	8004da0 <__sfp>
 8004d62:	6060      	str	r0, [r4, #4]
 8004d64:	4620      	mov	r0, r4
 8004d66:	f000 f81b 	bl	8004da0 <__sfp>
 8004d6a:	60a0      	str	r0, [r4, #8]
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	f000 f817 	bl	8004da0 <__sfp>
 8004d72:	2200      	movs	r2, #0
 8004d74:	2104      	movs	r1, #4
 8004d76:	60e0      	str	r0, [r4, #12]
 8004d78:	6860      	ldr	r0, [r4, #4]
 8004d7a:	f7ff ff81 	bl	8004c80 <std>
 8004d7e:	2201      	movs	r2, #1
 8004d80:	2109      	movs	r1, #9
 8004d82:	68a0      	ldr	r0, [r4, #8]
 8004d84:	f7ff ff7c 	bl	8004c80 <std>
 8004d88:	2202      	movs	r2, #2
 8004d8a:	2112      	movs	r1, #18
 8004d8c:	68e0      	ldr	r0, [r4, #12]
 8004d8e:	f7ff ff77 	bl	8004c80 <std>
 8004d92:	2301      	movs	r3, #1
 8004d94:	61a3      	str	r3, [r4, #24]
 8004d96:	e7d1      	b.n	8004d3c <__sinit+0xc>
 8004d98:	08005c58 	.word	0x08005c58
 8004d9c:	08004cc9 	.word	0x08004cc9

08004da0 <__sfp>:
 8004da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da2:	4607      	mov	r7, r0
 8004da4:	f7ff ffac 	bl	8004d00 <__sfp_lock_acquire>
 8004da8:	4b1e      	ldr	r3, [pc, #120]	; (8004e24 <__sfp+0x84>)
 8004daa:	681e      	ldr	r6, [r3, #0]
 8004dac:	69b3      	ldr	r3, [r6, #24]
 8004dae:	b913      	cbnz	r3, 8004db6 <__sfp+0x16>
 8004db0:	4630      	mov	r0, r6
 8004db2:	f7ff ffbd 	bl	8004d30 <__sinit>
 8004db6:	3648      	adds	r6, #72	; 0x48
 8004db8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	d503      	bpl.n	8004dc8 <__sfp+0x28>
 8004dc0:	6833      	ldr	r3, [r6, #0]
 8004dc2:	b30b      	cbz	r3, 8004e08 <__sfp+0x68>
 8004dc4:	6836      	ldr	r6, [r6, #0]
 8004dc6:	e7f7      	b.n	8004db8 <__sfp+0x18>
 8004dc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004dcc:	b9d5      	cbnz	r5, 8004e04 <__sfp+0x64>
 8004dce:	4b16      	ldr	r3, [pc, #88]	; (8004e28 <__sfp+0x88>)
 8004dd0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004dd4:	60e3      	str	r3, [r4, #12]
 8004dd6:	6665      	str	r5, [r4, #100]	; 0x64
 8004dd8:	f000 f847 	bl	8004e6a <__retarget_lock_init_recursive>
 8004ddc:	f7ff ff96 	bl	8004d0c <__sfp_lock_release>
 8004de0:	2208      	movs	r2, #8
 8004de2:	4629      	mov	r1, r5
 8004de4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004de8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004dec:	6025      	str	r5, [r4, #0]
 8004dee:	61a5      	str	r5, [r4, #24]
 8004df0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004df4:	f7ff ff24 	bl	8004c40 <memset>
 8004df8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004dfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e00:	4620      	mov	r0, r4
 8004e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e04:	3468      	adds	r4, #104	; 0x68
 8004e06:	e7d9      	b.n	8004dbc <__sfp+0x1c>
 8004e08:	2104      	movs	r1, #4
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	f7ff ff62 	bl	8004cd4 <__sfmoreglue>
 8004e10:	4604      	mov	r4, r0
 8004e12:	6030      	str	r0, [r6, #0]
 8004e14:	2800      	cmp	r0, #0
 8004e16:	d1d5      	bne.n	8004dc4 <__sfp+0x24>
 8004e18:	f7ff ff78 	bl	8004d0c <__sfp_lock_release>
 8004e1c:	230c      	movs	r3, #12
 8004e1e:	603b      	str	r3, [r7, #0]
 8004e20:	e7ee      	b.n	8004e00 <__sfp+0x60>
 8004e22:	bf00      	nop
 8004e24:	08005c58 	.word	0x08005c58
 8004e28:	ffff0001 	.word	0xffff0001

08004e2c <_fwalk_reent>:
 8004e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e30:	4606      	mov	r6, r0
 8004e32:	4688      	mov	r8, r1
 8004e34:	2700      	movs	r7, #0
 8004e36:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e3e:	f1b9 0901 	subs.w	r9, r9, #1
 8004e42:	d505      	bpl.n	8004e50 <_fwalk_reent+0x24>
 8004e44:	6824      	ldr	r4, [r4, #0]
 8004e46:	2c00      	cmp	r4, #0
 8004e48:	d1f7      	bne.n	8004e3a <_fwalk_reent+0xe>
 8004e4a:	4638      	mov	r0, r7
 8004e4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e50:	89ab      	ldrh	r3, [r5, #12]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d907      	bls.n	8004e66 <_fwalk_reent+0x3a>
 8004e56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	d003      	beq.n	8004e66 <_fwalk_reent+0x3a>
 8004e5e:	4629      	mov	r1, r5
 8004e60:	4630      	mov	r0, r6
 8004e62:	47c0      	blx	r8
 8004e64:	4307      	orrs	r7, r0
 8004e66:	3568      	adds	r5, #104	; 0x68
 8004e68:	e7e9      	b.n	8004e3e <_fwalk_reent+0x12>

08004e6a <__retarget_lock_init_recursive>:
 8004e6a:	4770      	bx	lr

08004e6c <__retarget_lock_acquire_recursive>:
 8004e6c:	4770      	bx	lr

08004e6e <__retarget_lock_release_recursive>:
 8004e6e:	4770      	bx	lr

08004e70 <_malloc_r>:
 8004e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e72:	1ccd      	adds	r5, r1, #3
 8004e74:	f025 0503 	bic.w	r5, r5, #3
 8004e78:	3508      	adds	r5, #8
 8004e7a:	2d0c      	cmp	r5, #12
 8004e7c:	bf38      	it	cc
 8004e7e:	250c      	movcc	r5, #12
 8004e80:	2d00      	cmp	r5, #0
 8004e82:	4606      	mov	r6, r0
 8004e84:	db01      	blt.n	8004e8a <_malloc_r+0x1a>
 8004e86:	42a9      	cmp	r1, r5
 8004e88:	d903      	bls.n	8004e92 <_malloc_r+0x22>
 8004e8a:	230c      	movs	r3, #12
 8004e8c:	6033      	str	r3, [r6, #0]
 8004e8e:	2000      	movs	r0, #0
 8004e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e92:	f000 fdb1 	bl	80059f8 <__malloc_lock>
 8004e96:	4921      	ldr	r1, [pc, #132]	; (8004f1c <_malloc_r+0xac>)
 8004e98:	680a      	ldr	r2, [r1, #0]
 8004e9a:	4614      	mov	r4, r2
 8004e9c:	b99c      	cbnz	r4, 8004ec6 <_malloc_r+0x56>
 8004e9e:	4f20      	ldr	r7, [pc, #128]	; (8004f20 <_malloc_r+0xb0>)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	b923      	cbnz	r3, 8004eae <_malloc_r+0x3e>
 8004ea4:	4621      	mov	r1, r4
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	f000 fb2a 	bl	8005500 <_sbrk_r>
 8004eac:	6038      	str	r0, [r7, #0]
 8004eae:	4629      	mov	r1, r5
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	f000 fb25 	bl	8005500 <_sbrk_r>
 8004eb6:	1c43      	adds	r3, r0, #1
 8004eb8:	d123      	bne.n	8004f02 <_malloc_r+0x92>
 8004eba:	230c      	movs	r3, #12
 8004ebc:	4630      	mov	r0, r6
 8004ebe:	6033      	str	r3, [r6, #0]
 8004ec0:	f000 fda0 	bl	8005a04 <__malloc_unlock>
 8004ec4:	e7e3      	b.n	8004e8e <_malloc_r+0x1e>
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	1b5b      	subs	r3, r3, r5
 8004eca:	d417      	bmi.n	8004efc <_malloc_r+0x8c>
 8004ecc:	2b0b      	cmp	r3, #11
 8004ece:	d903      	bls.n	8004ed8 <_malloc_r+0x68>
 8004ed0:	6023      	str	r3, [r4, #0]
 8004ed2:	441c      	add	r4, r3
 8004ed4:	6025      	str	r5, [r4, #0]
 8004ed6:	e004      	b.n	8004ee2 <_malloc_r+0x72>
 8004ed8:	6863      	ldr	r3, [r4, #4]
 8004eda:	42a2      	cmp	r2, r4
 8004edc:	bf0c      	ite	eq
 8004ede:	600b      	streq	r3, [r1, #0]
 8004ee0:	6053      	strne	r3, [r2, #4]
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	f000 fd8e 	bl	8005a04 <__malloc_unlock>
 8004ee8:	f104 000b 	add.w	r0, r4, #11
 8004eec:	1d23      	adds	r3, r4, #4
 8004eee:	f020 0007 	bic.w	r0, r0, #7
 8004ef2:	1ac2      	subs	r2, r0, r3
 8004ef4:	d0cc      	beq.n	8004e90 <_malloc_r+0x20>
 8004ef6:	1a1b      	subs	r3, r3, r0
 8004ef8:	50a3      	str	r3, [r4, r2]
 8004efa:	e7c9      	b.n	8004e90 <_malloc_r+0x20>
 8004efc:	4622      	mov	r2, r4
 8004efe:	6864      	ldr	r4, [r4, #4]
 8004f00:	e7cc      	b.n	8004e9c <_malloc_r+0x2c>
 8004f02:	1cc4      	adds	r4, r0, #3
 8004f04:	f024 0403 	bic.w	r4, r4, #3
 8004f08:	42a0      	cmp	r0, r4
 8004f0a:	d0e3      	beq.n	8004ed4 <_malloc_r+0x64>
 8004f0c:	1a21      	subs	r1, r4, r0
 8004f0e:	4630      	mov	r0, r6
 8004f10:	f000 faf6 	bl	8005500 <_sbrk_r>
 8004f14:	3001      	adds	r0, #1
 8004f16:	d1dd      	bne.n	8004ed4 <_malloc_r+0x64>
 8004f18:	e7cf      	b.n	8004eba <_malloc_r+0x4a>
 8004f1a:	bf00      	nop
 8004f1c:	20000094 	.word	0x20000094
 8004f20:	20000098 	.word	0x20000098

08004f24 <__sfputc_r>:
 8004f24:	6893      	ldr	r3, [r2, #8]
 8004f26:	b410      	push	{r4}
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	6093      	str	r3, [r2, #8]
 8004f2e:	da07      	bge.n	8004f40 <__sfputc_r+0x1c>
 8004f30:	6994      	ldr	r4, [r2, #24]
 8004f32:	42a3      	cmp	r3, r4
 8004f34:	db01      	blt.n	8004f3a <__sfputc_r+0x16>
 8004f36:	290a      	cmp	r1, #10
 8004f38:	d102      	bne.n	8004f40 <__sfputc_r+0x1c>
 8004f3a:	bc10      	pop	{r4}
 8004f3c:	f000 bb34 	b.w	80055a8 <__swbuf_r>
 8004f40:	6813      	ldr	r3, [r2, #0]
 8004f42:	1c58      	adds	r0, r3, #1
 8004f44:	6010      	str	r0, [r2, #0]
 8004f46:	7019      	strb	r1, [r3, #0]
 8004f48:	4608      	mov	r0, r1
 8004f4a:	bc10      	pop	{r4}
 8004f4c:	4770      	bx	lr

08004f4e <__sfputs_r>:
 8004f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f50:	4606      	mov	r6, r0
 8004f52:	460f      	mov	r7, r1
 8004f54:	4614      	mov	r4, r2
 8004f56:	18d5      	adds	r5, r2, r3
 8004f58:	42ac      	cmp	r4, r5
 8004f5a:	d101      	bne.n	8004f60 <__sfputs_r+0x12>
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	e007      	b.n	8004f70 <__sfputs_r+0x22>
 8004f60:	463a      	mov	r2, r7
 8004f62:	4630      	mov	r0, r6
 8004f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f68:	f7ff ffdc 	bl	8004f24 <__sfputc_r>
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	d1f3      	bne.n	8004f58 <__sfputs_r+0xa>
 8004f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f74 <_vfiprintf_r>:
 8004f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f78:	460d      	mov	r5, r1
 8004f7a:	4614      	mov	r4, r2
 8004f7c:	4698      	mov	r8, r3
 8004f7e:	4606      	mov	r6, r0
 8004f80:	b09d      	sub	sp, #116	; 0x74
 8004f82:	b118      	cbz	r0, 8004f8c <_vfiprintf_r+0x18>
 8004f84:	6983      	ldr	r3, [r0, #24]
 8004f86:	b90b      	cbnz	r3, 8004f8c <_vfiprintf_r+0x18>
 8004f88:	f7ff fed2 	bl	8004d30 <__sinit>
 8004f8c:	4b89      	ldr	r3, [pc, #548]	; (80051b4 <_vfiprintf_r+0x240>)
 8004f8e:	429d      	cmp	r5, r3
 8004f90:	d11b      	bne.n	8004fca <_vfiprintf_r+0x56>
 8004f92:	6875      	ldr	r5, [r6, #4]
 8004f94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f96:	07d9      	lsls	r1, r3, #31
 8004f98:	d405      	bmi.n	8004fa6 <_vfiprintf_r+0x32>
 8004f9a:	89ab      	ldrh	r3, [r5, #12]
 8004f9c:	059a      	lsls	r2, r3, #22
 8004f9e:	d402      	bmi.n	8004fa6 <_vfiprintf_r+0x32>
 8004fa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fa2:	f7ff ff63 	bl	8004e6c <__retarget_lock_acquire_recursive>
 8004fa6:	89ab      	ldrh	r3, [r5, #12]
 8004fa8:	071b      	lsls	r3, r3, #28
 8004faa:	d501      	bpl.n	8004fb0 <_vfiprintf_r+0x3c>
 8004fac:	692b      	ldr	r3, [r5, #16]
 8004fae:	b9eb      	cbnz	r3, 8004fec <_vfiprintf_r+0x78>
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	4630      	mov	r0, r6
 8004fb4:	f000 fb5c 	bl	8005670 <__swsetup_r>
 8004fb8:	b1c0      	cbz	r0, 8004fec <_vfiprintf_r+0x78>
 8004fba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fbc:	07dc      	lsls	r4, r3, #31
 8004fbe:	d50e      	bpl.n	8004fde <_vfiprintf_r+0x6a>
 8004fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc4:	b01d      	add	sp, #116	; 0x74
 8004fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fca:	4b7b      	ldr	r3, [pc, #492]	; (80051b8 <_vfiprintf_r+0x244>)
 8004fcc:	429d      	cmp	r5, r3
 8004fce:	d101      	bne.n	8004fd4 <_vfiprintf_r+0x60>
 8004fd0:	68b5      	ldr	r5, [r6, #8]
 8004fd2:	e7df      	b.n	8004f94 <_vfiprintf_r+0x20>
 8004fd4:	4b79      	ldr	r3, [pc, #484]	; (80051bc <_vfiprintf_r+0x248>)
 8004fd6:	429d      	cmp	r5, r3
 8004fd8:	bf08      	it	eq
 8004fda:	68f5      	ldreq	r5, [r6, #12]
 8004fdc:	e7da      	b.n	8004f94 <_vfiprintf_r+0x20>
 8004fde:	89ab      	ldrh	r3, [r5, #12]
 8004fe0:	0598      	lsls	r0, r3, #22
 8004fe2:	d4ed      	bmi.n	8004fc0 <_vfiprintf_r+0x4c>
 8004fe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fe6:	f7ff ff42 	bl	8004e6e <__retarget_lock_release_recursive>
 8004fea:	e7e9      	b.n	8004fc0 <_vfiprintf_r+0x4c>
 8004fec:	2300      	movs	r3, #0
 8004fee:	9309      	str	r3, [sp, #36]	; 0x24
 8004ff0:	2320      	movs	r3, #32
 8004ff2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ff6:	2330      	movs	r3, #48	; 0x30
 8004ff8:	f04f 0901 	mov.w	r9, #1
 8004ffc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005000:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80051c0 <_vfiprintf_r+0x24c>
 8005004:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005008:	4623      	mov	r3, r4
 800500a:	469a      	mov	sl, r3
 800500c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005010:	b10a      	cbz	r2, 8005016 <_vfiprintf_r+0xa2>
 8005012:	2a25      	cmp	r2, #37	; 0x25
 8005014:	d1f9      	bne.n	800500a <_vfiprintf_r+0x96>
 8005016:	ebba 0b04 	subs.w	fp, sl, r4
 800501a:	d00b      	beq.n	8005034 <_vfiprintf_r+0xc0>
 800501c:	465b      	mov	r3, fp
 800501e:	4622      	mov	r2, r4
 8005020:	4629      	mov	r1, r5
 8005022:	4630      	mov	r0, r6
 8005024:	f7ff ff93 	bl	8004f4e <__sfputs_r>
 8005028:	3001      	adds	r0, #1
 800502a:	f000 80aa 	beq.w	8005182 <_vfiprintf_r+0x20e>
 800502e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005030:	445a      	add	r2, fp
 8005032:	9209      	str	r2, [sp, #36]	; 0x24
 8005034:	f89a 3000 	ldrb.w	r3, [sl]
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 80a2 	beq.w	8005182 <_vfiprintf_r+0x20e>
 800503e:	2300      	movs	r3, #0
 8005040:	f04f 32ff 	mov.w	r2, #4294967295
 8005044:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005048:	f10a 0a01 	add.w	sl, sl, #1
 800504c:	9304      	str	r3, [sp, #16]
 800504e:	9307      	str	r3, [sp, #28]
 8005050:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005054:	931a      	str	r3, [sp, #104]	; 0x68
 8005056:	4654      	mov	r4, sl
 8005058:	2205      	movs	r2, #5
 800505a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800505e:	4858      	ldr	r0, [pc, #352]	; (80051c0 <_vfiprintf_r+0x24c>)
 8005060:	f000 fcbc 	bl	80059dc <memchr>
 8005064:	9a04      	ldr	r2, [sp, #16]
 8005066:	b9d8      	cbnz	r0, 80050a0 <_vfiprintf_r+0x12c>
 8005068:	06d1      	lsls	r1, r2, #27
 800506a:	bf44      	itt	mi
 800506c:	2320      	movmi	r3, #32
 800506e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005072:	0713      	lsls	r3, r2, #28
 8005074:	bf44      	itt	mi
 8005076:	232b      	movmi	r3, #43	; 0x2b
 8005078:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800507c:	f89a 3000 	ldrb.w	r3, [sl]
 8005080:	2b2a      	cmp	r3, #42	; 0x2a
 8005082:	d015      	beq.n	80050b0 <_vfiprintf_r+0x13c>
 8005084:	4654      	mov	r4, sl
 8005086:	2000      	movs	r0, #0
 8005088:	f04f 0c0a 	mov.w	ip, #10
 800508c:	9a07      	ldr	r2, [sp, #28]
 800508e:	4621      	mov	r1, r4
 8005090:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005094:	3b30      	subs	r3, #48	; 0x30
 8005096:	2b09      	cmp	r3, #9
 8005098:	d94e      	bls.n	8005138 <_vfiprintf_r+0x1c4>
 800509a:	b1b0      	cbz	r0, 80050ca <_vfiprintf_r+0x156>
 800509c:	9207      	str	r2, [sp, #28]
 800509e:	e014      	b.n	80050ca <_vfiprintf_r+0x156>
 80050a0:	eba0 0308 	sub.w	r3, r0, r8
 80050a4:	fa09 f303 	lsl.w	r3, r9, r3
 80050a8:	4313      	orrs	r3, r2
 80050aa:	46a2      	mov	sl, r4
 80050ac:	9304      	str	r3, [sp, #16]
 80050ae:	e7d2      	b.n	8005056 <_vfiprintf_r+0xe2>
 80050b0:	9b03      	ldr	r3, [sp, #12]
 80050b2:	1d19      	adds	r1, r3, #4
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	9103      	str	r1, [sp, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	bfbb      	ittet	lt
 80050bc:	425b      	neglt	r3, r3
 80050be:	f042 0202 	orrlt.w	r2, r2, #2
 80050c2:	9307      	strge	r3, [sp, #28]
 80050c4:	9307      	strlt	r3, [sp, #28]
 80050c6:	bfb8      	it	lt
 80050c8:	9204      	strlt	r2, [sp, #16]
 80050ca:	7823      	ldrb	r3, [r4, #0]
 80050cc:	2b2e      	cmp	r3, #46	; 0x2e
 80050ce:	d10c      	bne.n	80050ea <_vfiprintf_r+0x176>
 80050d0:	7863      	ldrb	r3, [r4, #1]
 80050d2:	2b2a      	cmp	r3, #42	; 0x2a
 80050d4:	d135      	bne.n	8005142 <_vfiprintf_r+0x1ce>
 80050d6:	9b03      	ldr	r3, [sp, #12]
 80050d8:	3402      	adds	r4, #2
 80050da:	1d1a      	adds	r2, r3, #4
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	9203      	str	r2, [sp, #12]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	bfb8      	it	lt
 80050e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80050e8:	9305      	str	r3, [sp, #20]
 80050ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80051d0 <_vfiprintf_r+0x25c>
 80050ee:	2203      	movs	r2, #3
 80050f0:	4650      	mov	r0, sl
 80050f2:	7821      	ldrb	r1, [r4, #0]
 80050f4:	f000 fc72 	bl	80059dc <memchr>
 80050f8:	b140      	cbz	r0, 800510c <_vfiprintf_r+0x198>
 80050fa:	2340      	movs	r3, #64	; 0x40
 80050fc:	eba0 000a 	sub.w	r0, r0, sl
 8005100:	fa03 f000 	lsl.w	r0, r3, r0
 8005104:	9b04      	ldr	r3, [sp, #16]
 8005106:	3401      	adds	r4, #1
 8005108:	4303      	orrs	r3, r0
 800510a:	9304      	str	r3, [sp, #16]
 800510c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005110:	2206      	movs	r2, #6
 8005112:	482c      	ldr	r0, [pc, #176]	; (80051c4 <_vfiprintf_r+0x250>)
 8005114:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005118:	f000 fc60 	bl	80059dc <memchr>
 800511c:	2800      	cmp	r0, #0
 800511e:	d03f      	beq.n	80051a0 <_vfiprintf_r+0x22c>
 8005120:	4b29      	ldr	r3, [pc, #164]	; (80051c8 <_vfiprintf_r+0x254>)
 8005122:	bb1b      	cbnz	r3, 800516c <_vfiprintf_r+0x1f8>
 8005124:	9b03      	ldr	r3, [sp, #12]
 8005126:	3307      	adds	r3, #7
 8005128:	f023 0307 	bic.w	r3, r3, #7
 800512c:	3308      	adds	r3, #8
 800512e:	9303      	str	r3, [sp, #12]
 8005130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005132:	443b      	add	r3, r7
 8005134:	9309      	str	r3, [sp, #36]	; 0x24
 8005136:	e767      	b.n	8005008 <_vfiprintf_r+0x94>
 8005138:	460c      	mov	r4, r1
 800513a:	2001      	movs	r0, #1
 800513c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005140:	e7a5      	b.n	800508e <_vfiprintf_r+0x11a>
 8005142:	2300      	movs	r3, #0
 8005144:	f04f 0c0a 	mov.w	ip, #10
 8005148:	4619      	mov	r1, r3
 800514a:	3401      	adds	r4, #1
 800514c:	9305      	str	r3, [sp, #20]
 800514e:	4620      	mov	r0, r4
 8005150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005154:	3a30      	subs	r2, #48	; 0x30
 8005156:	2a09      	cmp	r2, #9
 8005158:	d903      	bls.n	8005162 <_vfiprintf_r+0x1ee>
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0c5      	beq.n	80050ea <_vfiprintf_r+0x176>
 800515e:	9105      	str	r1, [sp, #20]
 8005160:	e7c3      	b.n	80050ea <_vfiprintf_r+0x176>
 8005162:	4604      	mov	r4, r0
 8005164:	2301      	movs	r3, #1
 8005166:	fb0c 2101 	mla	r1, ip, r1, r2
 800516a:	e7f0      	b.n	800514e <_vfiprintf_r+0x1da>
 800516c:	ab03      	add	r3, sp, #12
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	462a      	mov	r2, r5
 8005172:	4630      	mov	r0, r6
 8005174:	4b15      	ldr	r3, [pc, #84]	; (80051cc <_vfiprintf_r+0x258>)
 8005176:	a904      	add	r1, sp, #16
 8005178:	f3af 8000 	nop.w
 800517c:	4607      	mov	r7, r0
 800517e:	1c78      	adds	r0, r7, #1
 8005180:	d1d6      	bne.n	8005130 <_vfiprintf_r+0x1bc>
 8005182:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005184:	07d9      	lsls	r1, r3, #31
 8005186:	d405      	bmi.n	8005194 <_vfiprintf_r+0x220>
 8005188:	89ab      	ldrh	r3, [r5, #12]
 800518a:	059a      	lsls	r2, r3, #22
 800518c:	d402      	bmi.n	8005194 <_vfiprintf_r+0x220>
 800518e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005190:	f7ff fe6d 	bl	8004e6e <__retarget_lock_release_recursive>
 8005194:	89ab      	ldrh	r3, [r5, #12]
 8005196:	065b      	lsls	r3, r3, #25
 8005198:	f53f af12 	bmi.w	8004fc0 <_vfiprintf_r+0x4c>
 800519c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800519e:	e711      	b.n	8004fc4 <_vfiprintf_r+0x50>
 80051a0:	ab03      	add	r3, sp, #12
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	462a      	mov	r2, r5
 80051a6:	4630      	mov	r0, r6
 80051a8:	4b08      	ldr	r3, [pc, #32]	; (80051cc <_vfiprintf_r+0x258>)
 80051aa:	a904      	add	r1, sp, #16
 80051ac:	f000 f882 	bl	80052b4 <_printf_i>
 80051b0:	e7e4      	b.n	800517c <_vfiprintf_r+0x208>
 80051b2:	bf00      	nop
 80051b4:	08005c7c 	.word	0x08005c7c
 80051b8:	08005c9c 	.word	0x08005c9c
 80051bc:	08005c5c 	.word	0x08005c5c
 80051c0:	08005cbc 	.word	0x08005cbc
 80051c4:	08005cc6 	.word	0x08005cc6
 80051c8:	00000000 	.word	0x00000000
 80051cc:	08004f4f 	.word	0x08004f4f
 80051d0:	08005cc2 	.word	0x08005cc2

080051d4 <_printf_common>:
 80051d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051d8:	4616      	mov	r6, r2
 80051da:	4699      	mov	r9, r3
 80051dc:	688a      	ldr	r2, [r1, #8]
 80051de:	690b      	ldr	r3, [r1, #16]
 80051e0:	4607      	mov	r7, r0
 80051e2:	4293      	cmp	r3, r2
 80051e4:	bfb8      	it	lt
 80051e6:	4613      	movlt	r3, r2
 80051e8:	6033      	str	r3, [r6, #0]
 80051ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051ee:	460c      	mov	r4, r1
 80051f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051f4:	b10a      	cbz	r2, 80051fa <_printf_common+0x26>
 80051f6:	3301      	adds	r3, #1
 80051f8:	6033      	str	r3, [r6, #0]
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	0699      	lsls	r1, r3, #26
 80051fe:	bf42      	ittt	mi
 8005200:	6833      	ldrmi	r3, [r6, #0]
 8005202:	3302      	addmi	r3, #2
 8005204:	6033      	strmi	r3, [r6, #0]
 8005206:	6825      	ldr	r5, [r4, #0]
 8005208:	f015 0506 	ands.w	r5, r5, #6
 800520c:	d106      	bne.n	800521c <_printf_common+0x48>
 800520e:	f104 0a19 	add.w	sl, r4, #25
 8005212:	68e3      	ldr	r3, [r4, #12]
 8005214:	6832      	ldr	r2, [r6, #0]
 8005216:	1a9b      	subs	r3, r3, r2
 8005218:	42ab      	cmp	r3, r5
 800521a:	dc28      	bgt.n	800526e <_printf_common+0x9a>
 800521c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005220:	1e13      	subs	r3, r2, #0
 8005222:	6822      	ldr	r2, [r4, #0]
 8005224:	bf18      	it	ne
 8005226:	2301      	movne	r3, #1
 8005228:	0692      	lsls	r2, r2, #26
 800522a:	d42d      	bmi.n	8005288 <_printf_common+0xb4>
 800522c:	4649      	mov	r1, r9
 800522e:	4638      	mov	r0, r7
 8005230:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005234:	47c0      	blx	r8
 8005236:	3001      	adds	r0, #1
 8005238:	d020      	beq.n	800527c <_printf_common+0xa8>
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	68e5      	ldr	r5, [r4, #12]
 800523e:	f003 0306 	and.w	r3, r3, #6
 8005242:	2b04      	cmp	r3, #4
 8005244:	bf18      	it	ne
 8005246:	2500      	movne	r5, #0
 8005248:	6832      	ldr	r2, [r6, #0]
 800524a:	f04f 0600 	mov.w	r6, #0
 800524e:	68a3      	ldr	r3, [r4, #8]
 8005250:	bf08      	it	eq
 8005252:	1aad      	subeq	r5, r5, r2
 8005254:	6922      	ldr	r2, [r4, #16]
 8005256:	bf08      	it	eq
 8005258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800525c:	4293      	cmp	r3, r2
 800525e:	bfc4      	itt	gt
 8005260:	1a9b      	subgt	r3, r3, r2
 8005262:	18ed      	addgt	r5, r5, r3
 8005264:	341a      	adds	r4, #26
 8005266:	42b5      	cmp	r5, r6
 8005268:	d11a      	bne.n	80052a0 <_printf_common+0xcc>
 800526a:	2000      	movs	r0, #0
 800526c:	e008      	b.n	8005280 <_printf_common+0xac>
 800526e:	2301      	movs	r3, #1
 8005270:	4652      	mov	r2, sl
 8005272:	4649      	mov	r1, r9
 8005274:	4638      	mov	r0, r7
 8005276:	47c0      	blx	r8
 8005278:	3001      	adds	r0, #1
 800527a:	d103      	bne.n	8005284 <_printf_common+0xb0>
 800527c:	f04f 30ff 	mov.w	r0, #4294967295
 8005280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005284:	3501      	adds	r5, #1
 8005286:	e7c4      	b.n	8005212 <_printf_common+0x3e>
 8005288:	2030      	movs	r0, #48	; 0x30
 800528a:	18e1      	adds	r1, r4, r3
 800528c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005296:	4422      	add	r2, r4
 8005298:	3302      	adds	r3, #2
 800529a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800529e:	e7c5      	b.n	800522c <_printf_common+0x58>
 80052a0:	2301      	movs	r3, #1
 80052a2:	4622      	mov	r2, r4
 80052a4:	4649      	mov	r1, r9
 80052a6:	4638      	mov	r0, r7
 80052a8:	47c0      	blx	r8
 80052aa:	3001      	adds	r0, #1
 80052ac:	d0e6      	beq.n	800527c <_printf_common+0xa8>
 80052ae:	3601      	adds	r6, #1
 80052b0:	e7d9      	b.n	8005266 <_printf_common+0x92>
	...

080052b4 <_printf_i>:
 80052b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052b8:	460c      	mov	r4, r1
 80052ba:	7e27      	ldrb	r7, [r4, #24]
 80052bc:	4691      	mov	r9, r2
 80052be:	2f78      	cmp	r7, #120	; 0x78
 80052c0:	4680      	mov	r8, r0
 80052c2:	469a      	mov	sl, r3
 80052c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80052c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052ca:	d807      	bhi.n	80052dc <_printf_i+0x28>
 80052cc:	2f62      	cmp	r7, #98	; 0x62
 80052ce:	d80a      	bhi.n	80052e6 <_printf_i+0x32>
 80052d0:	2f00      	cmp	r7, #0
 80052d2:	f000 80d9 	beq.w	8005488 <_printf_i+0x1d4>
 80052d6:	2f58      	cmp	r7, #88	; 0x58
 80052d8:	f000 80a4 	beq.w	8005424 <_printf_i+0x170>
 80052dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052e4:	e03a      	b.n	800535c <_printf_i+0xa8>
 80052e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052ea:	2b15      	cmp	r3, #21
 80052ec:	d8f6      	bhi.n	80052dc <_printf_i+0x28>
 80052ee:	a001      	add	r0, pc, #4	; (adr r0, 80052f4 <_printf_i+0x40>)
 80052f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80052f4:	0800534d 	.word	0x0800534d
 80052f8:	08005361 	.word	0x08005361
 80052fc:	080052dd 	.word	0x080052dd
 8005300:	080052dd 	.word	0x080052dd
 8005304:	080052dd 	.word	0x080052dd
 8005308:	080052dd 	.word	0x080052dd
 800530c:	08005361 	.word	0x08005361
 8005310:	080052dd 	.word	0x080052dd
 8005314:	080052dd 	.word	0x080052dd
 8005318:	080052dd 	.word	0x080052dd
 800531c:	080052dd 	.word	0x080052dd
 8005320:	0800546f 	.word	0x0800546f
 8005324:	08005391 	.word	0x08005391
 8005328:	08005451 	.word	0x08005451
 800532c:	080052dd 	.word	0x080052dd
 8005330:	080052dd 	.word	0x080052dd
 8005334:	08005491 	.word	0x08005491
 8005338:	080052dd 	.word	0x080052dd
 800533c:	08005391 	.word	0x08005391
 8005340:	080052dd 	.word	0x080052dd
 8005344:	080052dd 	.word	0x080052dd
 8005348:	08005459 	.word	0x08005459
 800534c:	680b      	ldr	r3, [r1, #0]
 800534e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005352:	1d1a      	adds	r2, r3, #4
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	600a      	str	r2, [r1, #0]
 8005358:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800535c:	2301      	movs	r3, #1
 800535e:	e0a4      	b.n	80054aa <_printf_i+0x1f6>
 8005360:	6825      	ldr	r5, [r4, #0]
 8005362:	6808      	ldr	r0, [r1, #0]
 8005364:	062e      	lsls	r6, r5, #24
 8005366:	f100 0304 	add.w	r3, r0, #4
 800536a:	d50a      	bpl.n	8005382 <_printf_i+0xce>
 800536c:	6805      	ldr	r5, [r0, #0]
 800536e:	600b      	str	r3, [r1, #0]
 8005370:	2d00      	cmp	r5, #0
 8005372:	da03      	bge.n	800537c <_printf_i+0xc8>
 8005374:	232d      	movs	r3, #45	; 0x2d
 8005376:	426d      	negs	r5, r5
 8005378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800537c:	230a      	movs	r3, #10
 800537e:	485e      	ldr	r0, [pc, #376]	; (80054f8 <_printf_i+0x244>)
 8005380:	e019      	b.n	80053b6 <_printf_i+0x102>
 8005382:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005386:	6805      	ldr	r5, [r0, #0]
 8005388:	600b      	str	r3, [r1, #0]
 800538a:	bf18      	it	ne
 800538c:	b22d      	sxthne	r5, r5
 800538e:	e7ef      	b.n	8005370 <_printf_i+0xbc>
 8005390:	680b      	ldr	r3, [r1, #0]
 8005392:	6825      	ldr	r5, [r4, #0]
 8005394:	1d18      	adds	r0, r3, #4
 8005396:	6008      	str	r0, [r1, #0]
 8005398:	0628      	lsls	r0, r5, #24
 800539a:	d501      	bpl.n	80053a0 <_printf_i+0xec>
 800539c:	681d      	ldr	r5, [r3, #0]
 800539e:	e002      	b.n	80053a6 <_printf_i+0xf2>
 80053a0:	0669      	lsls	r1, r5, #25
 80053a2:	d5fb      	bpl.n	800539c <_printf_i+0xe8>
 80053a4:	881d      	ldrh	r5, [r3, #0]
 80053a6:	2f6f      	cmp	r7, #111	; 0x6f
 80053a8:	bf0c      	ite	eq
 80053aa:	2308      	moveq	r3, #8
 80053ac:	230a      	movne	r3, #10
 80053ae:	4852      	ldr	r0, [pc, #328]	; (80054f8 <_printf_i+0x244>)
 80053b0:	2100      	movs	r1, #0
 80053b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053b6:	6866      	ldr	r6, [r4, #4]
 80053b8:	2e00      	cmp	r6, #0
 80053ba:	bfa8      	it	ge
 80053bc:	6821      	ldrge	r1, [r4, #0]
 80053be:	60a6      	str	r6, [r4, #8]
 80053c0:	bfa4      	itt	ge
 80053c2:	f021 0104 	bicge.w	r1, r1, #4
 80053c6:	6021      	strge	r1, [r4, #0]
 80053c8:	b90d      	cbnz	r5, 80053ce <_printf_i+0x11a>
 80053ca:	2e00      	cmp	r6, #0
 80053cc:	d04d      	beq.n	800546a <_printf_i+0x1b6>
 80053ce:	4616      	mov	r6, r2
 80053d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80053d4:	fb03 5711 	mls	r7, r3, r1, r5
 80053d8:	5dc7      	ldrb	r7, [r0, r7]
 80053da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053de:	462f      	mov	r7, r5
 80053e0:	42bb      	cmp	r3, r7
 80053e2:	460d      	mov	r5, r1
 80053e4:	d9f4      	bls.n	80053d0 <_printf_i+0x11c>
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d10b      	bne.n	8005402 <_printf_i+0x14e>
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	07df      	lsls	r7, r3, #31
 80053ee:	d508      	bpl.n	8005402 <_printf_i+0x14e>
 80053f0:	6923      	ldr	r3, [r4, #16]
 80053f2:	6861      	ldr	r1, [r4, #4]
 80053f4:	4299      	cmp	r1, r3
 80053f6:	bfde      	ittt	le
 80053f8:	2330      	movle	r3, #48	; 0x30
 80053fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005402:	1b92      	subs	r2, r2, r6
 8005404:	6122      	str	r2, [r4, #16]
 8005406:	464b      	mov	r3, r9
 8005408:	4621      	mov	r1, r4
 800540a:	4640      	mov	r0, r8
 800540c:	f8cd a000 	str.w	sl, [sp]
 8005410:	aa03      	add	r2, sp, #12
 8005412:	f7ff fedf 	bl	80051d4 <_printf_common>
 8005416:	3001      	adds	r0, #1
 8005418:	d14c      	bne.n	80054b4 <_printf_i+0x200>
 800541a:	f04f 30ff 	mov.w	r0, #4294967295
 800541e:	b004      	add	sp, #16
 8005420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005424:	4834      	ldr	r0, [pc, #208]	; (80054f8 <_printf_i+0x244>)
 8005426:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800542a:	680e      	ldr	r6, [r1, #0]
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005432:	061f      	lsls	r7, r3, #24
 8005434:	600e      	str	r6, [r1, #0]
 8005436:	d514      	bpl.n	8005462 <_printf_i+0x1ae>
 8005438:	07d9      	lsls	r1, r3, #31
 800543a:	bf44      	itt	mi
 800543c:	f043 0320 	orrmi.w	r3, r3, #32
 8005440:	6023      	strmi	r3, [r4, #0]
 8005442:	b91d      	cbnz	r5, 800544c <_printf_i+0x198>
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	f023 0320 	bic.w	r3, r3, #32
 800544a:	6023      	str	r3, [r4, #0]
 800544c:	2310      	movs	r3, #16
 800544e:	e7af      	b.n	80053b0 <_printf_i+0xfc>
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	f043 0320 	orr.w	r3, r3, #32
 8005456:	6023      	str	r3, [r4, #0]
 8005458:	2378      	movs	r3, #120	; 0x78
 800545a:	4828      	ldr	r0, [pc, #160]	; (80054fc <_printf_i+0x248>)
 800545c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005460:	e7e3      	b.n	800542a <_printf_i+0x176>
 8005462:	065e      	lsls	r6, r3, #25
 8005464:	bf48      	it	mi
 8005466:	b2ad      	uxthmi	r5, r5
 8005468:	e7e6      	b.n	8005438 <_printf_i+0x184>
 800546a:	4616      	mov	r6, r2
 800546c:	e7bb      	b.n	80053e6 <_printf_i+0x132>
 800546e:	680b      	ldr	r3, [r1, #0]
 8005470:	6826      	ldr	r6, [r4, #0]
 8005472:	1d1d      	adds	r5, r3, #4
 8005474:	6960      	ldr	r0, [r4, #20]
 8005476:	600d      	str	r5, [r1, #0]
 8005478:	0635      	lsls	r5, r6, #24
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	d501      	bpl.n	8005482 <_printf_i+0x1ce>
 800547e:	6018      	str	r0, [r3, #0]
 8005480:	e002      	b.n	8005488 <_printf_i+0x1d4>
 8005482:	0671      	lsls	r1, r6, #25
 8005484:	d5fb      	bpl.n	800547e <_printf_i+0x1ca>
 8005486:	8018      	strh	r0, [r3, #0]
 8005488:	2300      	movs	r3, #0
 800548a:	4616      	mov	r6, r2
 800548c:	6123      	str	r3, [r4, #16]
 800548e:	e7ba      	b.n	8005406 <_printf_i+0x152>
 8005490:	680b      	ldr	r3, [r1, #0]
 8005492:	1d1a      	adds	r2, r3, #4
 8005494:	600a      	str	r2, [r1, #0]
 8005496:	681e      	ldr	r6, [r3, #0]
 8005498:	2100      	movs	r1, #0
 800549a:	4630      	mov	r0, r6
 800549c:	6862      	ldr	r2, [r4, #4]
 800549e:	f000 fa9d 	bl	80059dc <memchr>
 80054a2:	b108      	cbz	r0, 80054a8 <_printf_i+0x1f4>
 80054a4:	1b80      	subs	r0, r0, r6
 80054a6:	6060      	str	r0, [r4, #4]
 80054a8:	6863      	ldr	r3, [r4, #4]
 80054aa:	6123      	str	r3, [r4, #16]
 80054ac:	2300      	movs	r3, #0
 80054ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054b2:	e7a8      	b.n	8005406 <_printf_i+0x152>
 80054b4:	4632      	mov	r2, r6
 80054b6:	4649      	mov	r1, r9
 80054b8:	4640      	mov	r0, r8
 80054ba:	6923      	ldr	r3, [r4, #16]
 80054bc:	47d0      	blx	sl
 80054be:	3001      	adds	r0, #1
 80054c0:	d0ab      	beq.n	800541a <_printf_i+0x166>
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	079b      	lsls	r3, r3, #30
 80054c6:	d413      	bmi.n	80054f0 <_printf_i+0x23c>
 80054c8:	68e0      	ldr	r0, [r4, #12]
 80054ca:	9b03      	ldr	r3, [sp, #12]
 80054cc:	4298      	cmp	r0, r3
 80054ce:	bfb8      	it	lt
 80054d0:	4618      	movlt	r0, r3
 80054d2:	e7a4      	b.n	800541e <_printf_i+0x16a>
 80054d4:	2301      	movs	r3, #1
 80054d6:	4632      	mov	r2, r6
 80054d8:	4649      	mov	r1, r9
 80054da:	4640      	mov	r0, r8
 80054dc:	47d0      	blx	sl
 80054de:	3001      	adds	r0, #1
 80054e0:	d09b      	beq.n	800541a <_printf_i+0x166>
 80054e2:	3501      	adds	r5, #1
 80054e4:	68e3      	ldr	r3, [r4, #12]
 80054e6:	9903      	ldr	r1, [sp, #12]
 80054e8:	1a5b      	subs	r3, r3, r1
 80054ea:	42ab      	cmp	r3, r5
 80054ec:	dcf2      	bgt.n	80054d4 <_printf_i+0x220>
 80054ee:	e7eb      	b.n	80054c8 <_printf_i+0x214>
 80054f0:	2500      	movs	r5, #0
 80054f2:	f104 0619 	add.w	r6, r4, #25
 80054f6:	e7f5      	b.n	80054e4 <_printf_i+0x230>
 80054f8:	08005ccd 	.word	0x08005ccd
 80054fc:	08005cde 	.word	0x08005cde

08005500 <_sbrk_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	2300      	movs	r3, #0
 8005504:	4d05      	ldr	r5, [pc, #20]	; (800551c <_sbrk_r+0x1c>)
 8005506:	4604      	mov	r4, r0
 8005508:	4608      	mov	r0, r1
 800550a:	602b      	str	r3, [r5, #0]
 800550c:	f7fb fcd0 	bl	8000eb0 <_sbrk>
 8005510:	1c43      	adds	r3, r0, #1
 8005512:	d102      	bne.n	800551a <_sbrk_r+0x1a>
 8005514:	682b      	ldr	r3, [r5, #0]
 8005516:	b103      	cbz	r3, 800551a <_sbrk_r+0x1a>
 8005518:	6023      	str	r3, [r4, #0]
 800551a:	bd38      	pop	{r3, r4, r5, pc}
 800551c:	20000188 	.word	0x20000188

08005520 <__sread>:
 8005520:	b510      	push	{r4, lr}
 8005522:	460c      	mov	r4, r1
 8005524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005528:	f000 fabe 	bl	8005aa8 <_read_r>
 800552c:	2800      	cmp	r0, #0
 800552e:	bfab      	itete	ge
 8005530:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005532:	89a3      	ldrhlt	r3, [r4, #12]
 8005534:	181b      	addge	r3, r3, r0
 8005536:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800553a:	bfac      	ite	ge
 800553c:	6563      	strge	r3, [r4, #84]	; 0x54
 800553e:	81a3      	strhlt	r3, [r4, #12]
 8005540:	bd10      	pop	{r4, pc}

08005542 <__swrite>:
 8005542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005546:	461f      	mov	r7, r3
 8005548:	898b      	ldrh	r3, [r1, #12]
 800554a:	4605      	mov	r5, r0
 800554c:	05db      	lsls	r3, r3, #23
 800554e:	460c      	mov	r4, r1
 8005550:	4616      	mov	r6, r2
 8005552:	d505      	bpl.n	8005560 <__swrite+0x1e>
 8005554:	2302      	movs	r3, #2
 8005556:	2200      	movs	r2, #0
 8005558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800555c:	f000 f9c8 	bl	80058f0 <_lseek_r>
 8005560:	89a3      	ldrh	r3, [r4, #12]
 8005562:	4632      	mov	r2, r6
 8005564:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005568:	81a3      	strh	r3, [r4, #12]
 800556a:	4628      	mov	r0, r5
 800556c:	463b      	mov	r3, r7
 800556e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005576:	f000 b869 	b.w	800564c <_write_r>

0800557a <__sseek>:
 800557a:	b510      	push	{r4, lr}
 800557c:	460c      	mov	r4, r1
 800557e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005582:	f000 f9b5 	bl	80058f0 <_lseek_r>
 8005586:	1c43      	adds	r3, r0, #1
 8005588:	89a3      	ldrh	r3, [r4, #12]
 800558a:	bf15      	itete	ne
 800558c:	6560      	strne	r0, [r4, #84]	; 0x54
 800558e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005592:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005596:	81a3      	strheq	r3, [r4, #12]
 8005598:	bf18      	it	ne
 800559a:	81a3      	strhne	r3, [r4, #12]
 800559c:	bd10      	pop	{r4, pc}

0800559e <__sclose>:
 800559e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055a2:	f000 b8d3 	b.w	800574c <_close_r>
	...

080055a8 <__swbuf_r>:
 80055a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055aa:	460e      	mov	r6, r1
 80055ac:	4614      	mov	r4, r2
 80055ae:	4605      	mov	r5, r0
 80055b0:	b118      	cbz	r0, 80055ba <__swbuf_r+0x12>
 80055b2:	6983      	ldr	r3, [r0, #24]
 80055b4:	b90b      	cbnz	r3, 80055ba <__swbuf_r+0x12>
 80055b6:	f7ff fbbb 	bl	8004d30 <__sinit>
 80055ba:	4b21      	ldr	r3, [pc, #132]	; (8005640 <__swbuf_r+0x98>)
 80055bc:	429c      	cmp	r4, r3
 80055be:	d12b      	bne.n	8005618 <__swbuf_r+0x70>
 80055c0:	686c      	ldr	r4, [r5, #4]
 80055c2:	69a3      	ldr	r3, [r4, #24]
 80055c4:	60a3      	str	r3, [r4, #8]
 80055c6:	89a3      	ldrh	r3, [r4, #12]
 80055c8:	071a      	lsls	r2, r3, #28
 80055ca:	d52f      	bpl.n	800562c <__swbuf_r+0x84>
 80055cc:	6923      	ldr	r3, [r4, #16]
 80055ce:	b36b      	cbz	r3, 800562c <__swbuf_r+0x84>
 80055d0:	6923      	ldr	r3, [r4, #16]
 80055d2:	6820      	ldr	r0, [r4, #0]
 80055d4:	b2f6      	uxtb	r6, r6
 80055d6:	1ac0      	subs	r0, r0, r3
 80055d8:	6963      	ldr	r3, [r4, #20]
 80055da:	4637      	mov	r7, r6
 80055dc:	4283      	cmp	r3, r0
 80055de:	dc04      	bgt.n	80055ea <__swbuf_r+0x42>
 80055e0:	4621      	mov	r1, r4
 80055e2:	4628      	mov	r0, r5
 80055e4:	f000 f948 	bl	8005878 <_fflush_r>
 80055e8:	bb30      	cbnz	r0, 8005638 <__swbuf_r+0x90>
 80055ea:	68a3      	ldr	r3, [r4, #8]
 80055ec:	3001      	adds	r0, #1
 80055ee:	3b01      	subs	r3, #1
 80055f0:	60a3      	str	r3, [r4, #8]
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	6022      	str	r2, [r4, #0]
 80055f8:	701e      	strb	r6, [r3, #0]
 80055fa:	6963      	ldr	r3, [r4, #20]
 80055fc:	4283      	cmp	r3, r0
 80055fe:	d004      	beq.n	800560a <__swbuf_r+0x62>
 8005600:	89a3      	ldrh	r3, [r4, #12]
 8005602:	07db      	lsls	r3, r3, #31
 8005604:	d506      	bpl.n	8005614 <__swbuf_r+0x6c>
 8005606:	2e0a      	cmp	r6, #10
 8005608:	d104      	bne.n	8005614 <__swbuf_r+0x6c>
 800560a:	4621      	mov	r1, r4
 800560c:	4628      	mov	r0, r5
 800560e:	f000 f933 	bl	8005878 <_fflush_r>
 8005612:	b988      	cbnz	r0, 8005638 <__swbuf_r+0x90>
 8005614:	4638      	mov	r0, r7
 8005616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005618:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <__swbuf_r+0x9c>)
 800561a:	429c      	cmp	r4, r3
 800561c:	d101      	bne.n	8005622 <__swbuf_r+0x7a>
 800561e:	68ac      	ldr	r4, [r5, #8]
 8005620:	e7cf      	b.n	80055c2 <__swbuf_r+0x1a>
 8005622:	4b09      	ldr	r3, [pc, #36]	; (8005648 <__swbuf_r+0xa0>)
 8005624:	429c      	cmp	r4, r3
 8005626:	bf08      	it	eq
 8005628:	68ec      	ldreq	r4, [r5, #12]
 800562a:	e7ca      	b.n	80055c2 <__swbuf_r+0x1a>
 800562c:	4621      	mov	r1, r4
 800562e:	4628      	mov	r0, r5
 8005630:	f000 f81e 	bl	8005670 <__swsetup_r>
 8005634:	2800      	cmp	r0, #0
 8005636:	d0cb      	beq.n	80055d0 <__swbuf_r+0x28>
 8005638:	f04f 37ff 	mov.w	r7, #4294967295
 800563c:	e7ea      	b.n	8005614 <__swbuf_r+0x6c>
 800563e:	bf00      	nop
 8005640:	08005c7c 	.word	0x08005c7c
 8005644:	08005c9c 	.word	0x08005c9c
 8005648:	08005c5c 	.word	0x08005c5c

0800564c <_write_r>:
 800564c:	b538      	push	{r3, r4, r5, lr}
 800564e:	4604      	mov	r4, r0
 8005650:	4608      	mov	r0, r1
 8005652:	4611      	mov	r1, r2
 8005654:	2200      	movs	r2, #0
 8005656:	4d05      	ldr	r5, [pc, #20]	; (800566c <_write_r+0x20>)
 8005658:	602a      	str	r2, [r5, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	f7fb f9b0 	bl	80009c0 <_write>
 8005660:	1c43      	adds	r3, r0, #1
 8005662:	d102      	bne.n	800566a <_write_r+0x1e>
 8005664:	682b      	ldr	r3, [r5, #0]
 8005666:	b103      	cbz	r3, 800566a <_write_r+0x1e>
 8005668:	6023      	str	r3, [r4, #0]
 800566a:	bd38      	pop	{r3, r4, r5, pc}
 800566c:	20000188 	.word	0x20000188

08005670 <__swsetup_r>:
 8005670:	4b32      	ldr	r3, [pc, #200]	; (800573c <__swsetup_r+0xcc>)
 8005672:	b570      	push	{r4, r5, r6, lr}
 8005674:	681d      	ldr	r5, [r3, #0]
 8005676:	4606      	mov	r6, r0
 8005678:	460c      	mov	r4, r1
 800567a:	b125      	cbz	r5, 8005686 <__swsetup_r+0x16>
 800567c:	69ab      	ldr	r3, [r5, #24]
 800567e:	b913      	cbnz	r3, 8005686 <__swsetup_r+0x16>
 8005680:	4628      	mov	r0, r5
 8005682:	f7ff fb55 	bl	8004d30 <__sinit>
 8005686:	4b2e      	ldr	r3, [pc, #184]	; (8005740 <__swsetup_r+0xd0>)
 8005688:	429c      	cmp	r4, r3
 800568a:	d10f      	bne.n	80056ac <__swsetup_r+0x3c>
 800568c:	686c      	ldr	r4, [r5, #4]
 800568e:	89a3      	ldrh	r3, [r4, #12]
 8005690:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005694:	0719      	lsls	r1, r3, #28
 8005696:	d42c      	bmi.n	80056f2 <__swsetup_r+0x82>
 8005698:	06dd      	lsls	r5, r3, #27
 800569a:	d411      	bmi.n	80056c0 <__swsetup_r+0x50>
 800569c:	2309      	movs	r3, #9
 800569e:	6033      	str	r3, [r6, #0]
 80056a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80056a4:	f04f 30ff 	mov.w	r0, #4294967295
 80056a8:	81a3      	strh	r3, [r4, #12]
 80056aa:	e03e      	b.n	800572a <__swsetup_r+0xba>
 80056ac:	4b25      	ldr	r3, [pc, #148]	; (8005744 <__swsetup_r+0xd4>)
 80056ae:	429c      	cmp	r4, r3
 80056b0:	d101      	bne.n	80056b6 <__swsetup_r+0x46>
 80056b2:	68ac      	ldr	r4, [r5, #8]
 80056b4:	e7eb      	b.n	800568e <__swsetup_r+0x1e>
 80056b6:	4b24      	ldr	r3, [pc, #144]	; (8005748 <__swsetup_r+0xd8>)
 80056b8:	429c      	cmp	r4, r3
 80056ba:	bf08      	it	eq
 80056bc:	68ec      	ldreq	r4, [r5, #12]
 80056be:	e7e6      	b.n	800568e <__swsetup_r+0x1e>
 80056c0:	0758      	lsls	r0, r3, #29
 80056c2:	d512      	bpl.n	80056ea <__swsetup_r+0x7a>
 80056c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056c6:	b141      	cbz	r1, 80056da <__swsetup_r+0x6a>
 80056c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056cc:	4299      	cmp	r1, r3
 80056ce:	d002      	beq.n	80056d6 <__swsetup_r+0x66>
 80056d0:	4630      	mov	r0, r6
 80056d2:	f000 f99d 	bl	8005a10 <_free_r>
 80056d6:	2300      	movs	r3, #0
 80056d8:	6363      	str	r3, [r4, #52]	; 0x34
 80056da:	89a3      	ldrh	r3, [r4, #12]
 80056dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056e0:	81a3      	strh	r3, [r4, #12]
 80056e2:	2300      	movs	r3, #0
 80056e4:	6063      	str	r3, [r4, #4]
 80056e6:	6923      	ldr	r3, [r4, #16]
 80056e8:	6023      	str	r3, [r4, #0]
 80056ea:	89a3      	ldrh	r3, [r4, #12]
 80056ec:	f043 0308 	orr.w	r3, r3, #8
 80056f0:	81a3      	strh	r3, [r4, #12]
 80056f2:	6923      	ldr	r3, [r4, #16]
 80056f4:	b94b      	cbnz	r3, 800570a <__swsetup_r+0x9a>
 80056f6:	89a3      	ldrh	r3, [r4, #12]
 80056f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005700:	d003      	beq.n	800570a <__swsetup_r+0x9a>
 8005702:	4621      	mov	r1, r4
 8005704:	4630      	mov	r0, r6
 8005706:	f000 f929 	bl	800595c <__smakebuf_r>
 800570a:	89a0      	ldrh	r0, [r4, #12]
 800570c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005710:	f010 0301 	ands.w	r3, r0, #1
 8005714:	d00a      	beq.n	800572c <__swsetup_r+0xbc>
 8005716:	2300      	movs	r3, #0
 8005718:	60a3      	str	r3, [r4, #8]
 800571a:	6963      	ldr	r3, [r4, #20]
 800571c:	425b      	negs	r3, r3
 800571e:	61a3      	str	r3, [r4, #24]
 8005720:	6923      	ldr	r3, [r4, #16]
 8005722:	b943      	cbnz	r3, 8005736 <__swsetup_r+0xc6>
 8005724:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005728:	d1ba      	bne.n	80056a0 <__swsetup_r+0x30>
 800572a:	bd70      	pop	{r4, r5, r6, pc}
 800572c:	0781      	lsls	r1, r0, #30
 800572e:	bf58      	it	pl
 8005730:	6963      	ldrpl	r3, [r4, #20]
 8005732:	60a3      	str	r3, [r4, #8]
 8005734:	e7f4      	b.n	8005720 <__swsetup_r+0xb0>
 8005736:	2000      	movs	r0, #0
 8005738:	e7f7      	b.n	800572a <__swsetup_r+0xba>
 800573a:	bf00      	nop
 800573c:	2000000c 	.word	0x2000000c
 8005740:	08005c7c 	.word	0x08005c7c
 8005744:	08005c9c 	.word	0x08005c9c
 8005748:	08005c5c 	.word	0x08005c5c

0800574c <_close_r>:
 800574c:	b538      	push	{r3, r4, r5, lr}
 800574e:	2300      	movs	r3, #0
 8005750:	4d05      	ldr	r5, [pc, #20]	; (8005768 <_close_r+0x1c>)
 8005752:	4604      	mov	r4, r0
 8005754:	4608      	mov	r0, r1
 8005756:	602b      	str	r3, [r5, #0]
 8005758:	f7fb fb79 	bl	8000e4e <_close>
 800575c:	1c43      	adds	r3, r0, #1
 800575e:	d102      	bne.n	8005766 <_close_r+0x1a>
 8005760:	682b      	ldr	r3, [r5, #0]
 8005762:	b103      	cbz	r3, 8005766 <_close_r+0x1a>
 8005764:	6023      	str	r3, [r4, #0]
 8005766:	bd38      	pop	{r3, r4, r5, pc}
 8005768:	20000188 	.word	0x20000188

0800576c <__sflush_r>:
 800576c:	898a      	ldrh	r2, [r1, #12]
 800576e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005772:	4605      	mov	r5, r0
 8005774:	0710      	lsls	r0, r2, #28
 8005776:	460c      	mov	r4, r1
 8005778:	d458      	bmi.n	800582c <__sflush_r+0xc0>
 800577a:	684b      	ldr	r3, [r1, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	dc05      	bgt.n	800578c <__sflush_r+0x20>
 8005780:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005782:	2b00      	cmp	r3, #0
 8005784:	dc02      	bgt.n	800578c <__sflush_r+0x20>
 8005786:	2000      	movs	r0, #0
 8005788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800578c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800578e:	2e00      	cmp	r6, #0
 8005790:	d0f9      	beq.n	8005786 <__sflush_r+0x1a>
 8005792:	2300      	movs	r3, #0
 8005794:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005798:	682f      	ldr	r7, [r5, #0]
 800579a:	602b      	str	r3, [r5, #0]
 800579c:	d032      	beq.n	8005804 <__sflush_r+0x98>
 800579e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057a0:	89a3      	ldrh	r3, [r4, #12]
 80057a2:	075a      	lsls	r2, r3, #29
 80057a4:	d505      	bpl.n	80057b2 <__sflush_r+0x46>
 80057a6:	6863      	ldr	r3, [r4, #4]
 80057a8:	1ac0      	subs	r0, r0, r3
 80057aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057ac:	b10b      	cbz	r3, 80057b2 <__sflush_r+0x46>
 80057ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057b0:	1ac0      	subs	r0, r0, r3
 80057b2:	2300      	movs	r3, #0
 80057b4:	4602      	mov	r2, r0
 80057b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057b8:	4628      	mov	r0, r5
 80057ba:	6a21      	ldr	r1, [r4, #32]
 80057bc:	47b0      	blx	r6
 80057be:	1c43      	adds	r3, r0, #1
 80057c0:	89a3      	ldrh	r3, [r4, #12]
 80057c2:	d106      	bne.n	80057d2 <__sflush_r+0x66>
 80057c4:	6829      	ldr	r1, [r5, #0]
 80057c6:	291d      	cmp	r1, #29
 80057c8:	d82c      	bhi.n	8005824 <__sflush_r+0xb8>
 80057ca:	4a2a      	ldr	r2, [pc, #168]	; (8005874 <__sflush_r+0x108>)
 80057cc:	40ca      	lsrs	r2, r1
 80057ce:	07d6      	lsls	r6, r2, #31
 80057d0:	d528      	bpl.n	8005824 <__sflush_r+0xb8>
 80057d2:	2200      	movs	r2, #0
 80057d4:	6062      	str	r2, [r4, #4]
 80057d6:	6922      	ldr	r2, [r4, #16]
 80057d8:	04d9      	lsls	r1, r3, #19
 80057da:	6022      	str	r2, [r4, #0]
 80057dc:	d504      	bpl.n	80057e8 <__sflush_r+0x7c>
 80057de:	1c42      	adds	r2, r0, #1
 80057e0:	d101      	bne.n	80057e6 <__sflush_r+0x7a>
 80057e2:	682b      	ldr	r3, [r5, #0]
 80057e4:	b903      	cbnz	r3, 80057e8 <__sflush_r+0x7c>
 80057e6:	6560      	str	r0, [r4, #84]	; 0x54
 80057e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057ea:	602f      	str	r7, [r5, #0]
 80057ec:	2900      	cmp	r1, #0
 80057ee:	d0ca      	beq.n	8005786 <__sflush_r+0x1a>
 80057f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057f4:	4299      	cmp	r1, r3
 80057f6:	d002      	beq.n	80057fe <__sflush_r+0x92>
 80057f8:	4628      	mov	r0, r5
 80057fa:	f000 f909 	bl	8005a10 <_free_r>
 80057fe:	2000      	movs	r0, #0
 8005800:	6360      	str	r0, [r4, #52]	; 0x34
 8005802:	e7c1      	b.n	8005788 <__sflush_r+0x1c>
 8005804:	6a21      	ldr	r1, [r4, #32]
 8005806:	2301      	movs	r3, #1
 8005808:	4628      	mov	r0, r5
 800580a:	47b0      	blx	r6
 800580c:	1c41      	adds	r1, r0, #1
 800580e:	d1c7      	bne.n	80057a0 <__sflush_r+0x34>
 8005810:	682b      	ldr	r3, [r5, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0c4      	beq.n	80057a0 <__sflush_r+0x34>
 8005816:	2b1d      	cmp	r3, #29
 8005818:	d001      	beq.n	800581e <__sflush_r+0xb2>
 800581a:	2b16      	cmp	r3, #22
 800581c:	d101      	bne.n	8005822 <__sflush_r+0xb6>
 800581e:	602f      	str	r7, [r5, #0]
 8005820:	e7b1      	b.n	8005786 <__sflush_r+0x1a>
 8005822:	89a3      	ldrh	r3, [r4, #12]
 8005824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005828:	81a3      	strh	r3, [r4, #12]
 800582a:	e7ad      	b.n	8005788 <__sflush_r+0x1c>
 800582c:	690f      	ldr	r7, [r1, #16]
 800582e:	2f00      	cmp	r7, #0
 8005830:	d0a9      	beq.n	8005786 <__sflush_r+0x1a>
 8005832:	0793      	lsls	r3, r2, #30
 8005834:	bf18      	it	ne
 8005836:	2300      	movne	r3, #0
 8005838:	680e      	ldr	r6, [r1, #0]
 800583a:	bf08      	it	eq
 800583c:	694b      	ldreq	r3, [r1, #20]
 800583e:	eba6 0807 	sub.w	r8, r6, r7
 8005842:	600f      	str	r7, [r1, #0]
 8005844:	608b      	str	r3, [r1, #8]
 8005846:	f1b8 0f00 	cmp.w	r8, #0
 800584a:	dd9c      	ble.n	8005786 <__sflush_r+0x1a>
 800584c:	4643      	mov	r3, r8
 800584e:	463a      	mov	r2, r7
 8005850:	4628      	mov	r0, r5
 8005852:	6a21      	ldr	r1, [r4, #32]
 8005854:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005856:	47b0      	blx	r6
 8005858:	2800      	cmp	r0, #0
 800585a:	dc06      	bgt.n	800586a <__sflush_r+0xfe>
 800585c:	89a3      	ldrh	r3, [r4, #12]
 800585e:	f04f 30ff 	mov.w	r0, #4294967295
 8005862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005866:	81a3      	strh	r3, [r4, #12]
 8005868:	e78e      	b.n	8005788 <__sflush_r+0x1c>
 800586a:	4407      	add	r7, r0
 800586c:	eba8 0800 	sub.w	r8, r8, r0
 8005870:	e7e9      	b.n	8005846 <__sflush_r+0xda>
 8005872:	bf00      	nop
 8005874:	20400001 	.word	0x20400001

08005878 <_fflush_r>:
 8005878:	b538      	push	{r3, r4, r5, lr}
 800587a:	690b      	ldr	r3, [r1, #16]
 800587c:	4605      	mov	r5, r0
 800587e:	460c      	mov	r4, r1
 8005880:	b913      	cbnz	r3, 8005888 <_fflush_r+0x10>
 8005882:	2500      	movs	r5, #0
 8005884:	4628      	mov	r0, r5
 8005886:	bd38      	pop	{r3, r4, r5, pc}
 8005888:	b118      	cbz	r0, 8005892 <_fflush_r+0x1a>
 800588a:	6983      	ldr	r3, [r0, #24]
 800588c:	b90b      	cbnz	r3, 8005892 <_fflush_r+0x1a>
 800588e:	f7ff fa4f 	bl	8004d30 <__sinit>
 8005892:	4b14      	ldr	r3, [pc, #80]	; (80058e4 <_fflush_r+0x6c>)
 8005894:	429c      	cmp	r4, r3
 8005896:	d11b      	bne.n	80058d0 <_fflush_r+0x58>
 8005898:	686c      	ldr	r4, [r5, #4]
 800589a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0ef      	beq.n	8005882 <_fflush_r+0xa>
 80058a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058a4:	07d0      	lsls	r0, r2, #31
 80058a6:	d404      	bmi.n	80058b2 <_fflush_r+0x3a>
 80058a8:	0599      	lsls	r1, r3, #22
 80058aa:	d402      	bmi.n	80058b2 <_fflush_r+0x3a>
 80058ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058ae:	f7ff fadd 	bl	8004e6c <__retarget_lock_acquire_recursive>
 80058b2:	4628      	mov	r0, r5
 80058b4:	4621      	mov	r1, r4
 80058b6:	f7ff ff59 	bl	800576c <__sflush_r>
 80058ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058bc:	4605      	mov	r5, r0
 80058be:	07da      	lsls	r2, r3, #31
 80058c0:	d4e0      	bmi.n	8005884 <_fflush_r+0xc>
 80058c2:	89a3      	ldrh	r3, [r4, #12]
 80058c4:	059b      	lsls	r3, r3, #22
 80058c6:	d4dd      	bmi.n	8005884 <_fflush_r+0xc>
 80058c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058ca:	f7ff fad0 	bl	8004e6e <__retarget_lock_release_recursive>
 80058ce:	e7d9      	b.n	8005884 <_fflush_r+0xc>
 80058d0:	4b05      	ldr	r3, [pc, #20]	; (80058e8 <_fflush_r+0x70>)
 80058d2:	429c      	cmp	r4, r3
 80058d4:	d101      	bne.n	80058da <_fflush_r+0x62>
 80058d6:	68ac      	ldr	r4, [r5, #8]
 80058d8:	e7df      	b.n	800589a <_fflush_r+0x22>
 80058da:	4b04      	ldr	r3, [pc, #16]	; (80058ec <_fflush_r+0x74>)
 80058dc:	429c      	cmp	r4, r3
 80058de:	bf08      	it	eq
 80058e0:	68ec      	ldreq	r4, [r5, #12]
 80058e2:	e7da      	b.n	800589a <_fflush_r+0x22>
 80058e4:	08005c7c 	.word	0x08005c7c
 80058e8:	08005c9c 	.word	0x08005c9c
 80058ec:	08005c5c 	.word	0x08005c5c

080058f0 <_lseek_r>:
 80058f0:	b538      	push	{r3, r4, r5, lr}
 80058f2:	4604      	mov	r4, r0
 80058f4:	4608      	mov	r0, r1
 80058f6:	4611      	mov	r1, r2
 80058f8:	2200      	movs	r2, #0
 80058fa:	4d05      	ldr	r5, [pc, #20]	; (8005910 <_lseek_r+0x20>)
 80058fc:	602a      	str	r2, [r5, #0]
 80058fe:	461a      	mov	r2, r3
 8005900:	f7fb fac9 	bl	8000e96 <_lseek>
 8005904:	1c43      	adds	r3, r0, #1
 8005906:	d102      	bne.n	800590e <_lseek_r+0x1e>
 8005908:	682b      	ldr	r3, [r5, #0]
 800590a:	b103      	cbz	r3, 800590e <_lseek_r+0x1e>
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	bd38      	pop	{r3, r4, r5, pc}
 8005910:	20000188 	.word	0x20000188

08005914 <__swhatbuf_r>:
 8005914:	b570      	push	{r4, r5, r6, lr}
 8005916:	460e      	mov	r6, r1
 8005918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800591c:	4614      	mov	r4, r2
 800591e:	2900      	cmp	r1, #0
 8005920:	461d      	mov	r5, r3
 8005922:	b096      	sub	sp, #88	; 0x58
 8005924:	da07      	bge.n	8005936 <__swhatbuf_r+0x22>
 8005926:	2300      	movs	r3, #0
 8005928:	602b      	str	r3, [r5, #0]
 800592a:	89b3      	ldrh	r3, [r6, #12]
 800592c:	061a      	lsls	r2, r3, #24
 800592e:	d410      	bmi.n	8005952 <__swhatbuf_r+0x3e>
 8005930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005934:	e00e      	b.n	8005954 <__swhatbuf_r+0x40>
 8005936:	466a      	mov	r2, sp
 8005938:	f000 f8c8 	bl	8005acc <_fstat_r>
 800593c:	2800      	cmp	r0, #0
 800593e:	dbf2      	blt.n	8005926 <__swhatbuf_r+0x12>
 8005940:	9a01      	ldr	r2, [sp, #4]
 8005942:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005946:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800594a:	425a      	negs	r2, r3
 800594c:	415a      	adcs	r2, r3
 800594e:	602a      	str	r2, [r5, #0]
 8005950:	e7ee      	b.n	8005930 <__swhatbuf_r+0x1c>
 8005952:	2340      	movs	r3, #64	; 0x40
 8005954:	2000      	movs	r0, #0
 8005956:	6023      	str	r3, [r4, #0]
 8005958:	b016      	add	sp, #88	; 0x58
 800595a:	bd70      	pop	{r4, r5, r6, pc}

0800595c <__smakebuf_r>:
 800595c:	898b      	ldrh	r3, [r1, #12]
 800595e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005960:	079d      	lsls	r5, r3, #30
 8005962:	4606      	mov	r6, r0
 8005964:	460c      	mov	r4, r1
 8005966:	d507      	bpl.n	8005978 <__smakebuf_r+0x1c>
 8005968:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	6123      	str	r3, [r4, #16]
 8005970:	2301      	movs	r3, #1
 8005972:	6163      	str	r3, [r4, #20]
 8005974:	b002      	add	sp, #8
 8005976:	bd70      	pop	{r4, r5, r6, pc}
 8005978:	466a      	mov	r2, sp
 800597a:	ab01      	add	r3, sp, #4
 800597c:	f7ff ffca 	bl	8005914 <__swhatbuf_r>
 8005980:	9900      	ldr	r1, [sp, #0]
 8005982:	4605      	mov	r5, r0
 8005984:	4630      	mov	r0, r6
 8005986:	f7ff fa73 	bl	8004e70 <_malloc_r>
 800598a:	b948      	cbnz	r0, 80059a0 <__smakebuf_r+0x44>
 800598c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005990:	059a      	lsls	r2, r3, #22
 8005992:	d4ef      	bmi.n	8005974 <__smakebuf_r+0x18>
 8005994:	f023 0303 	bic.w	r3, r3, #3
 8005998:	f043 0302 	orr.w	r3, r3, #2
 800599c:	81a3      	strh	r3, [r4, #12]
 800599e:	e7e3      	b.n	8005968 <__smakebuf_r+0xc>
 80059a0:	4b0d      	ldr	r3, [pc, #52]	; (80059d8 <__smakebuf_r+0x7c>)
 80059a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80059a4:	89a3      	ldrh	r3, [r4, #12]
 80059a6:	6020      	str	r0, [r4, #0]
 80059a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ac:	81a3      	strh	r3, [r4, #12]
 80059ae:	9b00      	ldr	r3, [sp, #0]
 80059b0:	6120      	str	r0, [r4, #16]
 80059b2:	6163      	str	r3, [r4, #20]
 80059b4:	9b01      	ldr	r3, [sp, #4]
 80059b6:	b15b      	cbz	r3, 80059d0 <__smakebuf_r+0x74>
 80059b8:	4630      	mov	r0, r6
 80059ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059be:	f000 f897 	bl	8005af0 <_isatty_r>
 80059c2:	b128      	cbz	r0, 80059d0 <__smakebuf_r+0x74>
 80059c4:	89a3      	ldrh	r3, [r4, #12]
 80059c6:	f023 0303 	bic.w	r3, r3, #3
 80059ca:	f043 0301 	orr.w	r3, r3, #1
 80059ce:	81a3      	strh	r3, [r4, #12]
 80059d0:	89a0      	ldrh	r0, [r4, #12]
 80059d2:	4305      	orrs	r5, r0
 80059d4:	81a5      	strh	r5, [r4, #12]
 80059d6:	e7cd      	b.n	8005974 <__smakebuf_r+0x18>
 80059d8:	08004cc9 	.word	0x08004cc9

080059dc <memchr>:
 80059dc:	4603      	mov	r3, r0
 80059de:	b510      	push	{r4, lr}
 80059e0:	b2c9      	uxtb	r1, r1
 80059e2:	4402      	add	r2, r0
 80059e4:	4293      	cmp	r3, r2
 80059e6:	4618      	mov	r0, r3
 80059e8:	d101      	bne.n	80059ee <memchr+0x12>
 80059ea:	2000      	movs	r0, #0
 80059ec:	e003      	b.n	80059f6 <memchr+0x1a>
 80059ee:	7804      	ldrb	r4, [r0, #0]
 80059f0:	3301      	adds	r3, #1
 80059f2:	428c      	cmp	r4, r1
 80059f4:	d1f6      	bne.n	80059e4 <memchr+0x8>
 80059f6:	bd10      	pop	{r4, pc}

080059f8 <__malloc_lock>:
 80059f8:	4801      	ldr	r0, [pc, #4]	; (8005a00 <__malloc_lock+0x8>)
 80059fa:	f7ff ba37 	b.w	8004e6c <__retarget_lock_acquire_recursive>
 80059fe:	bf00      	nop
 8005a00:	20000180 	.word	0x20000180

08005a04 <__malloc_unlock>:
 8005a04:	4801      	ldr	r0, [pc, #4]	; (8005a0c <__malloc_unlock+0x8>)
 8005a06:	f7ff ba32 	b.w	8004e6e <__retarget_lock_release_recursive>
 8005a0a:	bf00      	nop
 8005a0c:	20000180 	.word	0x20000180

08005a10 <_free_r>:
 8005a10:	b538      	push	{r3, r4, r5, lr}
 8005a12:	4605      	mov	r5, r0
 8005a14:	2900      	cmp	r1, #0
 8005a16:	d043      	beq.n	8005aa0 <_free_r+0x90>
 8005a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a1c:	1f0c      	subs	r4, r1, #4
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	bfb8      	it	lt
 8005a22:	18e4      	addlt	r4, r4, r3
 8005a24:	f7ff ffe8 	bl	80059f8 <__malloc_lock>
 8005a28:	4a1e      	ldr	r2, [pc, #120]	; (8005aa4 <_free_r+0x94>)
 8005a2a:	6813      	ldr	r3, [r2, #0]
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	b933      	cbnz	r3, 8005a3e <_free_r+0x2e>
 8005a30:	6063      	str	r3, [r4, #4]
 8005a32:	6014      	str	r4, [r2, #0]
 8005a34:	4628      	mov	r0, r5
 8005a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a3a:	f7ff bfe3 	b.w	8005a04 <__malloc_unlock>
 8005a3e:	42a3      	cmp	r3, r4
 8005a40:	d90a      	bls.n	8005a58 <_free_r+0x48>
 8005a42:	6821      	ldr	r1, [r4, #0]
 8005a44:	1862      	adds	r2, r4, r1
 8005a46:	4293      	cmp	r3, r2
 8005a48:	bf01      	itttt	eq
 8005a4a:	681a      	ldreq	r2, [r3, #0]
 8005a4c:	685b      	ldreq	r3, [r3, #4]
 8005a4e:	1852      	addeq	r2, r2, r1
 8005a50:	6022      	streq	r2, [r4, #0]
 8005a52:	6063      	str	r3, [r4, #4]
 8005a54:	6004      	str	r4, [r0, #0]
 8005a56:	e7ed      	b.n	8005a34 <_free_r+0x24>
 8005a58:	461a      	mov	r2, r3
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	b10b      	cbz	r3, 8005a62 <_free_r+0x52>
 8005a5e:	42a3      	cmp	r3, r4
 8005a60:	d9fa      	bls.n	8005a58 <_free_r+0x48>
 8005a62:	6811      	ldr	r1, [r2, #0]
 8005a64:	1850      	adds	r0, r2, r1
 8005a66:	42a0      	cmp	r0, r4
 8005a68:	d10b      	bne.n	8005a82 <_free_r+0x72>
 8005a6a:	6820      	ldr	r0, [r4, #0]
 8005a6c:	4401      	add	r1, r0
 8005a6e:	1850      	adds	r0, r2, r1
 8005a70:	4283      	cmp	r3, r0
 8005a72:	6011      	str	r1, [r2, #0]
 8005a74:	d1de      	bne.n	8005a34 <_free_r+0x24>
 8005a76:	6818      	ldr	r0, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	4401      	add	r1, r0
 8005a7c:	6011      	str	r1, [r2, #0]
 8005a7e:	6053      	str	r3, [r2, #4]
 8005a80:	e7d8      	b.n	8005a34 <_free_r+0x24>
 8005a82:	d902      	bls.n	8005a8a <_free_r+0x7a>
 8005a84:	230c      	movs	r3, #12
 8005a86:	602b      	str	r3, [r5, #0]
 8005a88:	e7d4      	b.n	8005a34 <_free_r+0x24>
 8005a8a:	6820      	ldr	r0, [r4, #0]
 8005a8c:	1821      	adds	r1, r4, r0
 8005a8e:	428b      	cmp	r3, r1
 8005a90:	bf01      	itttt	eq
 8005a92:	6819      	ldreq	r1, [r3, #0]
 8005a94:	685b      	ldreq	r3, [r3, #4]
 8005a96:	1809      	addeq	r1, r1, r0
 8005a98:	6021      	streq	r1, [r4, #0]
 8005a9a:	6063      	str	r3, [r4, #4]
 8005a9c:	6054      	str	r4, [r2, #4]
 8005a9e:	e7c9      	b.n	8005a34 <_free_r+0x24>
 8005aa0:	bd38      	pop	{r3, r4, r5, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20000094 	.word	0x20000094

08005aa8 <_read_r>:
 8005aa8:	b538      	push	{r3, r4, r5, lr}
 8005aaa:	4604      	mov	r4, r0
 8005aac:	4608      	mov	r0, r1
 8005aae:	4611      	mov	r1, r2
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	4d05      	ldr	r5, [pc, #20]	; (8005ac8 <_read_r+0x20>)
 8005ab4:	602a      	str	r2, [r5, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	f7fb f9ac 	bl	8000e14 <_read>
 8005abc:	1c43      	adds	r3, r0, #1
 8005abe:	d102      	bne.n	8005ac6 <_read_r+0x1e>
 8005ac0:	682b      	ldr	r3, [r5, #0]
 8005ac2:	b103      	cbz	r3, 8005ac6 <_read_r+0x1e>
 8005ac4:	6023      	str	r3, [r4, #0]
 8005ac6:	bd38      	pop	{r3, r4, r5, pc}
 8005ac8:	20000188 	.word	0x20000188

08005acc <_fstat_r>:
 8005acc:	b538      	push	{r3, r4, r5, lr}
 8005ace:	2300      	movs	r3, #0
 8005ad0:	4d06      	ldr	r5, [pc, #24]	; (8005aec <_fstat_r+0x20>)
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	4608      	mov	r0, r1
 8005ad6:	4611      	mov	r1, r2
 8005ad8:	602b      	str	r3, [r5, #0]
 8005ada:	f7fb f9c3 	bl	8000e64 <_fstat>
 8005ade:	1c43      	adds	r3, r0, #1
 8005ae0:	d102      	bne.n	8005ae8 <_fstat_r+0x1c>
 8005ae2:	682b      	ldr	r3, [r5, #0]
 8005ae4:	b103      	cbz	r3, 8005ae8 <_fstat_r+0x1c>
 8005ae6:	6023      	str	r3, [r4, #0]
 8005ae8:	bd38      	pop	{r3, r4, r5, pc}
 8005aea:	bf00      	nop
 8005aec:	20000188 	.word	0x20000188

08005af0 <_isatty_r>:
 8005af0:	b538      	push	{r3, r4, r5, lr}
 8005af2:	2300      	movs	r3, #0
 8005af4:	4d05      	ldr	r5, [pc, #20]	; (8005b0c <_isatty_r+0x1c>)
 8005af6:	4604      	mov	r4, r0
 8005af8:	4608      	mov	r0, r1
 8005afa:	602b      	str	r3, [r5, #0]
 8005afc:	f7fb f9c1 	bl	8000e82 <_isatty>
 8005b00:	1c43      	adds	r3, r0, #1
 8005b02:	d102      	bne.n	8005b0a <_isatty_r+0x1a>
 8005b04:	682b      	ldr	r3, [r5, #0]
 8005b06:	b103      	cbz	r3, 8005b0a <_isatty_r+0x1a>
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	bd38      	pop	{r3, r4, r5, pc}
 8005b0c:	20000188 	.word	0x20000188

08005b10 <_init>:
 8005b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b12:	bf00      	nop
 8005b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b16:	bc08      	pop	{r3}
 8005b18:	469e      	mov	lr, r3
 8005b1a:	4770      	bx	lr

08005b1c <_fini>:
 8005b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1e:	bf00      	nop
 8005b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b22:	bc08      	pop	{r3}
 8005b24:	469e      	mov	lr, r3
 8005b26:	4770      	bx	lr
